import {
  BackLink,
  Pane,
  PaneContent,
  PaneHeader,
  PaneHeaderActions,
  PaneItem,
  _DEBUG,
  require_isNumber,
  usePane,
  usePaneLayout,
  useStructureTool
} from "./chunk-D33G6UD4.js";
import "./chunk-PJIL6VEO.js";
import {
  ArrowLeftIcon,
  Box,
  Button2 as Button,
  CommandList,
  require_isString,
  require_omit,
  useGetI18nText,
  useI18nText,
  ut
} from "./chunk-KWWK3GQJ.js";
import {
  require_jsx_runtime
} from "./chunk-W7O3NKM5.js";
import {
  require_react
} from "./chunk-Z7L3MLVS.js";
import "./chunk-OBAQCMH7.js";
import {
  __toESM
} from "./chunk-AUZ3RYOM.js";

// node_modules/sanity/lib/_chunks/index-Dkzo_-Bz.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_react = __toESM(require_react());
var import_omit = __toESM(require_omit());
var import_isNumber = __toESM(require_isNumber());
var import_isString = __toESM(require_isString());
var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", {
  value: __freeze(raw || cooked.slice())
}));
var _a;
var Divider = ut.hr(_a || (_a = __template(["\n  background-color: var(--card-border-color);\n  height: 1px;\n  margin: 0;\n  border: none;\n"])));
function ListPaneContent(props) {
  const {
    childItemId,
    items,
    isActive,
    layout,
    showIcons,
    title
  } = props;
  const {
    collapsed: layoutCollapsed
  } = usePaneLayout();
  const getI18nText = useGetI18nText(items == null ? void 0 : items.filter((item) => item.type !== "divider"));
  const getItemDisabled = (0, import_react.useCallback)((itemIndex) => {
    var _a2;
    return ((_a2 = items == null ? void 0 : items.find((_, i) => i === itemIndex)) == null ? void 0 : _a2.type) === "divider";
  }, [items]);
  const shouldShowIconForItem = (0, import_react.useCallback)((item) => {
    var _a2;
    const itemShowIcon = (_a2 = item.displayOptions) == null ? void 0 : _a2.showIcon;
    if (typeof itemShowIcon !== "undefined") {
      return itemShowIcon !== false;
    }
    return showIcons !== false;
  }, [showIcons]);
  const renderItem = (0, import_react.useCallback)((item, ctx) => {
    const {
      virtualIndex: itemIndex
    } = ctx;
    if (item.type === "divider") {
      return (
        // eslint-disable-next-line react/no-array-index-key
        (0, import_jsx_runtime.jsx)(Box, {
          marginBottom: 1,
          children: (0, import_jsx_runtime.jsx)(Divider, {})
        }, "divider-".concat(itemIndex))
      );
    }
    const pressed = !isActive && childItemId === item.id;
    const selected = isActive && childItemId === item.id;
    const value = item._id && item.schemaType ? {
      _id: item._id,
      _type: item.schemaType.name,
      title: item.title
    } : void 0;
    return (0, import_jsx_runtime.jsx)(PaneItem, {
      icon: shouldShowIconForItem(item) ? item.icon : false,
      id: item.id,
      layout,
      marginBottom: 1,
      pressed,
      schemaType: item.schemaType,
      selected,
      title: getI18nText(item).title,
      value
    }, item.id);
  }, [childItemId, getI18nText, isActive, layout, shouldShowIconForItem]);
  return (0, import_jsx_runtime.jsx)(PaneContent, {
    overflow: layoutCollapsed ? "hidden" : "auto",
    children: items && items.length > 0 && (0, import_jsx_runtime.jsx)(CommandList, {
      activeItemDataAttr: "data-hovered",
      ariaLabel: title,
      canReceiveFocus: true,
      getItemDisabled,
      itemHeight: 51,
      items,
      onlyShowSelectionWhenActive: true,
      paddingBottom: 1,
      paddingX: 3,
      renderItem,
      wrapAround: false
    })
  });
}
var ListPaneHeader = (_ref) => {
  let {
    index,
    menuItems,
    menuItemGroups,
    title
  } = _ref;
  const {
    features
  } = useStructureTool();
  const {
    collapsed,
    isLast
  } = usePane();
  const tabIndex = isLast && !collapsed ? -1 : 0;
  return (0, import_jsx_runtime.jsx)(PaneHeader, {
    actions: (0, import_jsx_runtime.jsx)(PaneHeaderActions, {
      menuItems,
      menuItemGroups
    }),
    backButton: features.backButton && index > 0 && (0, import_jsx_runtime.jsx)(Button, {
      as: BackLink,
      "data-as": "a",
      icon: ArrowLeftIcon,
      mode: "bleed",
      tooltipProps: {
        content: "Back"
      }
    }),
    tabIndex,
    title
  });
};
function ListPane(props) {
  const {
    childItemId,
    index,
    isActive,
    isSelected,
    pane,
    paneKey
  } = props;
  const {
    defaultLayout,
    displayOptions,
    items,
    menuItems,
    menuItemGroups
  } = pane;
  const showIcons = (displayOptions == null ? void 0 : displayOptions.showIcons) !== false;
  const {
    title
  } = useI18nText(pane);
  return (0, import_jsx_runtime.jsxs)(Pane, {
    currentMaxWidth: 350,
    "data-testid": "structure-tool-list-pane",
    "data-ui": "ListPane",
    id: paneKey,
    maxWidth: 640,
    minWidth: 320,
    selected: isSelected,
    children: [_DEBUG, (0, import_jsx_runtime.jsx)(ListPaneHeader, {
      index,
      menuItems,
      menuItemGroups,
      title
    }), (0, import_jsx_runtime.jsx)(ListPaneContent, {
      childItemId,
      isActive,
      items,
      layout: defaultLayout,
      showIcons,
      title
    }, paneKey)]
  });
}
export {
  ListPane as default
};
//# sourceMappingURL=index-Dkzo_-Bz-AP7PWW36.js.map
