{
  "version": 3,
  "sources": ["../../../sanity/src/structure/panes/list/ListPaneContent.tsx", "../../../sanity/src/structure/panes/list/ListPaneHeader.tsx", "../../../sanity/src/structure/panes/list/ListPane.tsx"],
  "sourcesContent": ["import {Box} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {\n  CommandList,\n  type CommandListItemContext,\n  type GeneralPreviewLayoutKey,\n  useGetI18nText,\n} from 'sanity'\nimport styled from 'styled-components'\n\nimport {PaneContent, PaneItem, usePaneLayout} from '../../components'\nimport {type PaneListItem, type PaneListItemDivider} from '../../types'\n\ninterface ListPaneContentProps {\n  childItemId?: string\n  isActive?: boolean\n  items: (PaneListItem<unknown> | PaneListItemDivider)[] | undefined\n  layout?: GeneralPreviewLayoutKey\n  showIcons: boolean\n  title: string\n}\n\nconst Divider = styled.hr`\n  background-color: var(--card-border-color);\n  height: 1px;\n  margin: 0;\n  border: none;\n`\n\n/**\n * @internal\n */\nexport function ListPaneContent(props: ListPaneContentProps) {\n  const {childItemId, items, isActive, layout, showIcons, title} = props\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const getI18nText = useGetI18nText(\n    items?.filter(\n      (item): item is Exclude<typeof item, {type: 'divider'}> => item.type !== 'divider',\n    ),\n  )\n\n  const getItemDisabled = useCallback(\n    (itemIndex: number) => {\n      return items?.find((_, i) => i === itemIndex)?.type === 'divider'\n    },\n    [items],\n  )\n\n  const shouldShowIconForItem = useCallback(\n    (item: PaneListItem): boolean => {\n      const itemShowIcon = item.displayOptions?.showIcon\n\n      // Specific true/false on item should have precedence over list setting\n      if (typeof itemShowIcon !== 'undefined') {\n        return itemShowIcon !== false // Boolean(item.icon)\n      }\n\n      // If no item setting is defined, defer to the pane settings\n      return showIcons !== false // Boolean(item.icon)\n    },\n    [showIcons],\n  )\n\n  const renderItem = useCallback(\n    (item: PaneListItem<unknown> | PaneListItemDivider, ctx: CommandListItemContext) => {\n      const {virtualIndex: itemIndex} = ctx\n\n      if (item.type === 'divider') {\n        return (\n          // eslint-disable-next-line react/no-array-index-key\n          <Box key={`divider-${itemIndex}`} marginBottom={1}>\n            <Divider />\n          </Box>\n        )\n      }\n\n      const pressed = !isActive && childItemId === item.id\n      const selected = isActive && childItemId === item.id\n      // If this is a document list item, pass on the ID and type,\n      // otherwise leave it undefined to use the passed title and gang\n      const value =\n        item._id && item.schemaType\n          ? {_id: item._id, _type: item.schemaType.name, title: item.title}\n          : undefined\n\n      return (\n        <PaneItem\n          icon={shouldShowIconForItem(item) ? item.icon : false}\n          id={item.id}\n          key={item.id}\n          layout={layout}\n          marginBottom={1}\n          pressed={pressed}\n          schemaType={item.schemaType}\n          selected={selected}\n          title={getI18nText(item).title}\n          value={value}\n        />\n      )\n    },\n    [childItemId, getI18nText, isActive, layout, shouldShowIconForItem],\n  )\n\n  return (\n    <PaneContent overflow={layoutCollapsed ? 'hidden' : 'auto'}>\n      {items && items.length > 0 && (\n        <CommandList\n          activeItemDataAttr=\"data-hovered\"\n          ariaLabel={title}\n          canReceiveFocus\n          getItemDisabled={getItemDisabled}\n          itemHeight={51}\n          items={items}\n          onlyShowSelectionWhenActive\n          paddingBottom={1}\n          paddingX={3}\n          renderItem={renderItem}\n          wrapAround={false}\n        />\n      )}\n    </PaneContent>\n  )\n}\n", "import {ArrowLeftIcon} from '@sanity/icons'\n\nimport {Button} from '../../../ui-components'\nimport {BackLink, PaneHeader, PaneHeaderActions, usePane} from '../../components'\nimport {type PaneMenuItem, type PaneMenuItemGroup} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\n\ninterface ListPaneHeaderProps {\n  index: number\n  menuItems?: PaneMenuItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  title: string\n}\n\nexport const ListPaneHeader = ({index, menuItems, menuItemGroups, title}: ListPaneHeaderProps) => {\n  const {features} = useStructureTool()\n  const {collapsed, isLast} = usePane()\n  // Prevent focus if this is the last (non-collapsed) pane.\n  const tabIndex = isLast && !collapsed ? -1 : 0\n\n  return (\n    <PaneHeader\n      actions={<PaneHeaderActions menuItems={menuItems} menuItemGroups={menuItemGroups} />}\n      backButton={\n        features.backButton &&\n        index > 0 && (\n          <Button\n            as={BackLink}\n            data-as=\"a\"\n            icon={ArrowLeftIcon}\n            mode=\"bleed\"\n            tooltipProps={{content: 'Back'}}\n          />\n        )\n      }\n      tabIndex={tabIndex}\n      title={title}\n    />\n  )\n}\n", "import {Card, Code} from '@sanity/ui'\nimport {useI18nText} from 'sanity'\n\nimport {Pane} from '../../components'\nimport {_DEBUG} from '../../constants'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {ListPaneContent} from './ListPaneContent'\nimport {ListPaneHeader} from './ListPaneHeader'\n\ntype ListPaneProps = BaseStructureToolPaneProps<'list'>\n\n/**\n * @internal\n */\nexport function ListPane(props: ListPaneProps) {\n  const {childItemId, index, isActive, isSelected, pane, paneKey} = props\n\n  const {defaultLayout, displayOptions, items, menuItems, menuItemGroups} = pane\n  const showIcons = displayOptions?.showIcons !== false\n  const {title} = useI18nText(pane)\n\n  return (\n    <Pane\n      currentMaxWidth={350}\n      data-testid=\"structure-tool-list-pane\"\n      data-ui=\"ListPane\"\n      id={paneKey}\n      maxWidth={640}\n      minWidth={320}\n      selected={isSelected}\n    >\n      {_DEBUG && (\n        <Card padding={4} tone=\"transparent\">\n          <Code>{pane.source || '(none)'}</Code>\n        </Card>\n      )}\n\n      <ListPaneHeader\n        index={index}\n        menuItems={menuItems}\n        menuItemGroups={menuItemGroups}\n        title={title}\n      />\n\n      <ListPaneContent\n        childItemId={childItemId}\n        isActive={isActive}\n        items={items}\n        layout={defaultLayout}\n        key={paneKey}\n        showIcons={showIcons}\n        title={title}\n      />\n    </Pane>\n  )\n}\n"],
  "mappings": "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",
  "names": ["_a", "Divider", "styled", "hr", "__template", "ListPaneContent", "props", "childItemId", "items", "isActive", "layout", "showIcons", "title", "collapsed", "layoutCollapsed", "usePaneLayout", "getI18nText", "useGetI18nText", "filter", "item", "type", "getItemDisabled", "useCallback", "itemIndex", "find", "_", "i", "shouldShowIconForItem", "itemShowIcon", "displayOptions", "showIcon", "renderItem", "ctx", "virtualIndex", "jsx", "Box", "marginBottom", "children", "concat", "pressed", "id", "selected", "value", "_id", "schemaType", "_type", "name", "PaneItem", "icon", "PaneContent", "overflow", "length", "CommandList", "activeItemDataAttr", "ariaLabel", "canReceiveFocus", "itemHeight", "onlyShowSelectionWhenActive", "paddingBottom", "paddingX", "wrapAround", "ListPaneHeader", "_ref", "index", "menuItems", "menuItemGroups", "features", "useStructureTool", "isLast", "usePane", "tabIndex", "PaneHeader", "actions", "PaneHeaderActions", "backButton", "Button", "as", "BackLink", "ArrowLeftIcon", "mode", "tooltipProps", "content", "ListPane", "isSelected", "pane", "paneKey", "defaultLayout", "useI18nText", "jsxs", "Pane", "currentMaxWidth", "maxWidth", "minWidth", "_DEBUG"]
}
