{"version":3,"file":"validateAction-Cx6xAS3r.js","sources":["../../src/_internal/cli/actions/schema/formatSchemaValidation.ts","../../src/_internal/cli/actions/schema/validateAction.ts"],"sourcesContent":["import {type SchemaValidationProblemGroup, type SchemaValidationProblemPath} from '@sanity/types'\nimport chalk from 'chalk'\nimport logSymbols from 'log-symbols'\nimport {isatty} from 'tty'\n\nconst isTty = isatty(1)\n\nconst headers = {\n  error: isTty ? chalk.bold(chalk.bgRed(chalk.black(' ERROR '))) : chalk.red('[ERROR]'),\n  warning: isTty ? chalk.bold(chalk.bgYellow(chalk.black(' WARN '))) : chalk.yellow('[WARN]'),\n}\n\nconst severityValues = {error: 0, warning: 1}\n\nfunction formatPath(pathSegments: SchemaValidationProblemPath) {\n  const format = (\n    [curr, ...next]: SchemaValidationProblemPath,\n    mode: 'object' | 'array' = 'object',\n  ): string => {\n    if (!curr) return ''\n    if (curr.kind === 'property') return format(next, curr.name === 'of' ? 'array' : 'object')\n\n    const name = curr.name ? curr.name : `<anonymous_${curr.type}>`\n    return `${mode === 'array' ? `[${name}]` : `.${name}`}${format(next)}`\n  }\n\n  return format(pathSegments.slice(1)).substring(1) // removes the top-level type and leading `.`\n}\n\nexport function getAggregatedSeverity(\n  groupOrGroups: SchemaValidationProblemGroup | SchemaValidationProblemGroup[],\n): 'error' | 'warning' {\n  const groups = Array.isArray(groupOrGroups) ? groupOrGroups : [groupOrGroups]\n  return groups\n    .flatMap((group) => group.problems.map((problem) => problem.severity))\n    .find((severity) => severity === 'error')\n    ? 'error'\n    : 'warning'\n}\n\nexport function formatSchemaValidation(validation: SchemaValidationProblemGroup[]): string {\n  let unnamedTopLevelTypeCount = 0\n  const validationByType = Object.entries(\n    validation.reduce<Record<string, SchemaValidationProblemGroup[]>>((acc, next) => {\n      const [firstSegment] = next.path\n      if (!firstSegment) return acc\n      if (firstSegment.kind !== 'type') return acc\n\n      const topLevelType =\n        firstSegment.name || `<unnamed_${firstSegment.type}_type_${unnamedTopLevelTypeCount++}>`\n      const problems = acc[topLevelType] ?? []\n\n      problems.push(next)\n\n      acc[topLevelType] = problems\n      return acc\n    }, {}),\n  )\n\n  const formatted = validationByType\n    .sort((a, b) => {\n      const [aType, aGroups] = a\n      const [bType, bGroups] = b\n      const aValue = severityValues[getAggregatedSeverity(aGroups)]\n      const bValue = severityValues[getAggregatedSeverity(bGroups)]\n      if (aValue === bValue) return aType.localeCompare(bType, 'en-US')\n      return aValue - bValue\n    })\n    .map(([topLevelType, groups]) => {\n      const formattedTopLevelType = isTty\n        ? chalk.bgWhite(chalk.black(` ${topLevelType} `))\n        : `[${topLevelType}]`\n\n      const header = `${headers[getAggregatedSeverity(groups)]} ${formattedTopLevelType}`\n      const body = groups\n        .sort(\n          (a, b) =>\n            severityValues[getAggregatedSeverity(a)] - severityValues[getAggregatedSeverity(b)],\n        )\n        .map((group) => {\n          const formattedPath = `  ${chalk.bold(formatPath(group.path) || '(root)')}`\n          const formattedMessages = group.problems\n            .sort((a, b) => severityValues[a.severity] - severityValues[b.severity])\n            .map(({severity, message}) => `    ${logSymbols[severity]} ${message}`)\n            .join('\\n')\n\n          return `${formattedPath}\\n${formattedMessages}`\n        })\n        .join('\\n')\n\n      return `${header}\\n${body}`\n    })\n    .join('\\n\\n')\n\n  return formatted\n}\n","import {type CliCommandArguments, type CliCommandContext} from '@sanity/cli'\nimport logSymbols from 'log-symbols'\nimport path from 'path'\nimport readPkgUp from 'read-pkg-up'\nimport {Worker} from 'worker_threads'\n\nimport {\n  type ValidateSchemaWorkerData,\n  type ValidateSchemaWorkerResult,\n} from '../../threads/validateSchema'\nimport {formatSchemaValidation, getAggregatedSeverity} from './formatSchemaValidation'\n\ninterface ValidateFlags {\n  workspace?: string\n  format?: string\n  level?: 'error' | 'warning'\n}\n\nexport type SchemaValidationFormatter = (result: ValidateSchemaWorkerResult) => string\n\nexport default async function validateAction(\n  args: CliCommandArguments<ValidateFlags>,\n  {workDir, output}: CliCommandContext,\n): Promise<void> {\n  const flags = args.extOptions\n\n  const rootPkgPath = readPkgUp.sync({cwd: __dirname})?.path\n  if (!rootPkgPath) {\n    throw new Error('Could not find root directory for `sanity` package')\n  }\n\n  const workerPath = path.join(\n    path.dirname(rootPkgPath),\n    'lib',\n    '_internal',\n    'cli',\n    'threads',\n    'validateSchema.js',\n  )\n\n  const level = flags.level || 'warning'\n\n  if (level !== 'error' && level !== 'warning') {\n    throw new Error(`Invalid level. Available levels are 'error' and 'warning'.`)\n  }\n\n  const format = flags.format || 'pretty'\n\n  if (!['pretty', 'ndjson', 'json'].includes(format)) {\n    throw new Error(\n      `Did not recognize format '${flags.format}'. Available formats are 'pretty', 'ndjson', and 'json'.`,\n    )\n  }\n\n  let spinner\n\n  if (format === 'pretty') {\n    spinner = output\n      .spinner(\n        flags.workspace\n          ? `Validating schema from workspace '${flags.workspace}'…`\n          : 'Validating schema…',\n      )\n      .start()\n  }\n\n  const worker = new Worker(workerPath, {\n    workerData: {\n      workDir,\n      level,\n      workspace: flags.workspace,\n    } satisfies ValidateSchemaWorkerData,\n    // eslint-disable-next-line no-process-env\n    env: process.env,\n  })\n\n  const {validation} = await new Promise<ValidateSchemaWorkerResult>((resolve, reject) => {\n    worker.addListener('message', resolve)\n    worker.addListener('error', reject)\n  })\n\n  const problems = validation.flatMap((group) => group.problems)\n  const errorCount = problems.filter((problem) => problem.severity === 'error').length\n  const warningCount = problems.filter((problem) => problem.severity === 'warning').length\n\n  const overallSeverity = getAggregatedSeverity(validation)\n\n  switch (format) {\n    case 'ndjson': {\n      for (const group of validation) {\n        output.print(JSON.stringify(group))\n      }\n      break\n    }\n    case 'json': {\n      output.print(JSON.stringify(validation))\n      break\n    }\n    default: {\n      spinner?.succeed('Validated schema')\n      output.print(`\\nValidation results:`)\n      output.print(\n        `${logSymbols.error} Errors:   ${errorCount.toLocaleString('en-US')} error${\n          errorCount === 1 ? '' : 's'\n        }`,\n      )\n      if (level !== 'error') {\n        output.print(\n          `${logSymbols.warning} Warnings: ${warningCount.toLocaleString('en-US')} warning${\n            warningCount === 1 ? '' : 's'\n          }`,\n        )\n      }\n      output.print()\n\n      output.print(formatSchemaValidation(validation))\n    }\n  }\n\n  process.exitCode = overallSeverity === 'error' ? 1 : 0\n}\n"],"names":["isTty","isatty","headers","error","chalk","bold","bgRed","black","red","warning","bgYellow","yellow","severityValues","formatPath","pathSegments","format","_ref","curr","next","mode","kind","name","concat","type","slice","substring","getAggregatedSeverity","groupOrGroups","groups","Array","isArray","flatMap","group","problems","map","problem","severity","find","formatSchemaValidation","validation","unnamedTopLevelTypeCount","validationByType","Object","entries","reduce","acc","_a","firstSegment","path","topLevelType","push","formatted","sort","a","b","aType","aGroups","bType","bGroups","aValue","bValue","localeCompare","_ref2","formattedTopLevelType","default","bgWhite","header","body","formattedPath","formattedMessages","_ref3","message","logSymbols","join","validateAction","args","_ref4","workDir","output","flags","extOptions","rootPkgPath","sync","cwd","__dirname","Error","workerPath","dirname","level","includes","spinner","workspace","start","worker","Worker","workerData","env","process","Promise","resolve","reject","addListener","errorCount","filter","length","warningCount","overallSeverity","print","JSON","stringify","succeed","toLocaleString","exitCode"],"mappings":"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"}