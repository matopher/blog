{"version":3,"file":"buildAction-D37qdTUB.js","sources":["../../src/_internal/cli/actions/build/build.telemetry.ts","../../src/_internal/cli/actions/build/buildAction.ts"],"sourcesContent":["import {defineTrace} from '@sanity/telemetry'\n\nexport const BuildTrace = defineTrace<{outputSize: number}>({\n  name: 'Studio Build Completed',\n  version: 0,\n  description: 'A Studio build completed',\n})\n","import path from 'path'\nimport {promisify} from 'util'\nimport chalk from 'chalk'\nimport {noopLogger} from '@sanity/telemetry'\nimport rimrafCallback from 'rimraf'\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore This may not yet be built.\nimport type {CliCommandArguments, CliCommandContext} from '@sanity/cli'\nimport {buildStaticFiles, ChunkModule, ChunkStats} from '../../server'\nimport {checkStudioDependencyVersions} from '../../util/checkStudioDependencyVersions'\nimport {checkRequiredDependencies} from '../../util/checkRequiredDependencies'\nimport {getTimer} from '../../util/timing'\nimport {BuildTrace} from './build.telemetry'\n\nconst rimraf = promisify(rimrafCallback)\n\nexport interface BuildSanityStudioCommandFlags {\n  yes?: boolean\n  y?: boolean\n  minify?: boolean\n  stats?: boolean\n  'source-maps'?: boolean\n}\n\nexport default async function buildSanityStudio(\n  args: CliCommandArguments<BuildSanityStudioCommandFlags>,\n  context: CliCommandContext,\n  overrides?: {basePath?: string},\n): Promise<{didCompile: boolean}> {\n  const timer = getTimer()\n  const {output, prompt, workDir, cliConfig, telemetry = noopLogger} = context\n  const flags: BuildSanityStudioCommandFlags = {\n    minify: true,\n    stats: false,\n    'source-maps': false,\n    ...args.extOptions,\n  }\n\n  const unattendedMode = Boolean(flags.yes || flags.y)\n  const defaultOutputDir = path.resolve(path.join(workDir, 'dist'))\n  const outputDir = path.resolve(args.argsWithoutOptions[0] || defaultOutputDir)\n\n  await checkStudioDependencyVersions(workDir)\n\n  // If the check resulted in a dependency install, the CLI command will be re-run,\n  // thus we want to exit early\n  if ((await checkRequiredDependencies(context)).didInstall) {\n    return {didCompile: false}\n  }\n\n  const envVarKeys = getSanityEnvVars()\n  if (envVarKeys.length > 0) {\n    output.print(\n      '\\nIncluding the following environment variables as part of the JavaScript bundle:',\n    )\n    envVarKeys.forEach((key) => output.print(`- ${key}`))\n    output.print('')\n  }\n\n  let shouldClean = true\n  if (outputDir !== defaultOutputDir && !unattendedMode) {\n    shouldClean = await prompt.single({\n      type: 'confirm',\n      message: `Do you want to delete the existing directory (${outputDir}) first?`,\n      default: true,\n    })\n  }\n\n  // Determine base path for built studio\n  let basePath = '/'\n  const envBasePath = process.env.SANITY_STUDIO_BASEPATH\n  const configBasePath = cliConfig?.project?.basePath\n\n  // Allow `sanity deploy` to override base path\n  if (overrides?.basePath) {\n    basePath = overrides.basePath\n  } else if (envBasePath) {\n    // Environment variable (SANITY_STUDIO_BASEPATH)\n    basePath = envBasePath\n  } else if (configBasePath) {\n    // `sanity.cli.ts`\n    basePath = configBasePath\n  }\n\n  if (envBasePath && configBasePath) {\n    output.warn(\n      `Overriding configured base path (${configBasePath}) with value from environment variable (${envBasePath})`,\n    )\n  }\n\n  let spin\n\n  if (shouldClean) {\n    timer.start('cleanOutputFolder')\n    spin = output.spinner('Clean output folder').start()\n    await rimraf(outputDir)\n    const cleanDuration = timer.end('cleanOutputFolder')\n    spin.text = `Clean output folder (${cleanDuration.toFixed()}ms)`\n    spin.succeed()\n  }\n\n  spin = output.spinner('Build Sanity Studio').start()\n\n  const trace = telemetry.trace(BuildTrace)\n  trace.start()\n  try {\n    timer.start('bundleStudio')\n\n    const bundle = await buildStaticFiles({\n      cwd: workDir,\n      outputDir,\n      basePath,\n      sourceMap: Boolean(flags['source-maps']),\n      minify: Boolean(flags.minify),\n      vite: cliConfig && 'vite' in cliConfig ? cliConfig.vite : undefined,\n    })\n    trace.log({\n      outputSize: bundle.chunks\n        .flatMap((chunk) => chunk.modules.flatMap((mod) => mod.renderedLength))\n        .reduce((sum, n) => sum + n, 0),\n    })\n    const buildDuration = timer.end('bundleStudio')\n\n    spin.text = `Build Sanity Studio (${buildDuration.toFixed()}ms)`\n    spin.succeed()\n    trace.complete()\n    if (flags.stats) {\n      output.print('\\nLargest module files:')\n      output.print(formatModuleSizes(sortModulesBySize(bundle.chunks).slice(0, 15)))\n    }\n  } catch (err) {\n    spin.fail()\n    trace.error(err)\n    throw err\n  }\n\n  return {didCompile: true}\n}\n\n// eslint-disable-next-line no-process-env\nfunction getSanityEnvVars(env: Record<string, string | undefined> = process.env): string[] {\n  return Object.keys(env).filter((key) => key.toUpperCase().startsWith('SANITY_STUDIO_'))\n}\n\nfunction sortModulesBySize(chunks: ChunkStats[]): ChunkModule[] {\n  return chunks\n    .flatMap((chunk) => chunk.modules)\n    .sort((modA, modB) => modB.renderedLength - modA.renderedLength)\n}\n\nfunction formatModuleSizes(modules: ChunkModule[]): string {\n  const lines = []\n  for (const mod of modules) {\n    lines.push(` - ${formatModuleName(mod.name)} (${formatSize(mod.renderedLength)})`)\n  }\n\n  return lines.join('\\n')\n}\n\nfunction formatModuleName(modName: string): string {\n  const delimiter = '/node_modules/'\n  const nodeIndex = modName.lastIndexOf(delimiter)\n  return nodeIndex === -1 ? modName : modName.slice(nodeIndex + delimiter.length)\n}\n\nfunction formatSize(bytes: number): string {\n  return chalk.cyan(`${(bytes / 1024).toFixed()} kB`)\n}\n"],"names":["BuildTrace","defineTrace","name","version","description","rimraf","promisify","rimrafCallback","buildSanityStudio","args","context","overrides","_a","timer","getTimer","output","prompt","workDir","cliConfig","telemetry","noopLogger","flags","minify","stats","extOptions","unattendedMode","Boolean","yes","y","defaultOutputDir","path","resolve","join","outputDir","argsWithoutOptions","checkStudioDependencyVersions","checkRequiredDependencies","didInstall","didCompile","envVarKeys","getSanityEnvVars","length","print","forEach","key","concat","shouldClean","single","type","message","default","basePath","envBasePath","process","env","SANITY_STUDIO_BASEPATH","configBasePath","project","warn","spin","start","spinner","cleanDuration","end","text","toFixed","succeed","trace","bundle","buildStaticFiles","cwd","sourceMap","vite","log","outputSize","chunks","flatMap","chunk","modules","mod","renderedLength","reduce","sum","n","buildDuration","complete","formatModuleSizes","sortModulesBySize","slice","err","fail","error","arguments","undefined","Object","keys","filter","toUpperCase","startsWith","sort","modA","modB","lines","push","formatModuleName","formatSize","modName","delimiter","nodeIndex","lastIndexOf","bytes","chalk","cyan"],"mappings":"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"}