{"version":3,"file":"runtime-B_bGx0NP.js","sources":["../../src/_internal/cli/server/debug.ts","../../src/_internal/cli/server/aliases.ts","../../src/_internal/cli/server/helpers.ts","../../src/_internal/cli/server/sanityMonorepo.ts","../../src/_internal/cli/server/renderDocument.ts","../../src/_internal/cli/server/vite/plugin-sanity-build-entries.ts","../../src/_internal/cli/server/vite/plugin-sanity-dot-workaround.ts","../../src/_internal/cli/server/webManifest.ts","../../src/_internal/cli/server/vite/plugin-sanity-favicons.ts","../../src/_internal/cli/server/vite/plugin-sanity-runtime-rewrite.ts","../../src/_internal/cli/server/getViteConfig.ts","../../src/_internal/cli/server/getEntryModule.ts","../../src/_internal/cli/server/sanityConfig.ts","../../src/_internal/cli/server/runtime.ts"],"sourcesContent":["import debugIt from 'debug'\n\nexport const debug = debugIt('sanity:server')\n","import path from 'path'\n\nimport {type SanityMonorepo} from './sanityMonorepo'\n\n/**\n * Returns an object of aliases for vite to use\n *\n * @internal\n */\nexport function getAliases(opts: {monorepo?: SanityMonorepo}): Record<string, string> {\n  const {monorepo} = opts\n\n  if (!monorepo?.path) {\n    return {}\n  }\n\n  // Load monorepo aliases (if the current Studio is located within the sanity monorepo)\n  // This is done in order for the Vite server to use the source files instead of\n  // the compiled output, allowing for a better dev experience.\n  const aliasesPath = path.resolve(monorepo.path, 'dev/aliases.cjs')\n\n  // eslint-disable-next-line import/no-dynamic-require\n  const devAliases: Record<string, string> = require(aliasesPath)\n\n  const monorepoAliases = Object.fromEntries(\n    Object.entries(devAliases).map(([key, modulePath]) => {\n      return [key, path.resolve(monorepo.path, modulePath)]\n    }),\n  )\n\n  return monorepoAliases\n}\n","import path from 'path'\nimport readPkgUp from 'read-pkg-up'\nimport resolveFrom from 'resolve-from'\n\n/**\n * Given a module name such as \"styled-components\", will resolve the _module path_,\n * eg if require.resolve(`styled-components`) resolves to:\n *   `/some/node_modules/styled-components/lib/cjs/styled.js`\n * this function will instead return\n *   `/some/node_modules/styled-components`\n *\n * This is done in order for aliases to be pointing to the right module in terms of\n * _file-system location_, without pointing to a specific commonjs/browser/module variant\n *\n * @internal\n */\nexport async function getModulePath(mod: string, fromDir: string): Promise<string> {\n  const modulePath = resolveFrom(fromDir, mod)\n  const pkg = await readPkgUp({cwd: path.dirname(modulePath)})\n\n  return pkg ? path.dirname(pkg.path) : modulePath\n}\n\n/**\n * @internal\n */\nexport function isRecord(value: unknown): value is Record<string, unknown> {\n  return Boolean(value) && typeof value === 'object' && !Array.isArray(value)\n}\n\n/**\n * Ensures that the given path both starts and ends with a single slash\n *\n * @internal\n */\nexport function normalizeBasePath(pathName: string): string {\n  return `/${pathName}/`.replace(/^\\/+/, '/').replace(/\\/+$/, '/')\n}\n","import path from 'path'\nimport readPkgUp from 'read-pkg-up'\n\n/**\n * @internal\n */\nexport interface SanityMonorepo {\n  path: string\n}\n\n/**\n * Load information about the `sanity-io/sanity` monorepo (if applicable)\n *\n * @internal\n */\nexport async function loadSanityMonorepo(cwd: string): Promise<SanityMonorepo | undefined> {\n  let p = cwd\n\n  while (p !== '/') {\n    const readResult = await readPkgUp({cwd: p})\n\n    if (!readResult) {\n      return undefined\n    }\n\n    if (readResult.packageJson.isSanityMonorepo) {\n      return {path: path.dirname(readResult.path)}\n    }\n\n    p = path.dirname(path.dirname(readResult.path))\n  }\n\n  return undefined\n}\n","/**\n * Looks for and imports (in preferred order):\n *   - src/_document.js\n *   - src/_document.tsx\n *\n * Then renders using ReactDOM to a string, which is sent back to the parent\n * process over the worker `postMessage` channel.\n */\nimport chalk from 'chalk'\nimport fs from 'fs'\nimport importFresh from 'import-fresh'\nimport path from 'path'\nimport {createElement} from 'react'\nimport {renderToStaticMarkup} from 'react-dom/server'\nimport {isMainThread, parentPort, Worker, workerData} from 'worker_threads'\n\nimport {getAliases} from './aliases'\nimport {debug as serverDebug} from './debug'\nimport {type SanityMonorepo} from './sanityMonorepo'\n\nconst debug = serverDebug.extend('renderDocument')\n\n// Don't use threads in the jest world\n// eslint-disable-next-line no-process-env\nconst useThreads = typeof process.env.JEST_WORKER_ID === 'undefined'\nconst hasWarnedAbout = new Set<string>()\n\nconst defaultProps = {\n  entryPath: './.sanity/runtime/app.js',\n}\n\nconst autoGeneratedWarning = `\nThis file is auto-generated from \"sanity dev\".\nModifications to this file are automatically discarded.\n`.trim()\n\ninterface DocumentProps {\n  basePath: string\n  entryPath?: string\n  css?: string[]\n}\n\nexport function renderDocument(options: {\n  monorepo?: SanityMonorepo\n  studioRootPath: string\n  props?: DocumentProps\n}): Promise<string> {\n  return new Promise((resolve, reject) => {\n    if (!useThreads) {\n      resolve(getDocumentHtml(options.studioRootPath, options.props))\n      return\n    }\n\n    debug('Starting worker thread for %s', __filename)\n    const worker = new Worker(__filename, {\n      execArgv: __DEV__ ? ['-r', `${__dirname}/esbuild-register.js`] : undefined,\n      workerData: {...options, dev: __DEV__, shouldWarn: true},\n      // eslint-disable-next-line no-process-env\n      env: process.env,\n    })\n\n    worker.on('message', (msg) => {\n      if (msg.type === 'warning') {\n        if (hasWarnedAbout.has(msg.warnKey)) {\n          return\n        }\n\n        if (Array.isArray(msg.message)) {\n          msg.message.forEach((warning: string) =>\n            console.warn(`${chalk.yellow('[warn]')} ${warning}`),\n          )\n        } else {\n          console.warn(`${chalk.yellow('[warn]')} ${msg.message}`)\n        }\n\n        hasWarnedAbout.add(msg.warnKey)\n        return\n      }\n\n      if (msg.type === 'error') {\n        debug('Error from worker: %s', msg.error || 'Unknown error')\n        reject(new Error(msg.error || 'Document rendering worker stopped with an unknown error'))\n        return\n      }\n\n      if (msg.type === 'result') {\n        debug('Document HTML rendered, %d bytes', msg.html.length)\n        resolve(msg.html)\n      }\n    })\n    worker.on('error', (err) => {\n      debug('Worker errored: %s', err.message)\n      reject(err)\n    })\n    worker.on('exit', (code) => {\n      if (code !== 0) {\n        debug('Worker stopped with code %d', code)\n        reject(new Error(`Document rendering worker stopped with exit code ${code}`))\n      }\n    })\n  })\n}\n\nexport function decorateIndexWithAutoGeneratedWarning(template: string): string {\n  return template.replace(/<head/, `\\n<!--\\n${autoGeneratedWarning}\\n-->\\n<head`)\n}\n\nexport function getPossibleDocumentComponentLocations(studioRootPath: string): string[] {\n  return [path.join(studioRootPath, '_document.js'), path.join(studioRootPath, '_document.tsx')]\n}\n\n/**\n * Adds a base path to a URL if necessary, and returns the resulting URL.\n * @param url - The URL to prefix with a base path.\n * @param basePath - The base path to prefix the URL with. Default value is `/`.\n * @returns The resulting URL with the base path.\n * @internal\n */\nexport function _prefixUrlWithBasePath(url: string, basePath: string): string {\n  // Normalize basePath by adding a leading slash if it's missing.\n  const normalizedBasePath = basePath.startsWith('/') ? basePath : `/${basePath}`\n\n  // If the URL starts with a slash, append it to the basePath, removing any trailing slash if present.\n  if (url.startsWith('/')) {\n    if (normalizedBasePath.endsWith('/')) {\n      return `${normalizedBasePath.slice(0, -1)}${url}`\n    }\n    return `${normalizedBasePath}${url}`\n  }\n\n  // If the URL doesn't start with a slash, append it to the basePath with a slash in between.\n  if (normalizedBasePath.endsWith('/')) {\n    return `${normalizedBasePath}${url}`\n  }\n  return `${normalizedBasePath}/${url}`\n}\n\nif (!isMainThread && parentPort) {\n  renderDocumentFromWorkerData()\n}\n\nfunction renderDocumentFromWorkerData() {\n  if (!parentPort || !workerData) {\n    throw new Error('Must be used as a Worker with a valid options object in worker data')\n  }\n\n  const {monorepo, studioRootPath, props} = workerData || {}\n\n  if (workerData?.dev) {\n    // Define `__DEV__` in the worker thread as well\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ;(global as any).__DEV__ = true\n  }\n\n  if (typeof studioRootPath !== 'string') {\n    parentPort.postMessage({type: 'error', message: 'Missing/invalid `studioRootPath` option'})\n    return\n  }\n\n  if (props && typeof props !== 'object') {\n    parentPort.postMessage({type: 'error', message: '`props` must be an object if provided'})\n    return\n  }\n\n  // Require hook #1\n  // Alias monorepo modules\n  debug('Registering potential aliases')\n  require('module-alias').addAliases(getAliases({monorepo}))\n\n  // Require hook #2\n  // Use `esbuild` to allow JSX/TypeScript and modern JS features\n  debug('Registering esbuild for node %s', process.version)\n  const {unregister} = __DEV__\n    ? {unregister: () => undefined}\n    : require('esbuild-register/dist/node').register({\n        target: `node${process.version.slice(1)}`,\n        jsx: 'automatic',\n        extensions: ['.jsx', '.ts', '.tsx', '.mjs'],\n      })\n\n  // Require hook #3\n  // Same as above, but we don't want to enforce a .jsx extension for anything with JSX\n  debug('Registering esbuild for .js files using jsx loader')\n  const {unregister: unregisterJs} = __DEV__\n    ? () => ({unregister: () => undefined})\n    : require('esbuild-register/dist/node').register({\n        target: `node${process.version.slice(1)}`,\n        extensions: ['.js'],\n        jsx: 'automatic',\n        loader: 'jsx',\n      })\n\n  const html = getDocumentHtml(studioRootPath, props)\n\n  parentPort.postMessage({type: 'result', html})\n\n  // Be polite and clean up after esbuild-register\n  unregister()\n  unregisterJs()\n}\n\nfunction getDocumentHtml(studioRootPath: string, props?: DocumentProps): string {\n  const Document = getDocumentComponent(studioRootPath)\n\n  // NOTE: Validate the list of CSS paths so implementers of `_document.tsx` don't have to\n  // - If the path is not a full URL, check if it starts with `/`\n  //   - If not, then prepend a `/` to the string\n  const css = props?.css?.map((url) => {\n    try {\n      // If the URL is absolute, we don't need to prefix it\n      return new URL(url).toString()\n    } catch {\n      return _prefixUrlWithBasePath(url, props.basePath)\n    }\n  })\n\n  debug('Rendering document component using React')\n  const result = renderToStaticMarkup(createElement(Document, {...defaultProps, ...props, css}))\n  return `<!DOCTYPE html>${result}`\n}\n\nfunction getDocumentComponent(studioRootPath: string) {\n  debug('Loading default document component from `sanity` module')\n  const {DefaultDocument} = require('sanity')\n\n  debug('Attempting to load user-defined document component from %s', studioRootPath)\n  const userDefined = tryLoadDocumentComponent(studioRootPath)\n\n  if (!userDefined) {\n    debug('Using default document component')\n    return DefaultDocument\n  }\n\n  debug('Found user defined document component at %s', userDefined.path)\n\n  const DocumentComp = userDefined.component.default || userDefined.component // CommonJS\n  if (typeof DocumentComp === 'function') {\n    debug('User defined document component is a function, assuming valid')\n    return DocumentComp\n  }\n\n  debug('User defined document component did not have a default export')\n  const userExports = Object.keys(userDefined.component).join(', ') || 'None'\n  const relativePath = path.relative(process.cwd(), userDefined.path)\n  const typeHint =\n    typeof userDefined.component.default === 'undefined'\n      ? ''\n      : ` (type was ${typeof userDefined.component.default})`\n\n  const warnKey = `${relativePath}/${userDefined.modified}`\n\n  parentPort?.postMessage({\n    type: 'warning',\n    message: [\n      `${relativePath} did not have a default export that is a React component${typeHint}`,\n      `Named exports/properties found: ${userExports}`.trim(),\n      `Using default document component from \"sanity\".`,\n    ],\n    warnKey,\n  })\n\n  return DefaultDocument\n}\n\nfunction tryLoadDocumentComponent(studioRootPath: string) {\n  const locations = getPossibleDocumentComponentLocations(studioRootPath)\n\n  for (const componentPath of locations) {\n    debug('Trying to load document component from %s', componentPath)\n    try {\n      return {\n        // eslint-disable-next-line import/no-dynamic-require\n        component: importFresh<any>(componentPath),\n        path: componentPath,\n        // eslint-disable-next-line no-sync\n        modified: Math.floor(fs.statSync(componentPath)?.mtimeMs),\n      }\n    } catch (err) {\n      // Allow \"not found\" errors\n      if (err.code !== 'MODULE_NOT_FOUND') {\n        debug('Failed to load document component: %s', err.message)\n        throw err\n      }\n\n      debug('Document component not found at %s', componentPath)\n    }\n  }\n\n  return null\n}\n","import {type ChunkMetadata, type Plugin} from 'vite'\n\nimport {renderDocument} from '../renderDocument'\nimport {type SanityMonorepo} from '../sanityMonorepo'\n\ninterface ViteOutputBundle {\n  [fileName: string]: ViteRenderedChunk | ViteRenderedAsset\n}\n\ninterface ViteRenderedAsset {\n  type: 'asset'\n}\n\ninterface ViteRenderedChunk {\n  type: 'chunk'\n  name: string\n  fileName: string\n  facadeModuleId: string | null\n  code: string\n  imports: string[]\n  viteMetadata: ChunkMetadata\n}\n\nconst entryChunkId = '.sanity/runtime/app.js'\n\nexport function sanityBuildEntries(options: {\n  cwd: string\n  monorepo: SanityMonorepo | undefined\n  basePath: string\n}): Plugin {\n  const {cwd, monorepo, basePath} = options\n\n  return {\n    name: 'sanity/server/build-entries',\n    apply: 'build',\n\n    buildStart() {\n      this.emitFile({\n        type: 'chunk',\n        id: entryChunkId,\n        name: 'sanity',\n      })\n    },\n\n    async generateBundle(_options, outputBundle) {\n      const bundle = outputBundle as unknown as ViteOutputBundle\n      const entryFile = Object.values(bundle).find(\n        (file) =>\n          file.type === 'chunk' &&\n          file.name === 'sanity' &&\n          file.facadeModuleId?.endsWith(entryChunkId),\n      )\n\n      if (!entryFile) {\n        throw new Error(`Failed to find entry file in bundle (${entryChunkId})`)\n      }\n\n      if (entryFile.type !== 'chunk') {\n        throw new Error('Entry file is not a chunk')\n      }\n\n      const entryFileName = entryFile.fileName\n      const entryPath = [basePath.replace(/\\/+$/, ''), entryFileName].join('/')\n\n      let css: string[] = []\n      if (entryFile.viteMetadata?.importedCss) {\n        // Check all the top-level imports of the entryPoint to see if they have\n        // static CSS assets that need loading\n        css = [...entryFile.viteMetadata.importedCss]\n        for (const key of entryFile.imports) {\n          // Traverse all CSS assets that isn't loaded by the runtime and\n          // need <link> tags in the HTML template\n          const entry = bundle[key]\n          const importedCss =\n            entry && entry.type === 'chunk' ? entry.viteMetadata.importedCss : undefined\n\n          if (importedCss) {\n            css.push(...importedCss)\n          }\n        }\n      }\n\n      this.emitFile({\n        type: 'asset',\n        fileName: 'index.html',\n        source: await renderDocument({\n          monorepo,\n          studioRootPath: cwd,\n          props: {\n            basePath,\n            entryPath,\n            css,\n          },\n        }),\n      })\n    },\n  }\n}\n","import history from 'connect-history-api-fallback'\nimport fs from 'fs'\nimport path from 'path'\nimport {type Plugin} from 'vite'\n\n/**\n * This is a Vite plugin for supporting locations containing `.` in their pathname.\n *\n * @see https://github.com/vitejs/vite/issues/2245\n */\nexport function sanityDotWorkaroundPlugin(): Plugin {\n  return {\n    name: 'sanity/server/dot-workaround',\n    configureServer(server) {\n      const {root} = server.config\n\n      return () => {\n        const handler = history({\n          disableDotRule: true,\n          rewrites: [\n            {\n              from: /\\/index.html$/,\n              to: ({parsedUrl}) => {\n                const pathname = parsedUrl.pathname\n\n                if (pathname && fs.existsSync(path.join(root, pathname))) {\n                  return pathname\n                }\n\n                return `/index.html`\n              },\n            },\n          ],\n        })\n\n        server.middlewares.use((req, res, next) => {\n          handler(req as any, res as any, next)\n        })\n      }\n    },\n  }\n}\n","export interface WebManifest {\n  icons: {\n    src: string\n    type: string\n    sizes: string\n  }[]\n}\n\nexport function generateWebManifest(basePath: string): WebManifest {\n  return {\n    icons: [\n      {src: `${basePath}/favicon-192.png`, type: 'image/png', sizes: '192x192'},\n      {src: `${basePath}/favicon-512.png`, type: 'image/png', sizes: '512x512'},\n    ],\n  }\n}\n","import fs from 'fs/promises'\nimport path from 'path'\nimport {type Plugin} from 'vite'\n\nimport {generateWebManifest} from '../webManifest'\n\nconst mimeTypes: Record<string, string | undefined> = {\n  '.ico': 'image/x-icon',\n  '.svg': 'image/svg+xml',\n  '.png': 'image/png',\n}\n\n/**\n * Fallback favicons plugin for Sanity.\n *\n * If a favicon is not found in the static folder, this plugin will serve the default\n * Sanity favicons from the npm bundle. If a custom `favicon.ico` is found in the static\n * folder, it will also be served for a root `/favicon.ico` request.\n *\n * @param options - Options for the plugin\n * @returns A Vite plugin\n * @internal\n */\nexport function sanityFaviconsPlugin({\n  defaultFaviconsPath,\n  customFaviconsPath,\n  staticUrlPath,\n}: {\n  defaultFaviconsPath: string\n  customFaviconsPath: string\n  staticUrlPath: string\n}): Plugin {\n  const cache: {favicons?: string[]} = {}\n\n  async function getFavicons(): Promise<string[]> {\n    if (cache.favicons) {\n      return cache.favicons\n    }\n\n    cache.favicons = await fs.readdir(defaultFaviconsPath)\n    return cache.favicons\n  }\n\n  async function hasCustomFavicon(): Promise<boolean> {\n    try {\n      await fs.access(path.join(customFaviconsPath, 'favicon.ico'))\n      return true\n    } catch (err) {\n      return false\n    }\n  }\n\n  return {\n    name: 'sanity/server/sanity-favicons',\n    apply: 'serve',\n    configureServer(viteDevServer) {\n      const webManifest = JSON.stringify(generateWebManifest(staticUrlPath), null, 2)\n      const webManifestPath = `${staticUrlPath}/manifest.webmanifest`\n\n      return () => {\n        viteDevServer.middlewares.use(async (req, res, next) => {\n          if (req.url?.endsWith(webManifestPath)) {\n            res.writeHead(200, 'OK', {'content-type': 'application/manifest+json'})\n            res.write(webManifest)\n            res.end()\n            return\n          }\n\n          const parsedUrl =\n            ((req as any)._parsedUrl as URL) || new URL(req.url || '/', 'http://localhost:3333')\n\n          const pathName = parsedUrl.pathname || ''\n          const fileName = path.basename(pathName || '')\n          const icons = await getFavicons()\n          const isIconRequest =\n            pathName.startsWith('/favicon.ico') ||\n            (icons.includes(fileName) && pathName.includes(staticUrlPath))\n\n          if (!isIconRequest) {\n            next()\n            return\n          }\n\n          const faviconPath =\n            fileName === 'favicon.ico' && (await hasCustomFavicon())\n              ? path.join(customFaviconsPath, 'favicon.ico')\n              : path.join(defaultFaviconsPath, fileName)\n\n          const mimeType = mimeTypes[path.extname(fileName)] || 'application/octet-stream'\n          res.writeHead(200, 'OK', {'content-type': mimeType})\n          res.write(await fs.readFile(faviconPath))\n          res.end()\n        })\n      }\n    },\n  }\n}\n","import {type Plugin} from 'vite'\n\nexport function sanityRuntimeRewritePlugin(): Plugin {\n  return {\n    name: 'sanity/server/sanity-runtime-rewrite',\n    apply: 'serve',\n    configureServer(viteDevServer) {\n      return () => {\n        viteDevServer.middlewares.use((req, res, next) => {\n          if (req.url === '/index.html') {\n            req.url = '/.sanity/runtime/index.html'\n          }\n\n          next()\n        })\n      }\n    },\n  }\n}\n","import {type UserViteConfig} from '@sanity/cli'\nimport viteReact from '@vitejs/plugin-react'\nimport debug from 'debug'\nimport path from 'path'\nimport readPkgUp from 'read-pkg-up'\nimport {type ConfigEnv, type InlineConfig, mergeConfig} from 'vite'\n\nimport {getAliases} from './aliases'\nimport {getStudioEnvironmentVariables} from './getStudioEnvironmentVariables'\nimport {normalizeBasePath} from './helpers'\nimport {loadSanityMonorepo} from './sanityMonorepo'\nimport {sanityBuildEntries} from './vite/plugin-sanity-build-entries'\nimport {sanityDotWorkaroundPlugin} from './vite/plugin-sanity-dot-workaround'\nimport {sanityFaviconsPlugin} from './vite/plugin-sanity-favicons'\nimport {sanityRuntimeRewritePlugin} from './vite/plugin-sanity-runtime-rewrite'\n\nexport interface ViteOptions {\n  /**\n   * Root path of the studio/sanity app\n   */\n  cwd: string\n\n  /**\n   * Base path (eg under where to serve the app - `/studio` or similar)\n   * Will be normalized to ensure it starts and ends with a `/`\n   */\n  basePath?: string\n\n  /**\n   * Output directory (eg where to place the built files, if any)\n   */\n  outputDir?: string\n\n  /**\n   * Whether or not to enable source maps\n   */\n  sourceMap?: boolean\n\n  /**\n   * Whether or not to minify the output (only used in `mode: 'production'`)\n   */\n  minify?: boolean\n\n  /**\n   * HTTP development server configuration\n   */\n  server?: {port?: number; host?: string}\n\n  /**\n   * Mode to run vite in - eg development or production\n   */\n  mode: 'development' | 'production'\n}\n\n/**\n * Get a configuration object for Vite based on the passed options\n *\n * @internal Only meant for consumption inside of Sanity modules, do not depend on this externally\n */\nexport async function getViteConfig(options: ViteOptions): Promise<InlineConfig> {\n  const {\n    cwd,\n    mode,\n    outputDir,\n    // default to `true` when `mode=development`\n    sourceMap = options.mode === 'development',\n    server,\n    minify,\n    basePath: rawBasePath = '/',\n  } = options\n\n  const monorepo = await loadSanityMonorepo(cwd)\n  const basePath = normalizeBasePath(rawBasePath)\n\n  const sanityPkgPath = (await readPkgUp({cwd: __dirname}))?.path\n  if (!sanityPkgPath) {\n    throw new Error('Unable to resolve `sanity` module root')\n  }\n\n  const customFaviconsPath = path.join(cwd, 'static')\n  const defaultFaviconsPath = path.join(path.dirname(sanityPkgPath), 'static', 'favicons')\n  const staticPath = `${basePath}static`\n\n  const viteConfig: InlineConfig = {\n    // Define a custom cache directory so that sanity's vite cache\n    // does not conflict with any potential local vite projects\n    cacheDir: 'node_modules/.sanity/vite',\n    root: cwd,\n    base: basePath,\n    build: {\n      outDir: outputDir || path.resolve(cwd, 'dist'),\n      sourcemap: sourceMap,\n    },\n    server: {\n      host: server?.host,\n      port: server?.port || 3333,\n      strictPort: true,\n    },\n    configFile: false,\n    mode,\n    plugins: [\n      viteReact(),\n      sanityFaviconsPlugin({defaultFaviconsPath, customFaviconsPath, staticUrlPath: staticPath}),\n      sanityDotWorkaroundPlugin(),\n      sanityRuntimeRewritePlugin(),\n      sanityBuildEntries({basePath, cwd, monorepo}),\n    ],\n    envPrefix: 'SANITY_STUDIO_',\n    logLevel: mode === 'production' ? 'silent' : 'info',\n    resolve: {\n      alias: getAliases({monorepo}),\n    },\n    define: {\n      // eslint-disable-next-line no-process-env\n      __SANITY_STAGING__: process.env.SANITY_INTERNAL_ENV === 'staging',\n      'process.env.MODE': JSON.stringify(mode),\n      ...getStudioEnvironmentVariables({prefix: 'process.env.', jsonEncode: true}),\n    },\n  }\n\n  if (mode === 'production') {\n    viteConfig.build = {\n      ...viteConfig.build,\n\n      assetsDir: 'static',\n      minify: minify ? 'esbuild' : false,\n      emptyOutDir: false, // Rely on CLI to do this\n\n      rollupOptions: {\n        input: {\n          sanity: path.join(cwd, '.sanity', 'runtime', 'app.js'),\n        },\n      },\n    }\n  }\n\n  return viteConfig\n}\n\n/**\n * Ensure Sanity entry chunk is always loaded\n *\n * @param config - User-modified configuration\n * @returns Merged configuration\n * @internal\n */\nexport function finalizeViteConfig(config: InlineConfig): InlineConfig {\n  if (typeof config.build?.rollupOptions?.input !== 'object') {\n    throw new Error(\n      'Vite config must contain `build.rollupOptions.input`, and it must be an object',\n    )\n  }\n\n  if (!config.root) {\n    throw new Error(\n      'Vite config must contain `root` property, and must point to the Sanity root directory',\n    )\n  }\n\n  return mergeConfig(config, {\n    build: {\n      rollupOptions: {\n        input: {\n          sanity: path.join(config.root, '.sanity', 'runtime', 'app.js'),\n        },\n      },\n    },\n  })\n}\n\n/**\n * Merge user-provided Vite configuration object or function\n *\n * @param defaultConfig - Default configuration object\n * @param userConfig - User-provided configuration object or function\n * @returns Merged configuration\n * @internal\n */\nexport async function extendViteConfigWithUserConfig(\n  env: ConfigEnv,\n  defaultConfig: InlineConfig,\n  userConfig: UserViteConfig,\n): Promise<InlineConfig> {\n  let config = defaultConfig\n\n  if (typeof userConfig === 'function') {\n    debug('Extending vite config using user-specified function')\n    config = await userConfig(config, env)\n  } else if (typeof userConfig === 'object') {\n    debug('Merging vite config using user-specified object')\n    config = mergeConfig(config, userConfig)\n  }\n\n  return config\n}\n","const entryModule = `\n// This file is auto-generated on 'sanity dev'\n// Modifications to this file is automatically discarded\nimport {renderStudio} from \"sanity\"\nimport studioConfig from %STUDIO_CONFIG_LOCATION%\n\nrenderStudio(\n  document.getElementById(\"sanity\"),\n  studioConfig,\n  {reactStrictMode: %STUDIO_REACT_STRICT_MODE%, basePath: %STUDIO_BASE_PATH%}\n)\n`\n\nconst noConfigEntryModule = `\n// This file is auto-generated on 'sanity dev'\n// Modifications to this file is automatically discarded\nimport {renderStudio} from \"sanity\"\n\nconst studioConfig = {missingConfigFile: true}\n\nrenderStudio(\n  document.getElementById(\"sanity\"),\n  studioConfig,\n  {reactStrictMode: %STUDIO_REACT_STRICT_MODE%, basePath: %STUDIO_BASE_PATH%}\n)\n`\n\nexport function getEntryModule(options: {\n  reactStrictMode: boolean\n  relativeConfigLocation: string | null\n  basePath?: string\n}): string {\n  const {reactStrictMode, relativeConfigLocation, basePath} = options\n  const sourceModule = relativeConfigLocation ? entryModule : noConfigEntryModule\n\n  return sourceModule\n    .replace(/%STUDIO_REACT_STRICT_MODE%/, JSON.stringify(Boolean(reactStrictMode)))\n    .replace(/%STUDIO_CONFIG_LOCATION%/, JSON.stringify(relativeConfigLocation))\n    .replace(/%STUDIO_BASE_PATH%/, JSON.stringify(basePath || '/'))\n}\n","import fs from 'fs/promises'\nimport path from 'path'\n\nimport {debug as serverDebug} from './debug'\n\nconst debug = serverDebug.extend('config')\n\n/**\n * Resolves the path to the studio configuration file with the following extensions,\n * in preferred order: '.mjs', '.js', '.ts', '.jsx', '.tsx' (aligns with vite)\n *\n * Falls back to the default studio configuration exported by `sanity` if none is found\n *\n * @internal\n */\nexport async function getSanityStudioConfigPath(studioRootPath: string): Promise<string | null> {\n  const configPaths = [\n    path.join(studioRootPath, 'sanity.config.mjs'),\n    path.join(studioRootPath, 'sanity.config.js'),\n    path.join(studioRootPath, 'sanity.config.ts'),\n    path.join(studioRootPath, 'sanity.config.jsx'),\n    path.join(studioRootPath, 'sanity.config.tsx'),\n  ]\n\n  debug('Looking for configuration file in %d possible locations', configPaths.length)\n  const configs = await Promise.all(\n    configPaths.map(async (configPath) => ({\n      path: configPath,\n      exists: await fileExists(configPath),\n    })),\n  )\n\n  const availableConfigs = configs.filter((config) => config.exists)\n  debug('Found %d available configuration files', availableConfigs.length)\n\n  // No config file exists?\n  if (availableConfigs.length === 0) {\n    console.warn('No `sanity.config.js`/`sanity.config.ts` found - using default studio config')\n    return null\n  }\n\n  if (availableConfigs.length > 1) {\n    console.warn('Found multiple potential studio configs:')\n    availableConfigs.forEach((config) => console.warn(` - ${config.path}`))\n    console.warn(`Using ${availableConfigs[0].path}`)\n  }\n\n  return availableConfigs[0].path\n}\n\n/**\n * Asynchronously checks if a file exists. This is prone to race conditions,\n * as the file can exist/not exist by the time this resolves, but in this\n * case this is an acceptable trade-off. Best effort, and all that.\n */\nfunction fileExists(filePath: string): Promise<boolean> {\n  return fs.stat(filePath).then(\n    () => true,\n    () => false,\n  )\n}\n","import chokidar from 'chokidar'\nimport fs from 'fs/promises'\nimport path from 'path'\n\nimport {debug as serverDebug} from './debug'\nimport {getEntryModule} from './getEntryModule'\nimport {\n  decorateIndexWithAutoGeneratedWarning,\n  getPossibleDocumentComponentLocations,\n  renderDocument,\n} from './renderDocument'\nimport {getSanityStudioConfigPath} from './sanityConfig'\nimport {loadSanityMonorepo} from './sanityMonorepo'\n\nconst debug = serverDebug.extend('runtime')\n\nexport interface RuntimeOptions {\n  cwd: string\n  reactStrictMode: boolean\n  watch: boolean\n  basePath?: string\n}\n\n/**\n * Generates the `.sanity/runtime` directory, and optionally watches for custom\n * document files, rebuilding when they change\n *\n * @param options - Current working directory (Sanity root dir), and whether or not to watch\n * @internal\n */\nexport async function writeSanityRuntime({\n  cwd,\n  reactStrictMode,\n  watch,\n  basePath,\n}: RuntimeOptions): Promise<void> {\n  debug('Resolving Sanity monorepo information')\n  const monorepo = await loadSanityMonorepo(cwd)\n  const runtimeDir = path.join(cwd, '.sanity', 'runtime')\n\n  debug('Making runtime directory')\n  await fs.mkdir(runtimeDir, {recursive: true})\n\n  async function renderAndWriteDocument() {\n    debug('Rendering document template')\n    const indexHtml = decorateIndexWithAutoGeneratedWarning(\n      await renderDocument({\n        studioRootPath: cwd,\n        monorepo,\n        props: {\n          entryPath: `/${path.relative(cwd, path.join(runtimeDir, 'app.js'))}`,\n          basePath: basePath || '/',\n        },\n      }),\n    )\n\n    debug('Writing index.html to runtime directory')\n    await fs.writeFile(path.join(runtimeDir, 'index.html'), indexHtml)\n  }\n\n  if (watch) {\n    chokidar\n      .watch(getPossibleDocumentComponentLocations(cwd))\n      .on('all', () => renderAndWriteDocument())\n  }\n\n  await renderAndWriteDocument()\n\n  debug('Writing app.js to runtime directory')\n  const studioConfigPath = await getSanityStudioConfigPath(cwd)\n  const relativeConfigLocation = studioConfigPath\n    ? path.relative(runtimeDir, studioConfigPath)\n    : null\n\n  await fs.writeFile(\n    path.join(runtimeDir, 'app.js'),\n    getEntryModule({reactStrictMode, relativeConfigLocation, basePath}),\n  )\n}\n"],"names":["debug","debugIt","getAliases","opts","monorepo","path","aliasesPath","resolve","devAliases","require","monorepoAliases","Object","fromEntries","entries","map","_ref","key","modulePath","normalizeBasePath","pathName","concat","replace","loadSanityMonorepo","cwd","p","readResult","readPkgUp","packageJson","isSanityMonorepo","dirname","serverDebug","extend","useThreads","process","env","JEST_WORKER_ID","hasWarnedAbout","Set","defaultProps","entryPath","autoGeneratedWarning","trim","renderDocument","options","Promise","reject","getDocumentHtml","studioRootPath","props","__filename","worker","Worker","execArgv","workerData","dev","shouldWarn","on","msg","type","has","warnKey","Array","isArray","message","forEach","warning","console","warn","yellow","chalk","add","error","Error","html","length","err","code","decorateIndexWithAutoGeneratedWarning","template","getPossibleDocumentComponentLocations","join","_prefixUrlWithBasePath","url","basePath","normalizedBasePath","startsWith","endsWith","slice","isMainThread","parentPort","renderDocumentFromWorkerData","_a","global","__DEV__","postMessage","addAliases","version","unregister","register","target","jsx","extensions","unregisterJs","loader","Document","getDocumentComponent","css","URL","toString","result","renderToStaticMarkup","createElement","DefaultDocument","userDefined","tryLoadDocumentComponent","DocumentComp","component","default","userExports","keys","relativePath","relative","typeHint","modified","locations","componentPath","importFresh","Math","floor","fs","statSync","mtimeMs","entryChunkId","sanityBuildEntries","name","apply","buildStart","emitFile","id","generateBundle","_options","outputBundle","bundle","entryFile","values","find","file","facadeModuleId","entryFileName","fileName","viteMetadata","importedCss","imports","entry","push","source","sanityDotWorkaroundPlugin","configureServer","server","root","config","handler","history","disableDotRule","rewrites","from","to","_ref2","parsedUrl","pathname","existsSync","middlewares","use","req","res","next","generateWebManifest","icons","src","sizes","mimeTypes","sanityFaviconsPlugin","_ref3","defaultFaviconsPath","customFaviconsPath","staticUrlPath","cache","getFavicons","favicons","readdir","hasCustomFavicon","access","viteDevServer","webManifest","JSON","stringify","webManifestPath","writeHead","write","end","_parsedUrl","basename","isIconRequest","includes","faviconPath","mimeType","extname","readFile","sanityRuntimeRewritePlugin","getViteConfig","mode","outputDir","sourceMap","minify","rawBasePath","sanityPkgPath","__dirname","staticPath","viteConfig","cacheDir","base","build","outDir","sourcemap","host","port","strictPort","configFile","plugins","viteReact","envPrefix","logLevel","alias","define","__SANITY_STAGING__","SANITY_INTERNAL_ENV","getStudioEnvironmentVariables","prefix","jsonEncode","assetsDir","emptyOutDir","rollupOptions","input","sanity","finalizeViteConfig","_b","mergeConfig","extendViteConfigWithUserConfig","defaultConfig","userConfig","entryModule","noConfigEntryModule","getEntryModule","reactStrictMode","relativeConfigLocation","sourceModule","Boolean","getSanityStudioConfigPath","configPaths","configs","all","configPath","exists","fileExists","availableConfigs","filter","filePath","stat","then","writeSanityRuntime","_ref4","watch","runtimeDir","mkdir","recursive","renderAndWriteDocument","indexHtml","writeFile","chokidar","studioConfigPath"],"mappings":"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"}