'use strict';

var child_process = require('child_process');
var fs = require('fs/promises');
var path = require('path');
var readPkgUp = require('read-pkg-up');
var helpers = require('yargs/helpers');
var yargs = require('yargs/yargs');
function _interopDefaultCompat(e) {
  return e && typeof e === 'object' && 'default' in e ? e : {
    default: e
  };
}
var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
var path__default = /*#__PURE__*/_interopDefaultCompat(path);
var readPkgUp__default = /*#__PURE__*/_interopDefaultCompat(readPkgUp);
var yargs__default = /*#__PURE__*/_interopDefaultCompat(yargs);
async function parseCliFlags(args) {
  const flags = await yargs__default.default(helpers.hideBin(args.argv || process.argv).slice(2)).option("with-user-token", {
    type: "boolean",
    default: false
  }).option("mock-browser-env", {
    type: "boolean",
    default: false
  }).argv;
  return {
    ...flags,
    script: args.argsWithoutOptions[0]
  };
}
const execScript = async function execScript2(args, context) {
  var _a;
  const {
    withUserToken,
    mockBrowserEnv,
    script
  } = await parseCliFlags(args);
  const {
    workDir
  } = context;
  const scriptPath = path__default.default.resolve(script || "");
  if (!script) {
    throw new Error("SCRIPT must be provided. `sanity exec <script>`");
  }
  if (!(await fs__default.default.stat(scriptPath).catch(() => false))) {
    throw new Error("".concat(scriptPath, " does not exist"));
  }
  const sanityPkgPath = (_a = await readPkgUp__default.default({
    cwd: __dirname
  })) == null ? void 0 : _a.path;
  if (!sanityPkgPath) {
    throw new Error("Unable to resolve `sanity` module root");
  }
  const sanityDir = path__default.default.dirname(sanityPkgPath);
  const threadsDir = path__default.default.join(sanityDir, "lib", "_internal", "cli", "threads");
  const esbuildPath = path__default.default.join(threadsDir, "esbuild.js");
  const browserEnvPath = path__default.default.join(threadsDir, "registerBrowserEnv.js");
  const configClientPath = path__default.default.join(threadsDir, "configClient.js");
  if (!(await fs__default.default.stat(esbuildPath).catch(() => false))) {
    throw new Error("`sanity` module build error: missing threads");
  }
  const baseArgs = mockBrowserEnv ? ["-r", browserEnvPath] : ["-r", esbuildPath];
  const tokenArgs = withUserToken ? ["-r", configClientPath] : [];
  const nodeArgs = [...baseArgs, ...tokenArgs, scriptPath, ...args.extraArguments];
  const proc = child_process.spawn(process.argv[0], nodeArgs, {
    stdio: "inherit",
    env: {
      // eslint-disable-next-line no-process-env
      ...process.env,
      SANITY_BASE_PATH: workDir
    }
  });
  proc.on("close", process.exit);
};
exports.default = execScript;
//# sourceMappingURL=execScript-B-FaGea5.js.map
