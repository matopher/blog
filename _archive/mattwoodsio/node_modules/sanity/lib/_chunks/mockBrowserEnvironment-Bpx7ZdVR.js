'use strict';

var resizeObserver = require('@juggle/resize-observer');
var node = require('esbuild-register/dist/node');
var jsdomGlobal = require('jsdom-global');
var pirates = require('pirates');
var resolveFrom = require('resolve-from');
var cli = require('../cli.js');
function _interopDefaultCompat(e) {
  return e && typeof e === 'object' && 'default' in e ? e : {
    default: e
  };
}
var jsdomGlobal__default = /*#__PURE__*/_interopDefaultCompat(jsdomGlobal);
var resolveFrom__default = /*#__PURE__*/_interopDefaultCompat(resolveFrom);
const jsdomDefaultHtml = '<!doctype html>\n<html>\n  <head><meta charset="utf-8"></head>\n  <body></body>\n</html>';
function mockBrowserEnvironment(basePath) {
  if (global && global.window && "__mockedBySanity" in global.window) {
    return () => {};
  }
  const domCleanup = jsdomGlobal__default.default(jsdomDefaultHtml, {
    url: "http://localhost:3333/"
  });
  const windowCleanup = () => global.window.close();
  const globalCleanup = provideFakeGlobals(basePath);
  const cleanupFileLoader = pirates.addHook((code, filename) => "module.exports = ".concat(JSON.stringify(filename)), {
    ignoreNodeModules: false,
    exts: getFileExtensions()
  });
  const {
    unregister: unregisterESBuild
  } = node.register({
    target: "node18",
    format: "cjs",
    extensions: [".js", ".jsx", ".ts", ".tsx", ".mjs"],
    jsx: "automatic",
    define: {
      // define the `process.env` global
      ...cli.getStudioEnvironmentVariables({
        prefix: "process.env.",
        jsonEncode: true
      }),
      // define the `import.meta.env` global
      ...cli.getStudioEnvironmentVariables({
        prefix: "import.meta.env.",
        jsonEncode: true
      })
    }
  });
  return function cleanupBrowserEnvironment() {
    unregisterESBuild();
    cleanupFileLoader();
    globalCleanup();
    windowCleanup();
    domCleanup();
  };
}
const getFakeGlobals = basePath => {
  var _a, _b, _c;
  return {
    __mockedBySanity: true,
    requestAnimationFrame: setImmediate,
    cancelAnimationFrame: clearImmediate,
    requestIdleCallback: setImmediate,
    cancelIdleCallback: clearImmediate,
    ace: tryGetAceGlobal(basePath),
    InputEvent: (_a = global.window) == null ? void 0 : _a.InputEvent,
    customElements: (_b = global.window) == null ? void 0 : _b.customElements,
    ResizeObserver: ((_c = global.window) == null ? void 0 : _c.ResizeObserver) || resizeObserver.ResizeObserver
  };
};
function provideFakeGlobals(basePath) {
  const globalEnv = global;
  const globalWindow = global.window;
  const fakeGlobals = getFakeGlobals(basePath);
  const stubbedGlobalKeys = [];
  const stubbedWindowKeys = [];
  for (const [rawKey, value] of Object.entries(fakeGlobals)) {
    if (typeof value === "undefined") {
      continue;
    }
    const key = rawKey;
    if (!(key in globalEnv)) {
      globalEnv[key] = fakeGlobals[key];
      stubbedGlobalKeys.push(key);
    }
    if (!(key in global.window)) {
      globalWindow[key] = fakeGlobals[key];
      stubbedWindowKeys.push(key);
    }
  }
  return () => {
    stubbedGlobalKeys.forEach(key => {
      delete globalEnv[key];
    });
    stubbedWindowKeys.forEach(key => {
      delete globalWindow[key];
    });
  };
}
function tryGetAceGlobal(basePath) {
  const acePath = resolveFrom__default.default.silent(basePath, "ace-builds");
  if (!acePath) {
    return void 0;
  }
  try {
    return require(acePath);
  } catch (err) {
    return void 0;
  }
}
function getFileExtensions() {
  return [".jpeg", ".jpg", ".png", ".gif", ".svg", ".webp", ".woff", ".woff2", ".ttf", ".eot", ".otf", ".css"];
}
exports.mockBrowserEnvironment = mockBrowserEnvironment;
//# sourceMappingURL=mockBrowserEnvironment-Bpx7ZdVR.js.map
