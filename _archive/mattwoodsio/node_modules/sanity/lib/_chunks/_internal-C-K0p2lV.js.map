{"version":3,"file":"_internal-C-K0p2lV.js","sources":["../../src/_internal/cli/commands/backup/backupGroup.ts","../../src/_internal/cli/actions/backup/parseApiErr.ts","../../src/_internal/cli/debug.ts","../../src/_internal/cli/actions/dataset/validateDatasetName.ts","../../src/_internal/cli/actions/dataset/datasetNamePrompt.ts","../../src/_internal/cli/actions/dataset/chooseDatasetPrompt.ts","../../src/_internal/cli/actions/backup/resolveApiClient.ts","../../src/_internal/cli/commands/backup/disableBackupCommand.ts","../../src/_internal/cli/actions/backup/debug.ts","../../src/_internal/cli/actions/backup/archiveDir.ts","../../src/_internal/cli/actions/backup/chooseBackupIdPrompt.ts","../../src/_internal/cli/actions/backup/cleanupTmpDir.ts","../../src/_internal/cli/actions/backup/withRetry.ts","../../src/_internal/cli/actions/backup/downloadAsset.ts","../../src/_internal/cli/actions/backup/downloadDocument.ts","../../src/_internal/cli/actions/backup/fetchNextBackupPage.ts","../../src/_internal/cli/actions/backup/progressSpinner.ts","../../src/_internal/cli/util/humanFileSize.ts","../../src/_internal/cli/util/isPathDirName.ts","../../src/_internal/cli/commands/backup/downloadBackupCommand.ts","../../src/_internal/cli/commands/backup/enableBackupCommand.ts","../../src/_internal/cli/commands/backup/listBackupCommand.ts","../../src/_internal/cli/commands/build/buildCommand.ts","../../src/_internal/cli/commands/check/checkCommand.ts","../../src/_internal/cli/commands/config/configCheckCommand.ts","../../src/_internal/cli/actions/cors/addCorsOrigin.ts","../../src/_internal/cli/commands/cors/addCorsOriginCommand.ts","../../src/_internal/cli/commands/cors/corsGroup.ts","../../src/_internal/cli/commands/cors/deleteCorsOriginCommand.ts","../../src/_internal/cli/commands/cors/listCorsOriginsCommand.ts","../../src/_internal/cli/actions/dataset/alias/validateDatasetAliasName.ts","../../src/_internal/cli/actions/dataset/alias/promptForDatasetAliasName.ts","../../src/_internal/cli/commands/dataset/alias/datasetAliasesClient.ts","../../src/_internal/cli/commands/dataset/alias/createAliasHandler.ts","../../src/_internal/cli/commands/dataset/alias/deleteAliasHandler.ts","../../src/_internal/cli/commands/dataset/alias/linkAliasHandler.ts","../../src/_internal/cli/commands/dataset/alias/unlinkAliasHandler.ts","../../src/_internal/cli/commands/dataset/alias/aliasCommands.ts","../../src/_internal/cli/actions/dataset/listDatasetCopyJobs.ts","../../src/_internal/cli/util/getClientUrl.ts","../../src/_internal/cli/commands/dataset/copyDatasetCommand.ts","../../src/_internal/cli/commands/dataset/createDatasetCommand.ts","../../src/_internal/cli/commands/dataset/datasetGroup.ts","../../src/_internal/cli/commands/dataset/datasetVisibilityCommand.ts","../../src/_internal/cli/commands/dataset/deleteDatasetCommand.ts","../../src/_internal/cli/commands/dataset/exportDatasetCommand.ts","../../src/_internal/cli/commands/dataset/importDatasetCommand.ts","../../src/_internal/cli/commands/dataset/alias/listAliasesHandler.ts","../../src/_internal/cli/commands/dataset/listDatasetsCommand.ts","../../src/_internal/cli/commands/deploy/deployCommand.ts","../../src/_internal/cli/commands/deploy/undeployCommand.ts","../../src/_internal/cli/commands/dev/devCommand.ts","../../src/_internal/cli/commands/documents/createDocumentsCommand.ts","../../src/_internal/cli/commands/documents/deleteDocumentsCommand.ts","../../src/_internal/cli/commands/documents/documentsGroup.ts","../../src/_internal/cli/util/colorizeJson.ts","../../src/_internal/cli/commands/documents/getDocumentsCommand.ts","../../src/_internal/cli/commands/documents/queryDocumentsCommand.ts","../../src/_internal/cli/commands/documents/validateDocumentsCommand.ts","../../src/_internal/cli/commands/exec/execCommand.ts","../../src/_internal/cli/commands/graphql/deleteGraphQLAPICommand.ts","../../src/_internal/cli/commands/graphql/deployGraphQLAPICommand.ts","../../src/_internal/cli/commands/graphql/graphqlGroup.ts","../../src/_internal/cli/commands/graphql/listGraphQLAPIsCommand.ts","../../src/_internal/cli/commands/hook/createHookCommand.ts","../../src/_internal/cli/commands/hook/deleteHookCommand.ts","../../src/_internal/cli/commands/hook/hookGroup.ts","../../src/_internal/cli/commands/hook/printHookAttemptCommand.ts","../../src/_internal/cli/commands/hook/listHookLogsCommand.ts","../../src/_internal/cli/commands/hook/listHooksCommand.ts","../../src/_internal/cli/commands/migration/constants.ts","../../src/_internal/cli/commands/migration/templates/minimalAdvanced.ts","../../src/_internal/cli/commands/migration/templates/minimalSimple.ts","../../src/_internal/cli/commands/migration/templates/renameField.ts","../../src/_internal/cli/commands/migration/templates/renameType.ts","../../src/_internal/cli/commands/migration/templates/stringToPTE.ts","../../src/_internal/cli/commands/migration/createMigrationCommand.ts","../../src/_internal/cli/commands/migration/utils/resolveMigrationScript.ts","../../src/_internal/cli/commands/migration/listMigrationsCommand.ts","../../src/_internal/cli/commands/migration/migrationGroup.ts","../../src/_internal/cli/util/tree.ts","../../src/_internal/cli/commands/migration/prettyMutationFormatter.ts","../../src/_internal/cli/commands/migration/runMigrationCommand.ts","../../src/_internal/cli/commands/preview/previewCommand.ts","../../src/_internal/cli/commands/schema/schemaGroup.ts","../../src/_internal/cli/commands/schema/validateSchemaCommand.ts","../../src/_internal/cli/util/isInteractive.ts","../../src/_internal/cli/commands/start/startCommand.ts","../../src/_internal/cli/commands/uninstall/uninstallCommand.ts","../../src/_internal/cli/util/prettifyQuotaError.ts","../../src/_internal/cli/commands/users/inviteUserCommand.ts","../../src/_internal/cli/commands/users/listUsersCommand.ts","../../src/_internal/cli/commands/users/usersGroup.ts","../../src/_internal/cli/commands/index.ts"],"sourcesContent":["import {type CliCommandGroupDefinition} from '@sanity/cli'\n\n// defaultApiVersion is the backend API version used for dataset backup.\nexport const defaultApiVersion = 'v2024-02-21'\n\nconst datasetBackupGroup: CliCommandGroupDefinition = {\n  name: 'backup',\n  signature: '[COMMAND]',\n  description: 'Manage dataset backups.',\n  isGroupRoot: true,\n  hideFromHelp: true,\n}\n\nexport default datasetBackupGroup\n","// apiErr is a type that represents an error returned by the API\ninterface ApiErr {\n  statusCode: number\n  message: string\n}\n\n// parseApiErr is a function that attempts with the best effort to parse\n// an error returned by the API since different API endpoint may end up\n// returning different error structures.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/explicit-module-boundary-types\nfunction parseApiErr(err: any): ApiErr {\n  const apiErr = {} as ApiErr\n  if (err.code) {\n    apiErr.statusCode = err.code\n  } else if (err.statusCode) {\n    apiErr.statusCode = err.statusCode\n  }\n\n  if (err.message) {\n    apiErr.message = err.message\n  } else if (err.statusMessage) {\n    apiErr.message = err.statusMessage\n  } else if (err?.response?.body?.message) {\n    apiErr.message = err.response.body.message\n  } else if (err?.response?.data?.message) {\n    apiErr.message = err.response.data.message\n  } else {\n    // If no message can be extracted, print the whole error.\n    apiErr.message = JSON.stringify(err)\n  }\n\n  return apiErr\n}\n\nexport default parseApiErr\n","import debugIt from 'debug'\n\nexport const debug = debugIt('sanity:core')\n","const MAX_DATASET_NAME_LENGTH = 64\n\nexport function validateDatasetName(datasetName: string): false | string {\n  if (!datasetName) {\n    return 'Dataset name is missing'\n  }\n\n  const name = `${datasetName}`\n\n  if (name.toLowerCase() !== name) {\n    return 'Dataset name must be all lowercase characters'\n  }\n\n  if (name.length < 2) {\n    return 'Dataset name must be at least two characters long'\n  }\n\n  if (name.length > MAX_DATASET_NAME_LENGTH) {\n    return `Dataset name must be at most ${MAX_DATASET_NAME_LENGTH} characters`\n  }\n\n  if (!/^[a-z0-9]/.test(name)) {\n    return 'Dataset name must start with a letter or a number'\n  }\n\n  if (!/^[a-z0-9][-_a-z0-9]+$/.test(name)) {\n    return 'Dataset name must only contain letters, numbers, dashes and underscores'\n  }\n\n  if (/[-_]$/.test(name)) {\n    return 'Dataset name must not end with a dash or an underscore'\n  }\n\n  return false\n}\n","import {type CliPrompter} from '@sanity/cli'\n\nimport {validateDatasetName} from './validateDatasetName'\n\nexport function promptForDatasetName(\n  prompt: CliPrompter,\n  options: {message?: string; default?: string} = {},\n): Promise<string> {\n  return prompt.single({\n    type: 'input',\n    message: 'Dataset name:',\n    validate: (name) => {\n      const err = validateDatasetName(name)\n      if (err) {\n        return err\n      }\n\n      return true\n    },\n    ...options,\n  })\n}\n","import {type CliCommandContext} from '@sanity/cli'\n\nimport {debug} from '../../debug'\nimport {promptForDatasetName} from './datasetNamePrompt'\n\nexport async function chooseDatasetPrompt(\n  context: CliCommandContext,\n  options: {message?: string; allowCreation?: boolean} = {},\n): Promise<string> {\n  const {apiClient, prompt} = context\n  const {message, allowCreation} = options\n  const client = apiClient()\n\n  const datasets = await client.datasets.list()\n  const hasProduction = datasets.find((dataset) => dataset.name === 'production')\n  const datasetChoices = datasets.map((dataset) => ({value: dataset.name}))\n  const selected = await prompt.single({\n    message: message || 'Select dataset to use',\n    type: 'list',\n    choices: allowCreation\n      ? [{value: 'new', name: 'Create new dataset'}, new prompt.Separator(), ...datasetChoices]\n      : datasetChoices,\n  })\n\n  if (selected === 'new') {\n    debug('User wants to create a new dataset, prompting for name')\n    const newDatasetName = await promptForDatasetName(prompt, {\n      message: 'Name your dataset:',\n      default: hasProduction ? undefined : 'production',\n    })\n    await client.datasets.create(newDatasetName)\n    return newDatasetName\n  }\n\n  return selected\n}\n","import {type CliCommandContext} from '@sanity/cli'\nimport {type SanityClient} from '@sanity/client'\n\nimport {chooseDatasetPrompt} from '../dataset/chooseDatasetPrompt'\n\ntype ResolvedApiClient = {\n  projectId: string\n  datasetName: string\n  token?: string\n  client: SanityClient\n}\n\nasync function resolveApiClient(\n  context: CliCommandContext,\n  datasetName: string,\n  apiVersion: string,\n): Promise<ResolvedApiClient> {\n  const {apiClient} = context\n\n  let client = apiClient()\n  const {projectId, token} = client.config()\n\n  if (!projectId) {\n    throw new Error('Project ID not defined')\n  }\n\n  // If no dataset provided, explicitly ask for dataset instead of using dataset\n  // configured in Sanity config. Aligns with `sanity dataset export` behavior.\n  let selectedDataset: string = datasetName\n  if (!selectedDataset) {\n    selectedDataset = await chooseDatasetPrompt(context, {\n      message: 'Select the dataset name:',\n    })\n  }\n\n  client = client.withConfig({dataset: datasetName, apiVersion})\n\n  return {\n    projectId,\n    datasetName: selectedDataset,\n    token,\n    client,\n  }\n}\n\nexport default resolveApiClient\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nimport parseApiErr from '../../actions/backup/parseApiErr'\nimport resolveApiClient from '../../actions/backup/resolveApiClient'\nimport {defaultApiVersion} from './backupGroup'\n\nconst helpText = `\nExamples\n  sanity backup disable DATASET_NAME\n`\n\nconst disableDatasetBackupCommand: CliCommandDefinition = {\n  name: 'disable',\n  group: 'backup',\n  signature: '[DATASET_NAME]',\n  description: 'Disable backup for a dataset.',\n  helpText,\n  action: async (args, context) => {\n    const {output, chalk} = context\n    const [dataset] = args.argsWithoutOptions\n    const {projectId, datasetName, token, client} = await resolveApiClient(\n      context,\n      dataset,\n      defaultApiVersion,\n    )\n\n    try {\n      await client.request({\n        method: 'PUT',\n        headers: {Authorization: `Bearer ${token}`},\n        uri: `/projects/${projectId}/datasets/${datasetName}/settings/backups`,\n        body: {\n          enabled: false,\n        },\n      })\n      output.print(`${chalk.green(`Disabled daily backups for dataset ${datasetName}\\n`)}`)\n    } catch (error) {\n      const {message} = parseApiErr(error)\n      output.print(`${chalk.red(`Disabling dataset backup failed: ${message}`)}\\n`)\n    }\n  },\n}\n\nexport default disableDatasetBackupCommand\n","export default require('debug')('sanity:backup')\n","import {createWriteStream} from 'node:fs'\nimport zlib from 'node:zlib'\n\nimport {type ProgressData} from 'archiver'\n\nimport debug from './debug'\n\nconst archiver = require('archiver')\n\n// ProgressCb is a callback that is called with the number of bytes processed so far.\ntype ProgressCb = (processedBytes: number) => void\n\n// archiveDir creates a tarball of the given directory and writes it to the given file path.\nfunction archiveDir(tmpOutDir: string, outFilePath: string, progressCb: ProgressCb): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const archiveDestination = createWriteStream(outFilePath)\n    archiveDestination.on('error', (err: Error) => {\n      reject(err)\n    })\n\n    archiveDestination.on('close', () => {\n      resolve()\n    })\n\n    const archive = archiver('tar', {\n      gzip: true,\n      gzipOptions: {level: zlib.constants.Z_DEFAULT_COMPRESSION},\n    })\n\n    archive.on('error', (err: Error) => {\n      debug('Archiving errored!\\n%s', err.stack)\n      reject(err)\n    })\n\n    // Catch warnings for non-blocking errors (stat failures and others)\n    archive.on('warning', (err: Error) => {\n      debug('Archive warning: %s', err.message)\n    })\n\n    archive.on('progress', (progress: ProgressData) => {\n      progressCb(progress.fs.processedBytes)\n    })\n\n    // Pipe archive data to the file\n    archive.pipe(archiveDestination)\n    archive.directory(tmpOutDir, false)\n    archive.finalize()\n  })\n}\n\nexport default archiveDir\n","import {type CliCommandContext} from '@sanity/cli'\n\nimport {defaultApiVersion} from '../../commands/backup/backupGroup'\nimport resolveApiClient from './resolveApiClient'\n\n// maxBackupIdsShown is the maximum number of backup IDs to show in the prompt.\n// Higher numbers will cause the prompt to be slow.\nconst maxBackupIdsShown = 100\n\nasync function chooseBackupIdPrompt(\n  context: CliCommandContext,\n  datasetName: string,\n): Promise<string> {\n  const {prompt} = context\n\n  const {projectId, token, client} = await resolveApiClient(context, datasetName, defaultApiVersion)\n\n  try {\n    // Fetch last $maxBackupIdsShown backups for this dataset.\n    // We expect here that API returns backups sorted by creation date in descending order.\n    const response = await client.request({\n      headers: {Authorization: `Bearer ${token}`},\n      uri: `/projects/${projectId}/datasets/${datasetName}/backups`,\n      query: {limit: maxBackupIdsShown.toString()},\n    })\n\n    if (response?.backups?.length > 0) {\n      const backupIdChoices = response.backups.map((backup: {id: string}) => ({\n        value: backup.id,\n      }))\n      const selected = await prompt.single({\n        message: `Select backup ID to use (only last ${maxBackupIdsShown} shown)`,\n        type: 'list',\n        choices: backupIdChoices,\n      })\n\n      return selected\n    }\n  } catch (err) {\n    throw new Error(`Failed to fetch backups for dataset ${datasetName}: ${err.message}`)\n  }\n\n  throw new Error('No backups found')\n}\n\nexport default chooseBackupIdPrompt\n","import rimraf from 'rimraf'\n\nimport debug from './debug'\n\nfunction cleanupTmpDir(tmpDir: string): void {\n  rimraf(tmpDir, (err) => {\n    if (err) {\n      debug(`Error cleaning up temporary files: ${err.message}`)\n    }\n  })\n}\n\nexport default cleanupTmpDir\n","import debug from './debug'\n\nconst MAX_RETRIES = 5\nconst BACKOFF_DELAY_BASE = 200\n\nconst exponentialBackoff = (retryCount: number) => Math.pow(2, retryCount) * BACKOFF_DELAY_BASE\n\nasync function withRetry<T>(\n  operation: () => Promise<T>,\n  maxRetries: number = MAX_RETRIES,\n): Promise<T> {\n  for (let retryCount = 0; retryCount < maxRetries; retryCount++) {\n    try {\n      return await operation()\n    } catch (err) {\n      // Immediately rethrow if the error is not server-related.\n      if (err.response && err.response.statusCode && err.response.statusCode < 500) {\n        throw err\n      }\n\n      const retryDelay = exponentialBackoff(retryCount)\n      debug(`Error encountered, retrying after ${retryDelay}ms: %s`, err.message)\n      await new Promise((resolve) => setTimeout(resolve, retryDelay))\n    }\n  }\n\n  throw new Error('Operation failed after all retries')\n}\n\nexport default withRetry\n","import {createWriteStream} from 'node:fs'\nimport path from 'node:path'\nimport {pipeline} from 'node:stream/promises'\n\nimport {getIt} from 'get-it'\nimport {keepAlive, promise} from 'get-it/middleware'\n\nimport debug from './debug'\nimport withRetry from './withRetry'\n\nconst CONNECTION_TIMEOUT = 15 * 1000 // 15 seconds\nconst READ_TIMEOUT = 3 * 60 * 1000 // 3 minutes\n\nconst request = getIt([keepAlive(), promise()])\n\nasync function downloadAsset(\n  url: string,\n  fileName: string,\n  fileType: string,\n  outDir: string,\n): Promise<void> {\n  // File names that contain a path to file (e.g. sanity-storage/assets/file-name.tar.gz) fail when archive is\n  // created due to missing parent dir (e.g. sanity-storage/assets), so we want to handle them by taking\n  // the base name as file name.\n  const normalizedFileName = path.basename(fileName)\n\n  const assetFilePath = getAssetFilePath(normalizedFileName, fileType, outDir)\n  await withRetry(async () => {\n    const response = await request({\n      url: url,\n      maxRedirects: 5,\n      timeout: {connect: CONNECTION_TIMEOUT, socket: READ_TIMEOUT},\n      stream: true,\n    })\n\n    debug('Received asset %s with status code %d', normalizedFileName, response?.statusCode)\n\n    await pipeline(response.body, createWriteStream(assetFilePath))\n  })\n}\n\nfunction getAssetFilePath(fileName: string, fileType: string, outDir: string): string {\n  // Set assetFilePath if we are downloading an asset file.\n  // If it's a JSON document, assetFilePath will be an empty string.\n  let assetFilePath = ''\n  if (fileType === 'image') {\n    assetFilePath = path.join(outDir, 'images', fileName)\n  } else if (fileType === 'file') {\n    assetFilePath = path.join(outDir, 'files', fileName)\n  }\n\n  return assetFilePath\n}\n\nexport default downloadAsset\n","import {getIt, type MiddlewareResponse} from 'get-it'\nimport {keepAlive, promise} from 'get-it/middleware'\n\nimport debug from './debug'\nimport withRetry from './withRetry'\n\nconst CONNECTION_TIMEOUT = 15 * 1000 // 15 seconds\nconst READ_TIMEOUT = 3 * 60 * 1000 // 3 minutes\n\nconst request = getIt([keepAlive(), promise()])\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function downloadDocument(url: string): Promise<any> {\n  const response = await withRetry<MiddlewareResponse>(() =>\n    request({\n      url,\n      maxRedirects: 5,\n      timeout: {connect: CONNECTION_TIMEOUT, socket: READ_TIMEOUT},\n    }),\n  )\n\n  debug('Received document from %s with status code %d', url, response?.statusCode)\n\n  return response.body\n}\n\nexport default downloadDocument\n","import {Readable} from 'node:stream'\n\nimport {type QueryParams, type SanityClient} from '@sanity/client'\n\ntype File = {\n  name: string\n  url: string\n  type: string\n}\n\ntype GetBackupResponse = {\n  createdAt: string\n  totalFiles: number\n  files: File[]\n  nextCursor?: string\n}\n\nclass PaginatedGetBackupStream extends Readable {\n  private cursor = ''\n  private readonly client: SanityClient\n  private readonly projectId: string\n  private readonly datasetName: string\n  private readonly backupId: string\n  private readonly token: string\n  public totalFiles = 0\n\n  constructor(\n    client: SanityClient,\n    projectId: string,\n    datasetName: string,\n    backupId: string,\n    token: string,\n  ) {\n    super({objectMode: true})\n    this.client = client\n    this.projectId = projectId\n    this.datasetName = datasetName\n    this.backupId = backupId\n    this.token = token\n  }\n\n  async _read(): Promise<void> {\n    try {\n      const data = await this.fetchNextBackupPage()\n\n      // Set totalFiles when it's fetched for the first time\n      if (this.totalFiles === 0) {\n        this.totalFiles = data.totalFiles\n      }\n\n      data.files.forEach((file: File) => this.push(file))\n\n      if (typeof data.nextCursor === 'string' && data.nextCursor !== '') {\n        this.cursor = data.nextCursor\n      } else {\n        // No more pages left to fetch.\n        this.push(null)\n      }\n    } catch (err) {\n      this.destroy(err as Error)\n    }\n  }\n\n  // fetchNextBackupPage fetches the next page of backed up files from the backup API.\n  async fetchNextBackupPage(): Promise<GetBackupResponse> {\n    const query: QueryParams = this.cursor === '' ? {} : {nextCursor: this.cursor}\n\n    try {\n      return await this.client.request({\n        headers: {Authorization: `Bearer ${this.token}`},\n        uri: `/projects/${this.projectId}/datasets/${this.datasetName}/backups/${this.backupId}`,\n        query,\n      })\n    } catch (error) {\n      // It can be clearer to pull this logic out in a  common error handling function for re-usability.\n      let msg = error.statusCode ? error.response.body.message : error.message\n\n      // If no message can be extracted, print the whole error.\n      if (msg === undefined) {\n        msg = String(error)\n      }\n      throw new Error(`Downloading dataset backup failed: ${msg}`)\n    }\n  }\n}\n\nexport {PaginatedGetBackupStream}\nexport type {File, GetBackupResponse}\n","import {type CliOutputter} from '@sanity/cli'\nimport prettyMs from 'pretty-ms'\n\ntype ProgressEvent = {\n  step: string\n  update?: boolean\n  current?: number\n  total?: number\n}\n\ninterface ProgressSpinner {\n  set: (progress: ProgressEvent) => void\n  update: (progress: ProgressEvent) => void\n  succeed: () => void\n  fail: () => void\n}\n\nconst newProgress = (output: CliOutputter, startStep: string): ProgressSpinner => {\n  let spinner = output.spinner(startStep).start()\n  let lastProgress: ProgressEvent = {step: startStep}\n  let start = Date.now()\n\n  const print = (progress: ProgressEvent) => {\n    const elapsed = prettyMs(Date.now() - start)\n    if (progress.current && progress.current > 0 && progress.total && progress.total > 0) {\n      spinner.text = `${progress.step} (${progress.current}/${progress.total}) [${elapsed}]`\n    } else {\n      spinner.text = `${progress.step} [${elapsed}]`\n    }\n  }\n\n  return {\n    set: (progress: ProgressEvent) => {\n      if (progress.step !== lastProgress.step) {\n        print(lastProgress) // Print the last progress before moving on\n        spinner.succeed()\n        spinner = output.spinner(progress.step).start()\n        start = Date.now()\n      } else if (progress.step === lastProgress.step && progress.update) {\n        print(progress)\n      }\n      lastProgress = progress\n    },\n    update: (progress: ProgressEvent) => {\n      print(progress)\n      lastProgress = progress\n    },\n    succeed: () => {\n      spinner.succeed()\n      start = Date.now()\n    },\n    fail: () => {\n      spinner.fail()\n      start = Date.now()\n    },\n  }\n}\n\nexport default newProgress\n","function humanFileSize(size: number): string {\n  const i = size == 0 ? 0 : Math.floor(Math.log(size) / Math.log(1024))\n  return `${(size / Math.pow(1024, i)).toFixed(2)} ${['B', 'kB', 'MB', 'GB', 'TB'][i]}`\n}\n\nexport default humanFileSize\n","function isPathDirName(filepath: string): boolean {\n  // Check if the path has an extension, commonly indicating a file\n  return !/\\.\\w+$/.test(filepath)\n}\n\nexport default isPathDirName\n","import {createWriteStream, existsSync, mkdirSync} from 'node:fs'\nimport {mkdtemp} from 'node:fs/promises'\nimport {tmpdir} from 'node:os'\nimport path from 'node:path'\nimport {finished} from 'node:stream/promises'\n\nimport {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliCommandDefinition,\n  type SanityClient,\n} from '@sanity/cli'\nimport {absolutify} from '@sanity/util/fs'\nimport {Mutex} from 'async-mutex'\nimport createDebug from 'debug'\nimport {isString} from 'lodash'\nimport prettyMs from 'pretty-ms'\nimport {hideBin} from 'yargs/helpers'\nimport yargs from 'yargs/yargs'\n\nimport archiveDir from '../../actions/backup/archiveDir'\nimport chooseBackupIdPrompt from '../../actions/backup/chooseBackupIdPrompt'\nimport cleanupTmpDir from '../../actions/backup/cleanupTmpDir'\nimport downloadAsset from '../../actions/backup/downloadAsset'\nimport downloadDocument from '../../actions/backup/downloadDocument'\nimport {type File, PaginatedGetBackupStream} from '../../actions/backup/fetchNextBackupPage'\nimport parseApiErr from '../../actions/backup/parseApiErr'\nimport newProgress from '../../actions/backup/progressSpinner'\nimport resolveApiClient from '../../actions/backup/resolveApiClient'\nimport humanFileSize from '../../util/humanFileSize'\nimport isPathDirName from '../../util/isPathDirName'\nimport {defaultApiVersion} from './backupGroup'\n\nconst debug = createDebug('sanity:backup')\n\nconst DEFAULT_DOWNLOAD_CONCURRENCY = 10\nconst MAX_DOWNLOAD_CONCURRENCY = 24\n\ninterface DownloadBackupOptions {\n  projectId: string\n  datasetName: string\n  token: string\n  backupId: string\n  outDir: string\n  outFileName: string\n  overwrite: boolean\n  concurrency: number\n}\n\nconst helpText = `\nOptions\n  --backup-id <string> The backup ID to download. (required)\n  --out <string>       The file or directory path the backup should download to.\n  --overwrite          Allows overwriting of existing backup file.\n  --concurrency <num>  Concurrent number of backup item downloads. (max: 24)\n\nExamples\n  sanity backup download DATASET_NAME --backup-id 2024-01-01-backup-1\n  sanity backup download DATASET_NAME --backup-id 2024-01-01-backup-2 --out /path/to/file\n  sanity backup download DATASET_NAME --backup-id 2024-01-01-backup-3 --out /path/to/file --overwrite\n`\n\nfunction parseCliFlags(args: {argv?: string[]}) {\n  return yargs(hideBin(args.argv || process.argv).slice(2))\n    .options('backup-id', {type: 'string'})\n    .options('out', {type: 'string'})\n    .options('concurrency', {type: 'number', default: DEFAULT_DOWNLOAD_CONCURRENCY})\n    .options('overwrite', {type: 'boolean', default: false}).argv\n}\n\nconst downloadBackupCommand: CliCommandDefinition = {\n  name: 'download',\n  group: 'backup',\n  signature: '[DATASET_NAME]',\n  description: 'Download a dataset backup to a local file.',\n  helpText,\n  // eslint-disable-next-line max-statements\n  action: async (args, context) => {\n    const {output, chalk} = context\n    const [client, opts] = await prepareBackupOptions(context, args)\n    const {projectId, datasetName, backupId, outDir, outFileName} = opts\n\n    // If any of the output path or file name is empty, cancel the operation.\n    if (outDir === '' || outFileName === '') {\n      output.print('Operation cancelled.')\n      return\n    }\n    const outFilePath = path.join(outDir, outFileName)\n\n    output.print('╭───────────────────────────────────────────────────────────╮')\n    output.print('│                                                           │')\n    output.print('│ Downloading backup for:                                   │')\n    output.print(`│ ${chalk.bold('projectId')}: ${chalk.cyan(projectId).padEnd(56)} │`)\n    output.print(`│ ${chalk.bold('dataset')}: ${chalk.cyan(datasetName).padEnd(58)} │`)\n    output.print(`│ ${chalk.bold('backupId')}: ${chalk.cyan(backupId).padEnd(56)} │`)\n    output.print('│                                                           │')\n    output.print('╰───────────────────────────────────────────────────────────╯')\n    output.print('')\n    output.print(`Downloading backup to \"${chalk.cyan(outFilePath)}\"`)\n\n    const start = Date.now()\n    const progressSpinner = newProgress(output, 'Setting up backup environment...')\n\n    // Create a unique temporary directory to store files before bundling them into the archive at outputPath.\n    // Temporary directories are normally deleted at the end of backup process, any unexpected exit may leave them\n    // behind, hence it is important to create a unique directory for each attempt.\n    const tmpOutDir = await mkdtemp(path.join(tmpdir(), `sanity-backup-`))\n\n    // Create required directories if they don't exist.\n    for (const dir of [outDir, path.join(tmpOutDir, 'images'), path.join(tmpOutDir, 'files')]) {\n      mkdirSync(dir, {recursive: true})\n    }\n\n    debug('Writing to temporary directory %s', tmpOutDir)\n    const tmpOutDocumentsFile = path.join(tmpOutDir, 'data.ndjson')\n\n    // Handle concurrent writes to the same file using mutex.\n    const docOutStream = createWriteStream(tmpOutDocumentsFile)\n    const docWriteMutex = new Mutex()\n\n    try {\n      const backupFileStream = new PaginatedGetBackupStream(\n        client,\n        opts.projectId,\n        opts.datasetName,\n        opts.backupId,\n        opts.token,\n      )\n\n      const files: File[] = []\n      let i = 0\n      for await (const file of backupFileStream) {\n        files.push(file)\n        i++\n        progressSpinner.set({\n          step: `Reading backup files...`,\n          update: true,\n          current: i,\n          total: backupFileStream.totalFiles,\n        })\n      }\n\n      let totalItemsDownloaded = 0\n      // This is dynamically imported because this module is ESM only and this file gets compiled to CJS at this time.\n      const {default: pMap} = await import('p-map')\n      await pMap(\n        files,\n        async (file: File) => {\n          if (file.type === 'file' || file.type === 'image') {\n            await downloadAsset(file.url, file.name, file.type, tmpOutDir)\n          } else {\n            const doc = await downloadDocument(file.url)\n            await docWriteMutex.runExclusive(() => {\n              docOutStream.write(`${doc}\\n`)\n            })\n          }\n\n          totalItemsDownloaded += 1\n          progressSpinner.set({\n            step: `Downloading documents and assets...`,\n            update: true,\n            current: totalItemsDownloaded,\n            total: backupFileStream.totalFiles,\n          })\n        },\n        {concurrency: opts.concurrency},\n      )\n    } catch (error) {\n      progressSpinner.fail()\n      const {message} = parseApiErr(error)\n      throw new Error(`Downloading dataset backup failed: ${message}`)\n    }\n\n    docOutStream.end()\n    await finished(docOutStream)\n\n    progressSpinner.set({step: `Archiving files into a tarball...`, update: true})\n    try {\n      await archiveDir(tmpOutDir, outFilePath, (processedBytes: number) => {\n        progressSpinner.update({\n          step: `Archiving files into a tarball, ${humanFileSize(processedBytes)} bytes written...`,\n        })\n      })\n    } catch (err) {\n      progressSpinner.fail()\n      throw new Error(`Archiving backup failed: ${err.message}`)\n    }\n\n    progressSpinner.set({\n      step: `Cleaning up temporary files at ${chalk.cyan(`${tmpOutDir}`)}`,\n    })\n    cleanupTmpDir(tmpOutDir)\n\n    progressSpinner.set({\n      step: `Backup download complete [${prettyMs(Date.now() - start)}]`,\n    })\n    progressSpinner.succeed()\n  },\n}\n\n// prepareBackupOptions validates backup options from CLI and prepares Client and DownloadBackupOptions.\nasync function prepareBackupOptions(\n  context: CliCommandContext,\n  args: CliCommandArguments,\n): Promise<[SanityClient, DownloadBackupOptions]> {\n  const flags = await parseCliFlags(args)\n  const [dataset] = args.argsWithoutOptions\n  const {prompt, workDir} = context\n  const {projectId, datasetName, client} = await resolveApiClient(\n    context,\n    dataset,\n    defaultApiVersion,\n  )\n\n  const {token} = client.config()\n  if (!isString(token) || token.length < 1) {\n    throw new Error(`token is missing`)\n  }\n\n  if (!isString(datasetName) || datasetName.length < 1) {\n    throw new Error(`dataset ${datasetName} must be a valid dataset name`)\n  }\n\n  const backupId = String(flags['backup-id'] || (await chooseBackupIdPrompt(context, datasetName)))\n  if (backupId.length < 1) {\n    throw new Error(`backup-id ${flags['backup-id']} should be a valid string`)\n  }\n\n  if ('concurrency' in flags) {\n    if (flags.concurrency < 1 || flags.concurrency > MAX_DOWNLOAD_CONCURRENCY) {\n      throw new Error(`concurrency should be in 1 to ${MAX_DOWNLOAD_CONCURRENCY} range`)\n    }\n  }\n\n  const defaultOutFileName = `${datasetName}-backup-${backupId}.tar.gz`\n  let out = await (async (): Promise<string> => {\n    if (flags.out !== undefined) {\n      // Rewrite the output path to an absolute path, if it is not already.\n      return absolutify(flags.out)\n    }\n\n    const input = await prompt.single({\n      type: 'input',\n      message: 'Output path:',\n      default: path.join(workDir, defaultOutFileName),\n      filter: absolutify,\n    })\n    return input\n  })()\n\n  // If path is a directory name, then add a default file name to the path.\n  if (isPathDirName(out)) {\n    out = path.join(out, defaultOutFileName)\n  }\n\n  // If the file already exists, ask for confirmation if it should be overwritten.\n  if (!flags.overwrite && existsSync(out)) {\n    const shouldOverwrite = await prompt.single({\n      type: 'confirm',\n      message: `File \"${out}\" already exists, would you like to overwrite it?`,\n      default: false,\n    })\n\n    // If the user does not want to overwrite the file, set the output path to an empty string.\n    // This should be handled by the caller of this function as cancel operation.\n    if (!shouldOverwrite) {\n      out = ''\n    }\n  }\n\n  return [\n    client,\n    {\n      projectId,\n      datasetName,\n      backupId,\n      token,\n      outDir: path.dirname(out),\n      outFileName: path.basename(out),\n      overwrite: flags.overwrite,\n      concurrency: flags.concurrency || DEFAULT_DOWNLOAD_CONCURRENCY,\n    },\n  ]\n}\n\nexport default downloadBackupCommand\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nimport parseApiErr from '../../actions/backup/parseApiErr'\nimport resolveApiClient from '../../actions/backup/resolveApiClient'\nimport {defaultApiVersion} from './backupGroup'\n\nconst helpText = `\nExamples\n  sanity backup enable DATASET_NAME\n`\n\nconst enableDatasetBackupCommand: CliCommandDefinition = {\n  name: 'enable',\n  group: 'backup',\n  signature: '[DATASET_NAME]',\n  description: 'Enable backup for a dataset.',\n  helpText,\n  action: async (args, context) => {\n    const {output, chalk} = context\n    const [dataset] = args.argsWithoutOptions\n    const {projectId, datasetName, token, client} = await resolveApiClient(\n      context,\n      dataset,\n      defaultApiVersion,\n    )\n\n    try {\n      await client.request({\n        method: 'PUT',\n        headers: {Authorization: `Bearer ${token}`},\n        uri: `/projects/${projectId}/datasets/${datasetName}/settings/backups`,\n        body: {\n          enabled: true,\n        },\n      })\n\n      output.print(\n        `${chalk.green(\n          `Enabled backups for dataset ${datasetName}.\\nPlease note that it may take up to 24 hours before the first backup is created.\\n`,\n        )}`,\n      )\n\n      output.print(\n        `${chalk.bold(`Retention policies may apply depending on your plan and agreement.\\n`)}`,\n      )\n    } catch (error) {\n      const {message} = parseApiErr(error)\n      output.print(`${chalk.red(`Enabling dataset backup failed: ${message}`)}\\n`)\n    }\n  },\n}\nexport default enableDatasetBackupCommand\n","import {type CliCommandDefinition} from '@sanity/cli'\nimport {Table} from 'console-table-printer'\nimport {isAfter, isValid, lightFormat, parse} from 'date-fns'\nimport {hideBin} from 'yargs/helpers'\nimport yargs from 'yargs/yargs'\n\nimport parseApiErr from '../../actions/backup/parseApiErr'\nimport resolveApiClient from '../../actions/backup/resolveApiClient'\nimport {defaultApiVersion} from './backupGroup'\n\nconst DEFAULT_LIST_BACKUP_LIMIT = 30\n\ninterface ListDatasetBackupFlags {\n  before?: string\n  after?: string\n  limit?: string\n}\n\ntype ListBackupRequestQueryParams = {\n  before?: string\n  after?: string\n  limit: string\n}\n\ntype ListBackupResponse = {\n  backups: ListBackupResponseItem[]\n}\n\ntype ListBackupResponseItem = {\n  id: string\n  createdAt: string\n}\n\nconst helpText = `\nOptions\n  --limit <int>     Maximum number of backups returned. Default 30.\n  --after <string>  Only return backups after this date (inclusive)\n  --before <string> Only return backups before this date (exclusive). Cannot be younger than <after> if specified.\n\nExamples\n  sanity backup list DATASET_NAME\n  sanity backup list DATASET_NAME --limit 50\n  sanity backup list DATASET_NAME --after 2024-01-31 --limit 10\n  sanity backup list DATASET_NAME --after 2024-01-31 --before 2024-01-10\n`\n\nfunction parseCliFlags(args: {argv?: string[]}) {\n  return yargs(hideBin(args.argv || process.argv).slice(2))\n    .options('after', {type: 'string'})\n    .options('before', {type: 'string'})\n    .options('limit', {type: 'number', default: DEFAULT_LIST_BACKUP_LIMIT, alias: 'l'}).argv\n}\n\nconst listDatasetBackupCommand: CliCommandDefinition<ListDatasetBackupFlags> = {\n  name: 'list',\n  group: 'backup',\n  signature: '[DATASET_NAME]',\n  description: 'List available backups for a dataset.',\n  helpText,\n  action: async (args, context) => {\n    const {output, chalk} = context\n    const flags = await parseCliFlags(args)\n    const [dataset] = args.argsWithoutOptions\n\n    const {projectId, datasetName, token, client} = await resolveApiClient(\n      context,\n      dataset,\n      defaultApiVersion,\n    )\n\n    const query: ListBackupRequestQueryParams = {limit: DEFAULT_LIST_BACKUP_LIMIT.toString()}\n    if (flags.limit) {\n      // We allow limit up to Number.MAX_SAFE_INTEGER to leave it for server-side validation,\n      //  while still sending sensible value in limit string.\n      if (flags.limit < 1 || flags.limit > Number.MAX_SAFE_INTEGER) {\n        throw new Error(\n          `Parsing --limit: must be an integer between 1 and ${Number.MAX_SAFE_INTEGER}`,\n        )\n      }\n      query.limit = flags.limit.toString()\n    }\n\n    if (flags.before || flags.after) {\n      try {\n        const parsedBefore = processDateFlags(flags.before)\n        const parsedAfter = processDateFlags(flags.after)\n\n        if (parsedAfter && parsedBefore && isAfter(parsedAfter, parsedBefore)) {\n          throw new Error('--after date must be before --before')\n        }\n\n        query.before = flags.before\n        query.after = flags.after\n      } catch (err) {\n        throw new Error(`Parsing date flags: ${err}`)\n      }\n    }\n\n    let response\n    try {\n      response = await client.request<ListBackupResponse>({\n        headers: {Authorization: `Bearer ${token}`},\n        uri: `/projects/${projectId}/datasets/${datasetName}/backups`,\n        query: {...query},\n      })\n    } catch (error) {\n      const {message} = parseApiErr(error)\n      output.error(`${chalk.red(`List dataset backup failed: ${message}`)}\\n`)\n    }\n\n    if (response && response.backups) {\n      if (response.backups.length === 0) {\n        output.print('No backups found.')\n        return\n      }\n\n      const table = new Table({\n        columns: [\n          {name: 'resource', title: 'RESOURCE', alignment: 'left'},\n          {name: 'createdAt', title: 'CREATED AT', alignment: 'left'},\n          {name: 'backupId', title: 'BACKUP ID', alignment: 'left'},\n        ],\n      })\n\n      response.backups.forEach((backup: ListBackupResponseItem) => {\n        const {id, createdAt} = backup\n        table.addRow({\n          resource: 'Dataset',\n          createdAt: lightFormat(Date.parse(createdAt), 'yyyy-MM-dd HH:mm:ss'),\n          backupId: id,\n        })\n      })\n\n      table.printTable()\n    }\n  },\n}\n\nfunction processDateFlags(date: string | undefined): Date | undefined {\n  if (!date) return undefined\n  const parsedDate = parse(date, 'yyyy-MM-dd', new Date())\n  if (isValid(parsedDate)) {\n    return parsedDate\n  }\n\n  throw new Error(`Invalid ${date} date format. Use YYYY-MM-DD`)\n}\n\nexport default listDatasetBackupCommand\n","import type {CliCommandArguments, CliCommandContext, CliCommandDefinition} from '@sanity/cli'\nimport {BuildSanityStudioCommandFlags} from '../../actions/build/buildAction'\n\nconst helpText = `\nOptions\n  --source-maps Enable source maps for built bundles (increases size of bundle)\n  --no-minify Skip minifying built JavaScript (speeds up build, increases size of bundle)\n  -y, --yes Use unattended mode, accepting defaults and using only flags for choices\n\nExamples\n  sanity build\n  sanity build --no-minify --source-maps\n`\n\nconst buildCommand: CliCommandDefinition = {\n  name: 'build',\n  signature: '[OUTPUT_DIR]',\n  description: 'Builds the Sanity Studio configuration into a static bundle',\n  action: async (\n    args: CliCommandArguments<BuildSanityStudioCommandFlags>,\n    context: CliCommandContext,\n    overrides?: {basePath?: string},\n  ) => {\n    const buildAction = await getBuildAction()\n\n    return buildAction(args, context, overrides)\n  },\n  helpText,\n}\n\nasync function getBuildAction() {\n  // NOTE: in dev-mode we want to include from `src` so we need to use `.ts` extension\n  // NOTE: this `if` statement is not included in the output bundle\n  if (__DEV__) {\n    // eslint-disable-next-line import/extensions\n    const mod: typeof import('../../actions/build/buildAction') = require('../../actions/build/buildAction.ts')\n\n    return mod.default\n  }\n\n  const mod = await import('../../actions/build/buildAction')\n\n  return mod.default\n}\n\nexport default buildCommand\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nconst checkCommand: CliCommandDefinition = {\n  name: 'check',\n  signature: '',\n  description: '[deprecated]',\n  helpText: '',\n  hideFromHelp: true,\n  action: (_args, context) => {\n    const {output} = context\n    output.print('`sanity check` is deprecated and no longer has any effect')\n    return Promise.resolve()\n  },\n}\n\nexport default checkCommand\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nconst configCheckCommand: CliCommandDefinition = {\n  name: 'configcheck',\n  signature: '',\n  description: 'Checks if the required configuration files for plugins exists and are up to date',\n  helpText: '',\n  hideFromHelp: true,\n  action: async (args, context) => {\n    context.output.error('`sanity configcheck` is no longer required/used')\n    return Promise.resolve()\n  },\n}\n\nexport default configCheckCommand\n","import {type CliCommandContext, type CliPrompter} from '@sanity/cli'\nimport logSymbols from 'log-symbols'\nimport oneline from 'oneline'\nimport url from 'url'\n\nconst wildcardReplacement = 'a-wild-card-r3pl4c3m3n7-a'\nconst portReplacement = ':7777777'\n\ninterface AddCorsOriginFlags {\n  credentials?: boolean\n}\n\nexport async function addCorsOrigin(\n  givenOrigin: string,\n  flags: AddCorsOriginFlags,\n  context: CliCommandContext,\n): Promise<boolean> {\n  const {apiClient, prompt, output} = context\n  const origin = await (givenOrigin\n    ? filterAndValidateOrigin(givenOrigin)\n    : promptForOrigin(prompt))\n\n  const hasWildcard = origin.includes('*')\n  if (hasWildcard && !(await promptForWildcardConfirmation(origin, context))) {\n    return false\n  }\n  const allowCredentials =\n    typeof flags.credentials === 'undefined'\n      ? await promptForCredentials(hasWildcard, context)\n      : Boolean(flags.credentials)\n\n  if (givenOrigin !== origin) {\n    output.print(`Normalized origin to ${origin}`)\n  }\n\n  const client = apiClient({\n    requireUser: true,\n    requireProject: true,\n  })\n\n  await client.request({\n    method: 'POST',\n    url: '/cors',\n    body: {origin, allowCredentials},\n    maxRedirects: 0,\n  })\n\n  return true\n}\n\nfunction promptForCredentials(hasWildcard: boolean, context: CliCommandContext): Promise<string> {\n  const {prompt, output, chalk} = context\n\n  output.print('')\n  if (hasWildcard) {\n    output.print(oneline`\n      ${chalk.yellow(`${logSymbols.warning} Warning:`)}\n      We ${chalk.red(chalk.underline('HIGHLY'))} recommend NOT allowing credentials\n      on origins containing wildcards. If you are logged in to a studio, people will\n      be able to send requests ${chalk.underline('on your behalf')} to read and modify\n      data, from any matching origin. Please tread carefully!\n    `)\n  } else {\n    output.print(oneline`\n      ${chalk.yellow(`${logSymbols.warning} Warning:`)}\n      Should this origin be allowed to send requests using authentication tokens or\n      session cookies? Be aware that any script on this origin will be able to send\n      requests ${chalk.underline('on your behalf')} to read and modify data if you\n      are logged in to a Sanity studio. If this origin hosts a studio, you will need\n      this, otherwise you should probably answer \"No\" (n).\n    `)\n  }\n\n  output.print('')\n\n  return prompt.single({\n    type: 'confirm',\n    message: oneline`\n      Allow credentials to be sent from this origin? Please read the warning above.\n    `,\n    default: false,\n  })\n}\n\nfunction promptForWildcardConfirmation(\n  origin: string,\n  context: CliCommandContext,\n): Promise<boolean> {\n  const {prompt, output, chalk} = context\n\n  output.print('')\n  output.print(chalk.yellow(`${logSymbols.warning} Warning: Examples of allowed origins:`))\n\n  if (origin === '*') {\n    output.print('- http://www.some-malicious.site')\n    output.print('- https://not.what-you-were-expecting.com')\n    output.print('- https://high-traffic-site.com')\n    output.print('- http://192.168.1.1:8080')\n  } else {\n    output.print(`- ${origin.replace(/:\\*/, ':1234').replace(/\\*/g, 'foo')}`)\n    output.print(`- ${origin.replace(/:\\*/, ':3030').replace(/\\*/g, 'foo.bar')}`)\n  }\n\n  output.print('')\n\n  return prompt.single({\n    type: 'confirm',\n    message: oneline`\n      Using wildcards can be ${chalk.red('risky')}.\n      Are you ${chalk.underline('absolutely sure')} you want to allow this origin?`,\n    default: false,\n  })\n}\n\nfunction promptForOrigin(prompt: CliPrompter): Promise<string> {\n  return prompt.single({\n    type: 'input',\n    message: 'Origin (including protocol):',\n    filter: filterOrigin,\n    validate: (origin) => validateOrigin(origin, origin),\n  })\n}\n\nfunction filterOrigin(origin: string): string | null {\n  if (origin === '*' || origin === 'file:///*' || origin === 'null') {\n    return origin\n  }\n\n  try {\n    const example = origin\n      .replace(/([^:])\\*/g, `$1${wildcardReplacement}`)\n      .replace(/:\\*/, portReplacement)\n\n    const parsed = url.parse(example)\n    let host = parsed.host || ''\n    if (/^https?:$/.test(parsed.protocol || '')) {\n      host = host.replace(/:(80|443)$/, '')\n    }\n\n    host = host.replace(portReplacement, ':*').replace(new RegExp(wildcardReplacement, 'g'), '*')\n\n    return `${parsed.protocol}//${host}`\n  } catch (err) {\n    return null\n  }\n}\n\nfunction validateOrigin(origin: string | null, givenOrigin: string): true | string {\n  if (origin === '*' || origin === 'file:///*' || origin === 'null') {\n    return true\n  }\n\n  try {\n    url.parse(origin || (0 as any as string)) // Use 0 to trigger error for unset values\n    return true\n  } catch (err) {\n    // Fall-through to error\n  }\n\n  if (/^file:\\/\\//.test(givenOrigin)) {\n    return `Only a local file wildcard is currently allowed: file:///*`\n  }\n\n  return `Invalid origin \"${givenOrigin}\", must include protocol (https://some.host)`\n}\n\nfunction filterAndValidateOrigin(givenOrigin: string): string {\n  const origin = filterOrigin(givenOrigin)\n  const result = validateOrigin(origin, givenOrigin)\n  if (result !== true) {\n    throw new Error(result)\n  }\n\n  if (!origin) {\n    throw new Error('Invalid origin')\n  }\n\n  return origin\n}\n","import {type CliCommandDefinition} from '@sanity/cli'\nimport fs from 'fs'\nimport path from 'path'\n\nimport {addCorsOrigin} from '../../actions/cors/addCorsOrigin'\n\nconst helpText = `\nOptions\n  --credentials Allow credentials (token/cookie) to be sent from this origin\n  --no-credentials Disallow credentials (token/cookie) to be sent from this origin\n\nExamples\n  sanity cors add\n  sanity cors add http://localhost:3000 --no-credentials\n`\n\nconst addCorsOriginCommand: CliCommandDefinition = {\n  name: 'add',\n  group: 'cors',\n  signature: '[ORIGIN]',\n  helpText,\n  description: 'Allow a new origin to use your project API through CORS',\n  action: async (args, context) => {\n    const {output} = context\n    const [origin] = args.argsWithoutOptions\n\n    if (!origin) {\n      throw new Error('No origin specified, use `sanity cors add <origin-url>`')\n    }\n\n    const flags = args.extOptions\n\n    // eslint-disable-next-line no-sync\n    const isFile = fs.existsSync(path.join(process.cwd(), origin))\n    if (isFile) {\n      output.warn(`Origin \"${origin}?\" Remember to quote values (sanity cors add \"*\")`)\n    }\n\n    const success = await addCorsOrigin(origin, flags, context)\n    if (success) {\n      output.print('CORS origin added successfully')\n    }\n  },\n}\n\nexport default addCorsOriginCommand\n","import {type CliCommandGroupDefinition} from '@sanity/cli'\n\nconst corsGroup: CliCommandGroupDefinition = {\n  name: 'cors',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Configures CORS settings for Sanity projects',\n}\n\nexport default corsGroup\n","import {type CliCommandContext, type CliCommandDefinition} from '@sanity/cli'\n\nimport {type CorsOrigin} from './types'\n\nconst helpText = `\nExamples\n  sanity cors delete\n  sanity cors delete http://localhost:3000\n`\n\nconst deleteCorsOriginCommand: CliCommandDefinition = {\n  name: 'delete',\n  group: 'cors',\n  signature: '[ORIGIN]',\n  helpText,\n  description: 'Delete an existing CORS-origin from your project',\n  action: async (args, context) => {\n    const {output, apiClient} = context\n    const [origin] = args.argsWithoutOptions\n    const client = apiClient({requireUser: true, requireProject: true})\n    const originId = await promptForOrigin(origin, context)\n    try {\n      await client.request({method: 'DELETE', uri: `/cors/${originId}`})\n      output.print('Origin deleted')\n    } catch (err) {\n      throw new Error(`Origin deletion failed:\\n${err.message}`)\n    }\n  },\n}\n\nexport default deleteCorsOriginCommand\n\nasync function promptForOrigin(specified: string | undefined, context: CliCommandContext) {\n  const specifiedOrigin = specified && specified.toLowerCase()\n  const {prompt, apiClient} = context\n  const client = apiClient({requireUser: true, requireProject: true})\n\n  const origins = await client.request<CorsOrigin[]>({url: '/cors'})\n  if (specifiedOrigin) {\n    const selected = origins.filter((origin) => origin.origin.toLowerCase() === specifiedOrigin)[0]\n    if (!selected) {\n      throw new Error(`Origin \"${specified} not found\"`)\n    }\n\n    return selected.id\n  }\n\n  const choices = origins.map((origin) => ({value: origin.id, name: origin.origin}))\n  return prompt.single({\n    message: 'Select origin to delete',\n    type: 'list',\n    choices,\n  })\n}\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nimport {type CorsOrigin} from './types'\n\nconst helpText = `\nExamples\n  sanity cors list\n`\n\nconst listCorsOriginsCommand: CliCommandDefinition = {\n  name: 'list',\n  group: 'cors',\n  signature: '',\n  helpText,\n  description: 'List all origins allowed to access the API for this project',\n  action: async (args, context) => {\n    const {output} = context\n    const {apiClient} = context\n    const client = apiClient({requireUser: true, requireProject: true})\n    const origins = await client.request<CorsOrigin[]>({url: '/cors'})\n    output.print(origins.map((origin) => origin.origin).join('\\n'))\n  },\n}\n\nexport default listCorsOriginsCommand\n","const MAX_DATASET_NAME_LENGTH = 64\n\nexport function validateDatasetAliasName(datasetName: string): false | string {\n  if (!datasetName) {\n    return 'Alias name is missing'\n  }\n\n  const name = `${datasetName}`\n\n  if (name.toLowerCase() !== name) {\n    return 'Alias name must be all lowercase characters'\n  }\n\n  if (name.length < 2) {\n    return 'Alias name must be at least two characters long'\n  }\n\n  if (name.length > MAX_DATASET_NAME_LENGTH) {\n    return `Alias name must be at most ${MAX_DATASET_NAME_LENGTH} characters`\n  }\n\n  if (!/^[a-z0-9~]/.test(name)) {\n    return 'Alias name must start with a letter or a number'\n  }\n\n  if (!/^[a-z0-9~][-_a-z0-9]+$/.test(name)) {\n    return 'Alias name must only contain letters, numbers, dashes and underscores'\n  }\n\n  if (/[-_]$/.test(name)) {\n    return 'Alias name must not end with a dash or an underscore'\n  }\n\n  return false\n}\n","import {type CliPrompter} from '@sanity/cli'\n\nimport {validateDatasetAliasName} from './validateDatasetAliasName'\n\nexport function promptForDatasetAliasName(\n  prompt: CliPrompter,\n  options: {message?: string; default?: string} = {},\n): Promise<string> {\n  return prompt.single({\n    type: 'input',\n    message: 'Alias name:',\n    validate: (name) => {\n      const err = validateDatasetAliasName(name)\n      if (err) {\n        return err\n      }\n\n      return true\n    },\n    ...options,\n  })\n}\n","import {type SanityClient} from '@sanity/client'\n\nimport {validateDatasetAliasName} from '../../../actions/dataset/alias/validateDatasetAliasName'\nimport {type DatasetAliasDefinition, type DatasetModificationResponse} from './types'\n\nexport const ALIAS_PREFIX = '~'\n\nexport function listAliases(client: SanityClient): Promise<DatasetAliasDefinition[]> {\n  return client.request<DatasetAliasDefinition[]>({uri: '/aliases'})\n}\n\nexport function createAlias(\n  client: SanityClient,\n  aliasName: string,\n  datasetName: string | null,\n): Promise<DatasetModificationResponse> {\n  return modify(client, 'PUT', aliasName, datasetName ? {datasetName} : undefined)\n}\n\nexport function updateAlias(\n  client: SanityClient,\n  aliasName: string,\n  datasetName: string | null,\n): Promise<DatasetModificationResponse> {\n  return modify(client, 'PATCH', aliasName, datasetName ? {datasetName} : undefined)\n}\n\nexport function unlinkAlias(\n  client: SanityClient,\n  aliasName: string,\n): Promise<DatasetModificationResponse> {\n  validateDatasetAliasName(aliasName)\n  return modify(client, 'PATCH', `${aliasName}/unlink`, {})\n}\n\nexport function removeAlias(client: SanityClient, aliasName: string): Promise<{deleted: boolean}> {\n  return modify(client, 'DELETE', aliasName)\n}\n\nfunction modify(\n  client: SanityClient,\n  method: string,\n  aliasName: string,\n  body?: {datasetName?: string},\n) {\n  return client.request({method, uri: `/aliases/${aliasName}`, body})\n}\n","import {type CliCommandAction} from '@sanity/cli'\n\nimport {promptForDatasetAliasName} from '../../../actions/dataset/alias/promptForDatasetAliasName'\nimport {validateDatasetAliasName} from '../../../actions/dataset/alias/validateDatasetAliasName'\nimport {promptForDatasetName} from '../../../actions/dataset/datasetNamePrompt'\nimport {validateDatasetName} from '../../../actions/dataset/validateDatasetName'\nimport * as aliasClient from './datasetAliasesClient'\nimport {ALIAS_PREFIX} from './datasetAliasesClient'\n\nexport const createAliasHandler: CliCommandAction = async (args, context) => {\n  const {apiClient, output, prompt} = context\n  const [, alias, targetDataset] = args.argsWithoutOptions\n  const client = apiClient()\n\n  const nameError = alias && validateDatasetAliasName(alias)\n  if (nameError) {\n    throw new Error(nameError)\n  }\n\n  const [datasets, aliases, projectFeatures] = await Promise.all([\n    client.datasets.list().then((sets) => sets.map((ds) => ds.name)),\n    aliasClient.listAliases(client).then((sets) => sets.map((ds) => ds.name)),\n    client.request({uri: '/features'}),\n  ])\n\n  let aliasName = await (alias || promptForDatasetAliasName(prompt))\n  let aliasOutputName = aliasName\n\n  if (aliasName.startsWith(ALIAS_PREFIX)) {\n    aliasName = aliasName.substring(1)\n  } else {\n    aliasOutputName = `${ALIAS_PREFIX}${aliasName}`\n  }\n\n  if (aliases.includes(aliasName)) {\n    throw new Error(`Dataset alias \"${aliasOutputName}\" already exists`)\n  }\n\n  if (targetDataset) {\n    const datasetErr = validateDatasetName(targetDataset)\n    if (datasetErr) {\n      throw new Error(datasetErr)\n    }\n  }\n\n  const datasetName = await (targetDataset || promptForDatasetName(prompt))\n  if (datasetName && !datasets.includes(datasetName)) {\n    throw new Error(`Dataset \"${datasetName}\" does not exist `)\n  }\n\n  const canCreateAlias = projectFeatures.includes('advancedDatasetManagement')\n  if (!canCreateAlias) {\n    throw new Error(`This project cannot create a dataset alias`)\n  }\n\n  try {\n    await aliasClient.createAlias(client, aliasName, datasetName)\n    output.print(\n      `Dataset alias ${aliasOutputName} created ${\n        datasetName && `and linked to ${datasetName}`\n      } successfully`,\n    )\n  } catch (err) {\n    throw new Error(`Dataset alias creation failed:\\n${err.message}`)\n  }\n}\n","import {type CliCommandAction} from '@sanity/cli'\nimport {hideBin} from 'yargs/helpers'\nimport yargs from 'yargs/yargs'\n\nimport {validateDatasetAliasName} from '../../../actions/dataset/alias/validateDatasetAliasName'\nimport * as aliasClient from './datasetAliasesClient'\nimport {ALIAS_PREFIX} from './datasetAliasesClient'\n\nfunction parseCliFlags(args: {argv?: string[]}) {\n  return yargs(hideBin(args.argv || process.argv).slice(2)).option('force', {type: 'boolean'}).argv\n}\n\ninterface DeleteAliasFlags {\n  force?: boolean\n}\n\nexport const deleteAliasHandler: CliCommandAction<DeleteAliasFlags> = async (args, context) => {\n  const {apiClient, prompt, output} = context\n  const [, ds] = args.argsWithoutOptions\n  const {force} = await parseCliFlags(args)\n  const client = apiClient()\n  if (!ds) {\n    throw new Error('Dataset alias name must be provided')\n  }\n\n  let aliasName = `${ds}`\n  const dsError = validateDatasetAliasName(aliasName)\n  if (dsError) {\n    throw dsError\n  }\n  aliasName = aliasName.startsWith(ALIAS_PREFIX) ? aliasName.substring(1) : aliasName\n\n  const [fetchedAliases] = await Promise.all([aliasClient.listAliases(client)])\n  const linkedAlias = fetchedAliases.find((elem) => elem.name === aliasName)\n  const message =\n    linkedAlias && linkedAlias.datasetName\n      ? `This dataset alias is linked to ${linkedAlias.datasetName}. `\n      : ''\n\n  if (force) {\n    output.warn(`'--force' used: skipping confirmation, deleting alias \"${aliasName}\"`)\n  } else {\n    await prompt.single({\n      type: 'input',\n      message: `${message}Are you ABSOLUTELY sure you want to delete this dataset alias?\\n  Type the name of the dataset alias to confirm delete: `,\n      filter: (input) => `${input}`.trim(),\n      validate: (input) => {\n        return input === aliasName || 'Incorrect dataset alias name. Ctrl + C to cancel delete.'\n      },\n    })\n  }\n\n  return aliasClient.removeAlias(client, aliasName).then(() => {\n    output.print('Dataset alias deleted successfully')\n  })\n}\n","import {type CliCommandAction} from '@sanity/cli'\n\nimport {promptForDatasetAliasName} from '../../../actions/dataset/alias/promptForDatasetAliasName'\nimport {validateDatasetAliasName} from '../../../actions/dataset/alias/validateDatasetAliasName'\nimport {promptForDatasetName} from '../../../actions/dataset/datasetNamePrompt'\nimport {validateDatasetName} from '../../../actions/dataset/validateDatasetName'\nimport * as aliasClient from './datasetAliasesClient'\nimport {ALIAS_PREFIX} from './datasetAliasesClient'\n\nexport const linkAliasHandler: CliCommandAction = async (args, context) => {\n  const {apiClient, output, prompt} = context\n  const [, alias, targetDataset] = args.argsWithoutOptions\n  const flags = args.extOptions\n  const client = apiClient()\n\n  const nameError = alias && validateDatasetAliasName(alias)\n  if (nameError) {\n    throw new Error(nameError)\n  }\n\n  const [datasets, fetchedAliases] = await Promise.all([\n    client.datasets.list().then((sets) => sets.map((ds) => ds.name)),\n    aliasClient.listAliases(client),\n  ])\n  const aliases = fetchedAliases.map((da) => da.name)\n\n  let aliasName = await (alias || promptForDatasetAliasName(prompt))\n  let aliasOutputName = aliasName\n\n  if (aliasName.startsWith(ALIAS_PREFIX)) {\n    aliasName = aliasName.substring(1)\n  } else {\n    aliasOutputName = `${ALIAS_PREFIX}${aliasName}`\n  }\n\n  if (!aliases.includes(aliasName)) {\n    throw new Error(`Dataset alias \"${aliasOutputName}\" does not exist `)\n  }\n\n  const datasetName = await (targetDataset || promptForDatasetName(prompt))\n  const datasetErr = validateDatasetName(datasetName)\n  if (datasetErr) {\n    throw new Error(datasetErr)\n  }\n\n  if (!datasets.includes(datasetName)) {\n    throw new Error(`Dataset \"${datasetName}\" does not exist `)\n  }\n\n  const linkedAlias = fetchedAliases.find((elem) => elem.name === aliasName)\n\n  if (linkedAlias && linkedAlias.datasetName) {\n    if (linkedAlias.datasetName === datasetName) {\n      throw new Error(`Dataset alias ${aliasOutputName} already linked to ${datasetName}`)\n    }\n\n    if (!flags.force) {\n      await prompt.single({\n        type: 'input',\n        message: `This alias is linked to dataset <${linkedAlias.datasetName}>. Are you ABSOLUTELY sure you want to link this dataset alias to this dataset?\n        \\n  Type YES/NO: `,\n        filter: (input) => `${input}`.toLowerCase(),\n        validate: (input) => {\n          return input === 'yes' || 'Ctrl + C to cancel dataset alias link.'\n        },\n      })\n    }\n  }\n\n  try {\n    await aliasClient.updateAlias(client, aliasName, datasetName)\n    output.print(`Dataset alias ${aliasOutputName} linked to ${datasetName} successfully`)\n  } catch (err) {\n    throw new Error(`Dataset alias link failed:\\n${err.message}`)\n  }\n}\n","import {type CliCommandAction} from '@sanity/cli'\nimport {hideBin} from 'yargs/helpers'\nimport yargs from 'yargs/yargs'\n\nimport {promptForDatasetAliasName} from '../../../actions/dataset/alias/promptForDatasetAliasName'\nimport {validateDatasetAliasName} from '../../../actions/dataset/alias/validateDatasetAliasName'\nimport * as aliasClient from './datasetAliasesClient'\nimport {ALIAS_PREFIX} from './datasetAliasesClient'\n\ninterface UnlinkFlags {\n  force?: boolean\n}\n\nfunction parseCliFlags(args: {argv?: string[]}) {\n  return yargs(hideBin(args.argv || process.argv).slice(2)).option('force', {type: 'boolean'}).argv\n}\n\nexport const unlinkAliasHandler: CliCommandAction<UnlinkFlags> = async (args, context) => {\n  const {apiClient, output, prompt} = context\n  const [, alias] = args.argsWithoutOptions\n  const {force} = await parseCliFlags(args)\n  const client = apiClient()\n\n  const nameError = alias && validateDatasetAliasName(alias)\n  if (nameError) {\n    throw new Error(nameError)\n  }\n\n  const fetchedAliases = await aliasClient.listAliases(client)\n\n  let aliasName = await (alias || promptForDatasetAliasName(prompt))\n  let aliasOutputName = aliasName\n\n  if (aliasName.startsWith(ALIAS_PREFIX)) {\n    aliasName = aliasName.substring(1)\n  } else {\n    aliasOutputName = `${ALIAS_PREFIX}${aliasName}`\n  }\n\n  // get the current alias from the remote alias list\n  const linkedAlias = fetchedAliases.find((elem) => elem.name === aliasName)\n  if (!linkedAlias) {\n    throw new Error(`Dataset alias \"${aliasOutputName}\" does not exist`)\n  }\n\n  if (!linkedAlias.datasetName) {\n    throw new Error(`Dataset alias \"${aliasOutputName}\" is not linked to a dataset`)\n  }\n\n  if (force) {\n    output.warn(`'--force' used: skipping confirmation, unlinking alias \"${aliasOutputName}\"`)\n  } else {\n    await prompt.single({\n      type: 'input',\n      message: `Are you ABSOLUTELY sure you want to unlink this alias from the \"${linkedAlias.datasetName}\" dataset?\n        \\n  Type YES/NO: `,\n      filter: (input) => `${input}`.toLowerCase(),\n      validate: (input) => {\n        return input === 'yes' || 'Ctrl + C to cancel dataset alias unlink.'\n      },\n    })\n  }\n\n  try {\n    const result = await aliasClient.unlinkAlias(client, aliasName)\n    output.print(\n      `Dataset alias ${aliasOutputName} unlinked from ${result.datasetName} successfully`,\n    )\n  } catch (err) {\n    throw new Error(`Dataset alias unlink failed:\\n${err.message}`)\n  }\n}\n","import {type CliCommandDefinition} from '@sanity/cli'\nimport oneline from 'oneline'\n\nimport {createAliasHandler} from './createAliasHandler'\nimport {deleteAliasHandler} from './deleteAliasHandler'\nimport {linkAliasHandler} from './linkAliasHandler'\nimport {unlinkAliasHandler} from './unlinkAliasHandler'\n\nconst helpText = `\nBelow are examples of the alias subcommand\n\nCreate Alias\n  sanity dataset alias create\n  sanity dataset alias create <alias-name>\n  sanity dataset alias create <alias-name> <target-dataset>\n\nDelete Alias\n  Options\n    --force Skips security prompt and forces link command\n\n  Usage\n    sanity dataset alias delete <alias-name>\n    sanity dataset alias delete <alias-name> --force\n\nLink Alias\n  Options\n    --force Skips security prompt and forces link command\n\n  Usage\n    sanity dataset alias link\n    sanity dataset alias link <alias-name>\n    sanity dataset alias link <alias-name> <target-dataset>\n    sanity dataset alias link <alias-name> <target-dataset> --force\n\nUn-link Alias\n  Options\n    --force Skips security prompt and forces link command\n\n  Usage\n    sanity dataset alias unlink\n    sanity dataset alias unlink <alias-name>\n    sanity dataset alias unlink <alias-name> --force\n`\n\nconst aliasCommand: CliCommandDefinition = {\n  name: 'alias',\n  group: 'dataset',\n  signature: 'SUBCOMMAND [ALIAS_NAME, TARGET_DATASET]',\n  helpText,\n  description: 'You can manage your dataset alias using this command.',\n  action: async (args, context) => {\n    const [verb] = args.argsWithoutOptions\n    switch (verb) {\n      case 'create':\n        await createAliasHandler(args, context)\n        break\n      case 'delete':\n        await deleteAliasHandler(args, context)\n        break\n      case 'unlink':\n        await unlinkAliasHandler(args, context)\n        break\n      case 'link':\n        await linkAliasHandler(args, context)\n        break\n      default:\n        throw new Error(oneline`\n          Invalid command provided. Available commands are: create, delete, link and unlink.\n          For more guide run the help command 'sanity dataset alias --help'\n        `)\n    }\n  },\n}\n\nexport default aliasCommand\n","import {type CliCommandContext} from '@sanity/cli'\nimport {Table} from 'console-table-printer'\nimport {formatDistance, formatDistanceToNow, parseISO} from 'date-fns'\n\ninterface ListFlags {\n  offset?: number\n  limit?: number\n}\n\ntype CopyDatasetListResponse = {\n  id: string\n  state: string\n  createdAt: string\n  updatedAt: string\n  sourceDataset: string\n  targetDataset: string\n  withHistory: boolean\n}[]\n\nexport async function listDatasetCopyJobs(\n  flags: ListFlags,\n  context: CliCommandContext,\n): Promise<void> {\n  const {apiClient, output, chalk} = context\n  const client = apiClient()\n  const projectId = client.config().projectId\n  const query: {offset?: string; limit?: string} = {}\n  let response\n\n  if (flags.offset && flags.offset >= 0) {\n    query.offset = `${flags.offset}`\n  }\n  if (flags.limit && flags.limit > 0) {\n    query.limit = `${flags.limit}`\n  }\n\n  try {\n    response = await client.request<CopyDatasetListResponse>({\n      method: 'GET',\n      uri: `/projects/${projectId}/datasets/copy`,\n      query,\n    })\n  } catch (error) {\n    if (error.statusCode) {\n      output.error(`${chalk.red(`Dataset copy list failed:\\n${error.response.body.message}`)}\\n`)\n    } else {\n      output.error(`${chalk.red(`Dataset copy list failed:\\n${error.message}`)}\\n`)\n    }\n  }\n\n  if (response && response.length > 0) {\n    const table = new Table({\n      title: 'Dataset copy jobs for this project in descending order',\n      columns: [\n        {name: 'id', title: 'Job ID', alignment: 'left'},\n        {name: 'sourceDataset', title: 'Source Dataset', alignment: 'left'},\n        {name: 'targetDataset', title: 'Target Dataset', alignment: 'left'},\n        {name: 'state', title: 'State', alignment: 'left'},\n        {name: 'withHistory', title: 'With history', alignment: 'left'},\n        {name: 'timeStarted', title: 'Time started', alignment: 'left'},\n        {name: 'timeTaken', title: 'Time taken', alignment: 'left'},\n      ],\n    })\n\n    response.forEach((job) => {\n      const {id, state, createdAt, updatedAt, sourceDataset, targetDataset, withHistory} = job\n\n      let timeStarted = ''\n      if (createdAt !== '') {\n        timeStarted = formatDistanceToNow(parseISO(createdAt))\n      }\n\n      let timeTaken = ''\n      if (updatedAt !== '') {\n        timeTaken = formatDistance(parseISO(updatedAt), parseISO(createdAt))\n      }\n\n      let color\n      switch (state) {\n        case 'completed':\n          color = 'green'\n          break\n        case 'failed':\n          color = 'red'\n          break\n        case 'pending':\n          color = 'yellow'\n          break\n        default:\n          color = ''\n      }\n\n      table.addRow(\n        {\n          id,\n          state,\n          withHistory,\n          timeStarted: `${timeStarted} ago`,\n          timeTaken,\n          sourceDataset,\n          targetDataset,\n        },\n        {color},\n      )\n    })\n\n    table.printTable()\n  } else {\n    output.print(\"This project doesn't have any dataset copy jobs\")\n  }\n}\n","import {type SanityClient} from '@sanity/client'\n\nexport const getClientUrl = (client: SanityClient, uri: string, useCdn = false): string => {\n  const config = client.config()\n  const base = useCdn ? config.cdnUrl : config.url\n  return `${base}/${uri.replace(/^\\//, '')}`\n}\n","import {type CliCommandDefinition, type CliOutputter} from '@sanity/cli'\nimport {type SanityClient} from '@sanity/client'\nimport EventSource from '@sanity/eventsource'\nimport {Observable} from 'rxjs'\nimport {hideBin} from 'yargs/helpers'\nimport yargs from 'yargs/yargs'\n\nimport {promptForDatasetName} from '../../actions/dataset/datasetNamePrompt'\nimport {listDatasetCopyJobs} from '../../actions/dataset/listDatasetCopyJobs'\nimport {validateDatasetName} from '../../actions/dataset/validateDatasetName'\nimport {debug} from '../../debug'\nimport {getClientUrl} from '../../util/getClientUrl'\n\nconst helpText = `\nOptions\n  --detach Start the copy without waiting for it to finish\n  --attach <job-id> Attach to the running copy process to show progress\n  --skip-history Don't preserve document history on copy\n  --list Lists all dataset copy jobs corresponding to a certain criteria.\n  --offset Start position in the list of jobs. Default 0. With --list.\n  --limit Maximum number of jobs returned. Default 10. Maximum 1000. With --list.\n\nExamples\n  sanity dataset copy\n  sanity dataset copy <source-dataset>\n  sanity dataset copy <source-dataset> <target-dataset>\n  sanity dataset copy --skip-history <source-dataset> <target-dataset>\n  sanity dataset copy --detach <source-dataset> <target-dataset>\n  sanity dataset copy --attach <job-id>\n  sanity dataset copy --list\n  sanity dataset copy --list --offset=2\n  sanity dataset copy --list --offset=2 --limit=10\n`\n\ninterface CopyProgressStreamEvent {\n  type: 'reconnect' | string\n  progress?: number\n}\n\ninterface CopyDatasetFlags {\n  list?: boolean\n  attach?: string\n  detach?: boolean\n  offset?: number\n  limit?: number\n  'skip-history'?: boolean\n}\n\ninterface CopyDatasetResponse {\n  jobId: string\n}\n\nfunction parseCliFlags(args: {argv?: string[]}) {\n  return yargs(hideBin(args.argv || process.argv).slice(2))\n    .option('attach', {type: 'string'})\n    .option('list', {type: 'boolean'})\n    .option('limit', {type: 'number'})\n    .option('offset', {type: 'number'})\n    .option('skip-history', {type: 'boolean'})\n    .option('detach', {type: 'boolean'}).argv\n}\n\nconst progress = (url: string) => {\n  return new Observable<CopyProgressStreamEvent>((observer) => {\n    let progressSource = new EventSource(url)\n    let stopped = false\n\n    function onError(error: unknown) {\n      if (progressSource) {\n        progressSource.close()\n      }\n\n      debug(`Error received: ${error}`)\n      if (stopped) {\n        return\n      }\n      observer.next({type: 'reconnect'})\n      progressSource = new EventSource(url)\n    }\n\n    function onChannelError(error: MessageEvent) {\n      stopped = true\n      progressSource.close()\n      observer.error(error)\n    }\n\n    function onMessage(event: MessageEvent) {\n      const data = JSON.parse(event.data)\n      if (data.state === 'failed') {\n        debug('Job failed. Data: %o', event)\n        observer.error(event)\n      } else if (data.state === 'completed') {\n        debug('Job succeeded. Data: %o', event)\n        onComplete()\n      } else {\n        debug(`Job progressed. Data: %o`, event)\n        observer.next(data)\n      }\n    }\n\n    function onComplete() {\n      progressSource.removeEventListener('error', onError)\n      progressSource.removeEventListener('channel_error', onChannelError)\n      progressSource.removeEventListener('job', onMessage)\n      progressSource.removeEventListener('done', onComplete)\n      progressSource.close()\n      observer.complete()\n    }\n\n    progressSource.addEventListener('error', onError)\n    progressSource.addEventListener('channel_error', onChannelError)\n    progressSource.addEventListener('job', onMessage)\n    progressSource.addEventListener('done', onComplete)\n  })\n}\n\nconst followProgress = (\n  jobId: string,\n  client: SanityClient,\n  output: CliOutputter,\n): Promise<void> => {\n  let currentProgress = 0\n\n  const spinner = output.spinner({}).start()\n  const listenUrl = getClientUrl(client, `jobs/${jobId}/listen`)\n\n  debug(`Listening to ${listenUrl}`)\n\n  return new Promise((resolve, reject) => {\n    progress(listenUrl).subscribe({\n      next: (event) => {\n        if (typeof event.progress === 'number') {\n          currentProgress = event.progress\n        }\n\n        spinner.text = `Copy in progress: ${currentProgress}%`\n      },\n      error: (err) => {\n        spinner.fail()\n        reject(new Error(`${err.data}`))\n      },\n      complete: () => {\n        spinner.succeed('Copy finished.')\n        resolve()\n      },\n    })\n  })\n}\n\nconst copyDatasetCommand: CliCommandDefinition<CopyDatasetFlags> = {\n  name: 'copy',\n  group: 'dataset',\n  signature: '[SOURCE_DATASET] [TARGET_DATASET]',\n  helpText,\n  description:\n    'Manages dataset copying, including starting a new copy job, listing copy jobs and following the progress of a running copy job',\n  action: async (args, context) => {\n    const {apiClient, output, prompt, chalk} = context\n    // Reparsing CLI flags for better control of binary flags\n    const flags: CopyDatasetFlags = await parseCliFlags(args)\n    const client = apiClient()\n\n    if (flags.list) {\n      await listDatasetCopyJobs(flags, context)\n      return\n    }\n\n    if (flags.attach) {\n      const jobId = flags.attach\n\n      if (!jobId) {\n        throw new Error('Please supply a jobId')\n      }\n\n      await followProgress(jobId, client, output)\n      return\n    }\n\n    const [sourceDataset, targetDataset] = args.argsWithoutOptions\n    const shouldSkipHistory = Boolean(flags['skip-history'])\n\n    const nameError = sourceDataset && validateDatasetName(sourceDataset)\n    if (nameError) {\n      throw new Error(nameError)\n    }\n\n    const existingDatasets = await client.datasets\n      .list()\n      .then((datasets) => datasets.map((ds) => ds.name))\n\n    const sourceDatasetName = await (sourceDataset ||\n      promptForDatasetName(prompt, {message: 'Source dataset name:'}))\n    if (!existingDatasets.includes(sourceDatasetName)) {\n      throw new Error(`Source dataset \"${sourceDatasetName}\" doesn't exist`)\n    }\n\n    const targetDatasetName = await (targetDataset ||\n      promptForDatasetName(prompt, {message: 'Target dataset name:'}))\n    if (existingDatasets.includes(targetDatasetName)) {\n      throw new Error(`Target dataset \"${targetDatasetName}\" already exists`)\n    }\n\n    const err = validateDatasetName(targetDatasetName)\n    if (err) {\n      throw new Error(err)\n    }\n\n    try {\n      const response = await client.request<CopyDatasetResponse>({\n        method: 'PUT',\n        uri: `/datasets/${sourceDatasetName}/copy`,\n        body: {\n          targetDataset: targetDatasetName,\n          skipHistory: shouldSkipHistory,\n        },\n      })\n\n      output.print(\n        `Copying dataset ${chalk.green(sourceDatasetName)} to ${chalk.green(targetDatasetName)}...`,\n      )\n\n      if (!shouldSkipHistory) {\n        output.print(\n          `Note: You can run this command with flag '--skip-history'. The flag will reduce copy time in larger datasets.`,\n        )\n      }\n\n      output.print(`Job ${chalk.green(response.jobId)} started`)\n\n      if (flags.detach) {\n        return\n      }\n\n      await followProgress(response.jobId, client, output)\n      output.print(`Job ${chalk.green(response.jobId)} completed`)\n    } catch (error) {\n      if (error.statusCode) {\n        output.print(`${chalk.red(`Dataset copying failed:\\n${error.response.body.message}`)}\\n`)\n      } else {\n        output.print(`${chalk.red(`Dataset copying failed:\\n${error.message}`)}\\n`)\n      }\n    }\n  },\n}\n\nexport default copyDatasetCommand\n","import {type CliCommandDefinition, type CliOutputter, type CliPrompter} from '@sanity/cli'\n\nimport {promptForDatasetName} from '../../actions/dataset/datasetNamePrompt'\nimport {validateDatasetName} from '../../actions/dataset/validateDatasetName'\nimport {debug} from '../../debug'\n\nconst helpText = `\nOptions\n  --visibility <mode> Set visibility for this dataset (public/private)\n\nExamples\n  sanity dataset create\n  sanity dataset create <name>\n  sanity dataset create <name> --visibility private\n`\n\nconst allowedModes = ['private', 'public', 'custom']\n\ninterface CreateFlags {\n  visibility?: 'private' | 'public' | 'custom'\n}\n\nconst createDatasetCommand: CliCommandDefinition<CreateFlags> = {\n  name: 'create',\n  group: 'dataset',\n  signature: '[NAME]',\n  helpText,\n  description: 'Create a new dataset within your project',\n  action: async (args, context) => {\n    const {apiClient, output, prompt} = context\n    const flags = args.extOptions\n    const [dataset] = args.argsWithoutOptions\n    const client = apiClient()\n\n    const nameError = dataset && validateDatasetName(dataset)\n    if (nameError) {\n      throw new Error(nameError)\n    }\n\n    const [datasets, projectFeatures] = await Promise.all([\n      client.datasets.list().then((sets) => sets.map((ds) => ds.name)),\n      client.request({uri: '/features'}),\n    ])\n\n    if (flags.visibility && !allowedModes.includes(flags.visibility)) {\n      throw new Error(`Visibility mode \"${flags.visibility}\" not allowed`)\n    }\n\n    const datasetName = await (dataset || promptForDatasetName(prompt))\n    if (datasets.includes(datasetName)) {\n      throw new Error(`Dataset \"${datasetName}\" already exists`)\n    }\n\n    const canCreatePrivate = projectFeatures.includes('privateDataset')\n    debug('%s create private datasets', canCreatePrivate ? 'Can' : 'Cannot')\n\n    const defaultAclMode = canCreatePrivate ? flags.visibility : 'public'\n    const aclMode = await (defaultAclMode || promptForDatasetVisibility(prompt, output))\n\n    try {\n      await client.datasets.create(datasetName, {aclMode})\n      output.print('Dataset created successfully')\n    } catch (err) {\n      throw new Error(`Dataset creation failed:\\n${err.message}`)\n    }\n  },\n}\n\nasync function promptForDatasetVisibility(prompt: CliPrompter, output: CliOutputter) {\n  const mode = await prompt.single<'public' | 'private'>({\n    type: 'list',\n    message: 'Dataset visibility',\n    choices: [\n      {\n        value: 'public',\n        name: 'Public (world readable)',\n      },\n      {\n        value: 'private',\n        name: 'Private (Authenticated user or token needed)',\n      },\n    ],\n  })\n\n  if (mode === 'private') {\n    output.print(\n      'Please note that while documents are private, assets (files and images) are still public\\n',\n    )\n  }\n\n  return mode\n}\n\nexport default createDatasetCommand\n","export default {\n  name: 'dataset',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Manages datasets, like create or delete, within projects',\n}\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nimport {validateDatasetName} from '../../actions/dataset/validateDatasetName'\n\nconst datasetVisibilityCommand: CliCommandDefinition = {\n  name: 'visibility',\n  group: 'dataset',\n  helpText: '',\n  signature: 'get/set [dataset] [mode]',\n  description: 'Set visibility of a dataset',\n  action: async (args, context) => {\n    const {apiClient, output} = context\n    const [action, ds, aclMode] = args.argsWithoutOptions\n    const client = apiClient()\n\n    if (!client.datasets.edit) {\n      throw new Error('@sanity/cli must be upgraded first:\\n  npm install -g @sanity/cli')\n    }\n\n    if (!action) {\n      throw new Error('Action must be provided (get/set)')\n    }\n\n    if (!['set', 'get'].includes(action)) {\n      throw new Error('Invalid action (only get/set allowed)')\n    }\n\n    if (!ds) {\n      throw new Error('Dataset name must be provided')\n    }\n\n    if (action === 'set' && !aclMode) {\n      throw new Error('Please provide a visibility mode (public/private)')\n    }\n\n    const dataset = `${ds}`\n    const dsError = validateDatasetName(dataset)\n    if (dsError) {\n      throw new Error(dsError)\n    }\n\n    const current = (await client.datasets.list()).find((curr) => curr.name === dataset)\n\n    if (!current) {\n      throw new Error('Dataset not found')\n    }\n\n    if (action === 'get') {\n      output.print(current.aclMode)\n      return\n    }\n\n    if (current.aclMode === aclMode) {\n      output.print(`Dataset already in \"${aclMode}\"-mode`)\n      return\n    }\n\n    if (aclMode === 'private') {\n      output.print(\n        'Please note that while documents are private, assets (files and images) are still public\\n',\n      )\n    }\n\n    await client.datasets.edit(dataset, {aclMode: aclMode as 'public' | 'private'})\n    output.print('Dataset visibility changed')\n  },\n}\n\nexport default datasetVisibilityCommand\n","import {type CliCommandDefinition} from '@sanity/cli'\nimport {hideBin} from 'yargs/helpers'\nimport yargs from 'yargs/yargs'\n\nimport {validateDatasetName} from '../../actions/dataset/validateDatasetName'\n\nconst helpText = `\nOptions\n  --force Do not prompt for delete confirmation - forcefully delete\n\nExamples\n  sanity dataset delete\n  sanity dataset delete my-dataset\n  sanity dataset delete my-dataset --force\n`\n\nfunction parseCliFlags(args: {argv?: string[]}) {\n  return yargs(hideBin(args.argv || process.argv).slice(2)).option('force', {type: 'boolean'}).argv\n}\n\ninterface DeleteDatasetFlags {\n  force?: boolean\n}\n\nconst deleteDatasetCommand: CliCommandDefinition<DeleteDatasetFlags> = {\n  name: 'delete',\n  group: 'dataset',\n  helpText,\n  signature: '[datasetName]',\n  description: 'Delete a dataset within your project',\n  action: async (args, context) => {\n    const {apiClient, prompt, output} = context\n    const {force} = await parseCliFlags(args)\n    const [ds] = args.argsWithoutOptions\n    if (!ds) {\n      throw new Error('Dataset name must be provided')\n    }\n\n    const dataset = `${ds}`\n    const dsError = validateDatasetName(dataset)\n    if (dsError) {\n      throw dsError\n    }\n\n    if (force) {\n      output.warn(`'--force' used: skipping confirmation, deleting dataset \"${dataset}\"`)\n    } else {\n      await prompt.single({\n        type: 'input',\n        message:\n          'Are you ABSOLUTELY sure you want to delete this dataset?\\n  Type the name of the dataset to confirm delete:',\n        filter: (input) => `${input}`.trim(),\n        validate: (input) => {\n          return input === dataset || 'Incorrect dataset name. Ctrl + C to cancel delete.'\n        },\n      })\n    }\n\n    await apiClient().datasets.delete(dataset)\n    output.print('Dataset deleted successfully')\n  },\n}\n\nexport default deleteDatasetCommand\n","import {type CliCommandDefinition, type CliPrompter} from '@sanity/cli'\nimport exportDataset from '@sanity/export'\nimport {absolutify} from '@sanity/util/fs'\nimport fs from 'fs/promises'\nimport path from 'path'\nimport prettyMs from 'pretty-ms'\n\nimport {chooseDatasetPrompt} from '../../actions/dataset/chooseDatasetPrompt'\nimport {validateDatasetName} from '../../actions/dataset/validateDatasetName'\n\nconst noop = () => null\n\nconst helpText = `\nOptions\n  --raw                     Extract only documents, without rewriting asset references\n  --no-assets               Export only non-asset documents and remove references to image assets\n  --no-drafts               Export only published versions of documents\n  --no-compress             Skips compressing tarball entries (still generates a gzip file)\n  --types                   Defines which document types to export\n  --overwrite               Overwrite any file with the same name\n  --asset-concurrency <num> Concurrent number of asset downloads\n\nExamples\n  sanity dataset export moviedb localPath.tar.gz\n  sanity dataset export moviedb assetless.tar.gz --no-assets\n  sanity dataset export staging staging.tar.gz --raw\n  sanity dataset export staging staging.tar.gz --types products,shops\n`\n\ninterface ExportFlags {\n  raw?: boolean\n  assets?: boolean\n  drafts?: boolean\n  compress?: boolean\n  overwrite?: boolean\n  types?: string\n  'asset-concurrency'?: string\n}\n\ninterface ParsedExportFlags {\n  raw?: boolean\n  assets?: boolean\n  drafts?: boolean\n  compress?: boolean\n  overwrite?: boolean\n  types?: string[]\n  assetConcurrency?: number\n}\n\nfunction parseFlags(rawFlags: ExportFlags): ParsedExportFlags {\n  const flags: ParsedExportFlags = {}\n  if (rawFlags.types) {\n    flags.types = `${rawFlags.types}`.split(',')\n  }\n\n  if (rawFlags['asset-concurrency']) {\n    flags.assetConcurrency = parseInt(rawFlags['asset-concurrency'], 10)\n  }\n\n  if (typeof rawFlags.raw !== 'undefined') {\n    flags.raw = Boolean(rawFlags.raw)\n  }\n\n  if (typeof rawFlags.assets !== 'undefined') {\n    flags.assets = Boolean(rawFlags.assets)\n  }\n\n  if (typeof rawFlags.drafts !== 'undefined') {\n    flags.drafts = Boolean(rawFlags.drafts)\n  }\n\n  if (typeof rawFlags.compress !== 'undefined') {\n    flags.compress = Boolean(rawFlags.compress)\n  }\n\n  if (typeof rawFlags.overwrite !== 'undefined') {\n    flags.overwrite = Boolean(rawFlags.overwrite)\n  }\n\n  return flags\n}\n\ninterface ProgressEvent {\n  step: string\n  update?: boolean\n  current: number\n  total: number\n}\n\nconst exportDatasetCommand: CliCommandDefinition<ExportFlags> = {\n  name: 'export',\n  group: 'dataset',\n  signature: '[NAME] [DESTINATION]',\n  description: 'Export dataset to local filesystem as a gzipped tarball',\n  helpText,\n  action: async (args, context) => {\n    const {apiClient, output, chalk, workDir, prompt} = context\n    const client = apiClient()\n    const [targetDataset, targetDestination] = args.argsWithoutOptions\n    const flags = parseFlags(args.extOptions)\n\n    let dataset = targetDataset ? `${targetDataset}` : null\n    if (!dataset) {\n      dataset = await chooseDatasetPrompt(context, {message: 'Select dataset to export'})\n    }\n\n    const dsError = validateDatasetName(dataset)\n    if (dsError) {\n      throw dsError\n    }\n\n    // Verify existence of dataset before trying to export from it\n    const datasets = await client.datasets.list()\n    if (!datasets.find((set) => set.name === dataset)) {\n      throw new Error(`Dataset with name \"${dataset}\" not found`)\n    }\n\n    // Print information about what projectId and dataset it is being exported from\n    const {projectId} = client.config()\n\n    output.print('╭───────────────────────────────────────────────╮')\n    output.print('│                                               │')\n    output.print('│ Exporting from:                               │')\n    output.print(`│ ${chalk.bold('projectId')}: ${chalk.cyan(projectId).padEnd(44)} │`)\n    output.print(`│ ${chalk.bold('dataset')}: ${chalk.cyan(dataset).padEnd(46)} │`)\n    output.print('│                                               │')\n    output.print('╰───────────────────────────────────────────────╯')\n    output.print('')\n\n    let destinationPath = targetDestination\n    if (!destinationPath) {\n      destinationPath = await prompt.single({\n        type: 'input',\n        message: 'Output path:',\n        default: path.join(workDir, `${dataset}.tar.gz`),\n        filter: absolutify,\n      })\n    }\n\n    const outputPath = await getOutputPath(destinationPath, dataset, prompt, flags)\n    if (!outputPath) {\n      output.print('Cancelled')\n      return\n    }\n\n    // If we are dumping to a file, let the user know where it's at\n    if (outputPath !== '-') {\n      output.print(`Exporting dataset \"${chalk.cyan(dataset)}\" to \"${chalk.cyan(outputPath)}\"`)\n    }\n\n    let currentStep = 'Exporting documents...'\n    let spinner = output.spinner(currentStep).start()\n    const onProgress = (progress: ProgressEvent) => {\n      if (progress.step !== currentStep) {\n        spinner.succeed()\n        spinner = output.spinner(progress.step).start()\n      } else if (progress.step === currentStep && progress.update) {\n        spinner.text = `${progress.step} (${progress.current}/${progress.total})`\n      }\n\n      currentStep = progress.step\n    }\n\n    const start = Date.now()\n    try {\n      await exportDataset({\n        client,\n        dataset,\n        outputPath,\n        onProgress,\n        ...flags,\n      })\n      spinner.succeed()\n    } catch (err) {\n      spinner.fail()\n      throw err\n    }\n\n    output.print(`Export finished (${prettyMs(Date.now() - start)})`)\n  },\n}\n\n// eslint-disable-next-line complexity\nasync function getOutputPath(\n  destination: string,\n  dataset: string,\n  prompt: CliPrompter,\n  flags: ParsedExportFlags,\n) {\n  if (destination === '-') {\n    return '-'\n  }\n\n  const dstPath = path.isAbsolute(destination)\n    ? destination\n    : path.resolve(process.cwd(), destination)\n\n  let dstStats = await fs.stat(dstPath).catch(noop)\n  const looksLikeFile = dstStats ? dstStats.isFile() : path.basename(dstPath).indexOf('.') !== -1\n\n  if (!dstStats) {\n    const createPath = looksLikeFile ? path.dirname(dstPath) : dstPath\n\n    await fs.mkdir(createPath, {recursive: true})\n  }\n\n  const finalPath = looksLikeFile ? dstPath : path.join(dstPath, `${dataset}.tar.gz`)\n  dstStats = await fs.stat(finalPath).catch(noop)\n\n  if (!flags.overwrite && dstStats && dstStats.isFile()) {\n    const shouldOverwrite = await prompt.single({\n      type: 'confirm',\n      message: `File \"${finalPath}\" already exists, would you like to overwrite it?`,\n      default: false,\n    })\n\n    if (!shouldOverwrite) {\n      return false\n    }\n  }\n\n  return finalPath\n}\n\nexport default exportDatasetCommand\n","import {type CliCommandContext, type CliCommandDefinition, type CliOutputter} from '@sanity/cli'\nimport sanityImport from '@sanity/import'\nimport {createReadStream} from 'fs'\nimport fs from 'fs/promises'\nimport {getIt} from 'get-it'\nimport {promise} from 'get-it/middleware'\nimport padStart from 'lodash/padStart'\nimport path from 'path'\nimport prettyMs from 'pretty-ms'\n\nimport {chooseDatasetPrompt} from '../../actions/dataset/chooseDatasetPrompt'\nimport {validateDatasetName} from '../../actions/dataset/validateDatasetName'\nimport {debug} from '../../debug'\n\nconst yellow = (str: string) => `\\u001b[33m${str}\\u001b[39m`\n\nconst helpText = `\nOptions\n  --missing On duplicate document IDs, skip importing document in question\n  --replace On duplicate document IDs, replace existing document with imported document\n  --allow-failing-assets Skip assets that cannot be fetched/uploaded\n  --replace-assets Skip reuse of existing assets\n  --skip-cross-dataset-references Skips references to other datasets\n\nRarely used options (should generally not be used)\n  --allow-assets-in-different-dataset Allow asset documents to reference different project/dataset\n  --allow-system-documents Allow system documents like dataset permissions and custom retention to be imported\n\nExamples\n  # Import \"moviedb.ndjson\" from the current directory to the dataset called \"moviedb\"\n  sanity dataset import moviedb.ndjson moviedb\n\n  # Import \"moviedb.tar.gz\" from the current directory to the dataset called \"moviedb\",\n  # replacing any documents encountered that have the same document IDs\n  sanity dataset import moviedb.tar.gz moviedb --replace\n\n  # Import from a folder containing an ndjson file, such as an extracted tarball\n  # retrieved through \"sanity dataset export\".\n  sanity dataset import ~/some/folder moviedb\n\n  # Import from a remote URL. Will download and extract the tarball to a temporary\n  # location before importing it.\n  sanity dataset import https://some.url/moviedb.tar.gz moviedb --replace\n`\n\ninterface ImportFlags {\n  'allow-assets-in-different-dataset'?: boolean\n  'allow-failing-assets'?: boolean\n  'asset-concurrency'?: boolean\n  'replace-assets'?: boolean\n  'skip-cross-dataset-references'?: boolean\n  'allow-system-documents'?: boolean\n  replace?: boolean\n  missing?: boolean\n}\n\ninterface ParsedImportFlags {\n  allowAssetsInDifferentDataset?: boolean\n  allowFailingAssets?: boolean\n  assetConcurrency?: boolean\n  skipCrossDatasetReferences?: boolean\n  allowSystemDocuments?: boolean\n  replaceAssets?: boolean\n  replace?: boolean\n  missing?: boolean\n}\n\ninterface ProgressEvent {\n  step: string\n  total?: number\n  current?: number\n}\n\ninterface ImportWarning {\n  type?: string\n  url?: string\n}\n\nfunction toBoolIfSet(flag: unknown): boolean | undefined {\n  return typeof flag === 'undefined' ? undefined : Boolean(flag)\n}\n\nfunction parseFlags(rawFlags: ImportFlags): ParsedImportFlags {\n  const allowAssetsInDifferentDataset = toBoolIfSet(rawFlags['allow-assets-in-different-dataset'])\n  const allowFailingAssets = toBoolIfSet(rawFlags['allow-failing-assets'])\n  const assetConcurrency = toBoolIfSet(rawFlags['asset-concurrency'])\n  const replaceAssets = toBoolIfSet(rawFlags['replace-assets'])\n  const skipCrossDatasetReferences = toBoolIfSet(rawFlags['skip-cross-dataset-references'])\n  const allowSystemDocuments = toBoolIfSet(rawFlags['allow-system-documents'])\n  const replace = toBoolIfSet(rawFlags.replace)\n  const missing = toBoolIfSet(rawFlags.missing)\n  return {\n    allowAssetsInDifferentDataset,\n    allowFailingAssets,\n    assetConcurrency,\n    skipCrossDatasetReferences,\n    allowSystemDocuments,\n    replaceAssets,\n    replace,\n    missing,\n  }\n}\n\nconst importDatasetCommand: CliCommandDefinition = {\n  name: 'import',\n  group: 'dataset',\n  signature: '[FILE | FOLDER | URL] [TARGET_DATASET]',\n  description: 'Import documents to given dataset from either an ndjson file or a gzipped tarball',\n  helpText,\n  // eslint-disable-next-line max-statements\n  action: async (args, context) => {\n    const {apiClient, output, chalk, fromInitCommand} = context\n    const flags = parseFlags(args.extOptions)\n    const {\n      allowAssetsInDifferentDataset,\n      allowFailingAssets,\n      assetConcurrency,\n      skipCrossDatasetReferences,\n      allowSystemDocuments,\n      replaceAssets,\n    } = flags\n\n    const operation = getMutationOperation(args.extOptions)\n    const client = apiClient()\n\n    const [file, target] = args.argsWithoutOptions\n    if (!file) {\n      throw new Error(\n        `Source file name and target dataset must be specified (\"sanity dataset import ${chalk.bold(\n          '[file]',\n        )} [dataset]\")`,\n      )\n    }\n\n    const targetDataset = await determineTargetDataset(target, context)\n    debug(`Target dataset has been set to \"${targetDataset}\"`)\n\n    const isUrl = /^https?:\\/\\//i.test(file)\n    let inputStream\n    let assetsBase\n    let sourceIsFolder = false\n\n    if (isUrl) {\n      debug('Input is a URL, streaming from source URL')\n      inputStream = await getUrlStream(file)\n    } else {\n      const sourceFile = path.resolve(process.cwd(), file)\n      const fileStats = await fs.stat(sourceFile).catch(() => null)\n      if (!fileStats) {\n        throw new Error(`${sourceFile} does not exist or is not readable`)\n      }\n\n      sourceIsFolder = fileStats.isDirectory()\n      if (sourceIsFolder) {\n        inputStream = sourceFile\n      } else {\n        assetsBase = path.dirname(sourceFile)\n        inputStream = await createReadStream(sourceFile)\n      }\n    }\n\n    const importClient = client.clone().config({dataset: targetDataset})\n\n    // Print information about what projectId and dataset it is being imported to\n    const {projectId, dataset} = importClient.config()\n\n    output.print('╭───────────────────────────────────────────────╮')\n    output.print('│                                               │')\n    output.print('│ Importing to:                                 │')\n    output.print(`│ ${chalk.bold('projectId')}: ${chalk.cyan(projectId).padEnd(44)} │`)\n    output.print(`│ ${chalk.bold('dataset')}: ${chalk.cyan(dataset).padEnd(46)} │`)\n    output.print('│                                               │')\n    output.print('╰───────────────────────────────────────────────╯')\n    output.print('')\n\n    let currentStep: string | undefined\n    let currentProgress: ReturnType<CliOutputter['spinner']> | undefined\n    let stepStart: number | undefined\n    let spinInterval: ReturnType<typeof setInterval> | null = null\n    let percent: string | undefined\n\n    function onProgress(opts: ProgressEvent) {\n      const lengthComputable = opts.total\n      const sameStep = opts.step == currentStep\n      percent = getPercentage(opts)\n\n      if (lengthComputable && opts.total === opts.current) {\n        if (spinInterval) {\n          clearInterval(spinInterval)\n        }\n        spinInterval = null\n      }\n\n      if (sameStep) {\n        return\n      }\n\n      // Moved to a new step\n      const prevStep = currentStep\n      const prevStepStart = stepStart || Date.now()\n      stepStart = Date.now()\n      currentStep = opts.step\n\n      if (currentProgress && currentProgress.succeed) {\n        const timeSpent = prettyMs(Date.now() - prevStepStart, {\n          secondsDecimalDigits: 2,\n        })\n        currentProgress.text = `[100%] ${prevStep} (${timeSpent})`\n        currentProgress.succeed()\n      }\n\n      currentProgress = output.spinner(`[0%] ${opts.step} (0.00s)`).start()\n\n      if (spinInterval) {\n        clearInterval(spinInterval)\n        spinInterval = null\n      }\n\n      spinInterval = setInterval(() => {\n        const timeSpent = prettyMs(Date.now() - prevStepStart, {\n          secondsDecimalDigits: 2,\n        })\n\n        if (currentProgress) {\n          currentProgress.text = `${percent}${opts.step} (${timeSpent})`\n        }\n      }, 60)\n    }\n\n    function endTask({success}: {success: boolean}) {\n      if (spinInterval) {\n        clearInterval(spinInterval)\n      }\n\n      spinInterval = null\n\n      if (success && stepStart && currentProgress) {\n        const timeSpent = prettyMs(Date.now() - stepStart, {\n          secondsDecimalDigits: 2,\n        })\n        currentProgress.text = `[100%] ${currentStep} (${timeSpent})`\n        currentProgress.succeed()\n      } else if (currentProgress) {\n        currentProgress.fail()\n      }\n    }\n\n    // Start the import!\n    try {\n      const {numDocs, warnings} = await sanityImport(inputStream, {\n        client: importClient,\n        assetsBase,\n        operation,\n        onProgress,\n        allowFailingAssets,\n        allowAssetsInDifferentDataset,\n        skipCrossDatasetReferences,\n        allowSystemDocuments,\n        assetConcurrency,\n        replaceAssets,\n      })\n\n      endTask({success: true})\n\n      output.print('Done! Imported %d documents to dataset \"%s\"\\n', numDocs, targetDataset)\n      printWarnings(warnings, output)\n    } catch (err) {\n      endTask({success: false})\n\n      const isNonRefConflict =\n        !fromInitCommand &&\n        err.response &&\n        err.response.statusCode === 409 &&\n        err.step !== 'strengthen-references'\n\n      if (!isNonRefConflict) {\n        throw err\n      }\n\n      const message = [\n        err.message,\n        '',\n        'You probably want either:',\n        ' --replace (replace existing documents with same IDs)',\n        ' --missing (only import documents that do not already exist)',\n        '',\n      ].join('\\n')\n\n      // @todo SUBCLASS ERROR?\n      const error = new Error(message) as any\n      error.details = err.details\n      error.response = err.response\n      error.responseBody = err.responseBody\n\n      throw error\n    }\n  },\n}\n\nasync function determineTargetDataset(target: string, context: CliCommandContext) {\n  const {apiClient, output, prompt} = context\n  const client = apiClient()\n\n  if (target) {\n    const dsError = validateDatasetName(target)\n    if (dsError) {\n      throw new Error(dsError)\n    }\n  }\n\n  debug('Fetching available datasets')\n  const spinner = output.spinner('Fetching available datasets').start()\n  const datasets = await client.datasets.list()\n  spinner.succeed('[100%] Fetching available datasets')\n\n  let targetDataset = target ? `${target}` : null\n  if (!targetDataset) {\n    targetDataset = await chooseDatasetPrompt(context, {\n      message: 'Select target dataset',\n      allowCreation: true,\n    })\n  } else if (!datasets.find((dataset) => dataset.name === targetDataset)) {\n    debug('Target dataset does not exist, prompting for creation')\n    const shouldCreate = await prompt.single({\n      type: 'confirm',\n      message: `Dataset \"${targetDataset}\" does not exist, would you like to create it?`,\n      default: true,\n    })\n\n    if (!shouldCreate) {\n      throw new Error(`Dataset \"${targetDataset}\" does not exist`)\n    }\n\n    await client.datasets.create(targetDataset)\n  }\n\n  return targetDataset\n}\n\nfunction getMutationOperation(flags: ParsedImportFlags) {\n  const {replace, missing} = flags\n  if (replace && missing) {\n    throw new Error('Cannot use both --replace and --missing')\n  }\n\n  if (flags.replace) {\n    return 'createOrReplace'\n  }\n\n  if (flags.missing) {\n    return 'createIfNotExists'\n  }\n\n  return 'create'\n}\n\nfunction getPercentage(opts: ProgressEvent) {\n  if (!opts.total || typeof opts.current === 'undefined') {\n    return ''\n  }\n\n  const percent = Math.floor((opts.current / opts.total) * 100)\n  return `[${padStart(`${percent}`, 3, ' ')}%] `\n}\n\nfunction getUrlStream(url: string) {\n  const request = getIt([promise({onlyBody: true})])\n  return request({url, stream: true})\n}\n\nfunction printWarnings(warnings: ImportWarning[], output: CliOutputter) {\n  const assetFails = warnings.filter((warn) => warn.type === 'asset')\n\n  if (!assetFails.length) {\n    return\n  }\n\n  const warn = (output.warn || output.print).bind(output)\n\n  warn(yellow('⚠ Failed to import the following %s:'), assetFails.length > 1 ? 'assets' : 'asset')\n\n  warnings.forEach((warning) => {\n    warn(`  ${warning.url}`)\n  })\n}\n\nexport default importDatasetCommand\n","import {type CliCommandAction} from '@sanity/cli'\n\nimport * as aliasClient from './datasetAliasesClient'\nimport {ALIAS_PREFIX} from './datasetAliasesClient'\n\nexport const listAliasesHandler: CliCommandAction = async (args, context) => {\n  const {apiClient, output} = context\n  const client = apiClient()\n\n  const aliases = await aliasClient.listAliases(client)\n  output.print(\n    aliases\n      .map((set) => `${ALIAS_PREFIX}${set.name} -> ${set.datasetName || '<unlinked>'}`)\n      .join('\\n'),\n  )\n}\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nimport {listAliasesHandler} from './alias/listAliasesHandler'\n\nconst listDatasetsCommand: CliCommandDefinition = {\n  name: 'list',\n  group: 'dataset',\n  helpText: '',\n  signature: '',\n  description: 'List datasets of your project',\n  action: async (args, context) => {\n    const {apiClient, output} = context\n    const client = apiClient()\n    const datasets = await client.datasets.list()\n    output.print(datasets.map((set) => set.name).join('\\n'))\n\n    // Print alias list\n    await listAliasesHandler(args, context)\n  },\n}\n\nexport default listDatasetsCommand\n","import {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliCommandDefinition,\n} from '@sanity/cli'\n\nimport {type DeployStudioActionFlags} from '../../actions/deploy/deployAction'\n\nconst helpText = `\nOptions\n  --source-maps Enable source maps for built bundles (increases size of bundle)\n  --no-minify Skip minifying built JavaScript (speeds up build, increases size of bundle)\n  --no-build Don't build the studio prior to deploy, instead deploying the version currently in \\`dist/\\`\n\nExamples\n  sanity deploy\n  sanity deploy --no-minify --source-maps\n`\n\nconst deployCommand: CliCommandDefinition = {\n  name: 'deploy',\n  signature: '[SOURCE_DIR] [--no-build]  [--source-maps] [--no-minify]',\n  description: 'Builds and deploys Sanity Studio to Sanity hosting',\n  action: async (\n    args: CliCommandArguments<DeployStudioActionFlags>,\n    context: CliCommandContext,\n  ) => {\n    const mod = await import('../../actions/deploy/deployAction')\n\n    return mod.default(args, context)\n  },\n  helpText,\n}\n\nexport default deployCommand\n","import {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliCommandDefinition,\n} from '@sanity/cli'\n\nconst helpText = `\nExamples\n  sanity undeploy\n`\n\nconst undeployCommand: CliCommandDefinition = {\n  name: 'undeploy',\n  signature: '',\n  description: 'Removes the deployed Sanity Studio from Sanity hosting',\n  action: async (\n    args: CliCommandArguments<Record<string, unknown>>,\n    context: CliCommandContext,\n  ) => {\n    const mod = await import('../../actions/deploy/undeployAction')\n\n    return mod.default(args, context)\n  },\n  helpText,\n}\n\nexport default undeployCommand\n","import {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliCommandDefinition,\n} from '@sanity/cli'\n\nimport {type StartDevServerCommandFlags} from '../../actions/dev/devAction'\n\nconst helpText = `\nNotes\n  Changing the hostname or port number might require a new entry to the CORS-origins allow list.\n\nOptions\n  --port <port> TCP port to start server on. [default: 3333]\n  --host <host> The local network interface at which to listen. [default: \"127.0.0.1\"]\n\nExamples\n  sanity dev --host=0.0.0.0\n  sanity dev --port=1942\n`\n\nconst devCommand: CliCommandDefinition = {\n  name: 'dev',\n  signature: '[--port <port>] [--host <host>]',\n  description: 'Starts a local dev server for Sanity Studio with live reloading',\n  action: async (\n    args: CliCommandArguments<StartDevServerCommandFlags>,\n    context: CliCommandContext,\n  ) => {\n    const devAction = await getDevAction()\n\n    return devAction(args, context)\n  },\n  helpText,\n}\n\nexport async function getDevAction(): Promise<\n  (\n    args: CliCommandArguments<StartDevServerCommandFlags>,\n    context: CliCommandContext,\n  ) => Promise<void>\n> {\n  // NOTE: in dev-mode we want to include from `src` so we need to use `.ts` extension\n  // NOTE: this `if` statement is not included in the output bundle\n  if (__DEV__) {\n    // eslint-disable-next-line import/extensions,@typescript-eslint/consistent-type-imports\n    const mod: typeof import('../../actions/dev/devAction') = require('../../actions/dev/devAction.ts')\n\n    return mod.default\n  }\n\n  const mod = await import('../../actions/dev/devAction')\n\n  return mod.default\n}\n\nexport default devCommand\n","import {type CliCommandDefinition} from '@sanity/cli'\nimport {\n  type IdentifiedSanityDocumentStub,\n  type MultipleMutationResult,\n  type Mutation,\n  type SanityClient,\n} from '@sanity/client'\nimport {uuid} from '@sanity/uuid'\nimport chokidar from 'chokidar'\nimport execa from 'execa'\nimport fs from 'fs/promises'\nimport json5 from 'json5'\nimport {isEqual, isPlainObject, noop} from 'lodash'\nimport os from 'os'\nimport path from 'path'\n\ntype MutationOperationName = 'create' | 'createOrReplace' | 'createIfNotExists'\n\ninterface CreateFlags {\n  dataset?: string\n  replace?: boolean\n  missing?: boolean\n  watch?: boolean\n  json5?: boolean\n  id?: string\n}\n\nconst helpText = `\nOptions\n  --replace On duplicate document IDs, replace existing document with specified document(s)\n  --missing On duplicate document IDs, don't modify the target document(s)\n  --watch   Write the documents whenever the target file or buffer changes\n  --json5   Use JSON5 file type to allow a \"simplified\" version of JSON\n  --id <id> Specify a document ID to use. Will fetch remote document ID and populate editor.\n  --dataset NAME to override dataset\n\nExamples\n  # Create the document specified in \"myDocument.json\".\n  sanity documents create myDocument.json\n\n  # Open configured $EDITOR and create the specified document(s)\n  sanity documents create\n\n  # Fetch document with the ID \"myDocId\" and open configured $EDITOR with the\n  # current document content (if any). Replace document with the edited version\n  # when the editor closes\n  sanity documents create --id myDocId --replace\n\n  # Open configured $EDITOR and replace the document with the given content\n  # on each save. Use JSON5 file extension and parser for simplified syntax.\n  sanity documents create --id myDocId --watch --replace --json5\n`\n\nconst createDocumentsCommand: CliCommandDefinition<CreateFlags> = {\n  name: 'create',\n  group: 'documents',\n  signature: '[FILE]',\n  helpText,\n  description: 'Create one or more documents',\n  // eslint-disable-next-line complexity\n  action: async (args, context) => {\n    const {apiClient, output} = context\n    const {replace, missing, watch, id, dataset} = args.extOptions\n    const [file] = args.argsWithoutOptions\n    const useJson5 = args.extOptions.json5\n    const client = dataset ? apiClient().clone().config({dataset}) : apiClient()\n\n    if (replace && missing) {\n      throw new Error('Cannot use both --replace and --missing')\n    }\n\n    if (id && file) {\n      throw new Error('Cannot use --id when specifying a file path')\n    }\n\n    let operation: MutationOperationName = 'create'\n    if (replace || missing) {\n      operation = replace ? 'createOrReplace' : 'createIfNotExists'\n    }\n\n    if (file) {\n      const contentPath = path.resolve(process.cwd(), file)\n      const content = json5.parse(await fs.readFile(contentPath, 'utf8'))\n      const result = await writeDocuments(content, operation, client)\n      output.print(getResultMessage(result, operation))\n      return\n    }\n\n    // Create a temporary file and use that as source, opening an editor on it\n    const docId = id || uuid()\n    const ext = useJson5 ? 'json5' : 'json'\n    const tmpFile = path.join(os.tmpdir(), 'sanity-cli', `${docId}.${ext}`)\n    const stringify = useJson5 ? json5.stringify : JSON.stringify\n    const defaultValue = (id && (await client.getDocument(id))) || {_id: docId, _type: 'specify-me'}\n    await fs.mkdir(path.join(os.tmpdir(), 'sanity-cli'), {recursive: true})\n    await fs.writeFile(tmpFile, stringify(defaultValue, null, 2), 'utf8')\n\n    const editor = getEditor()\n    if (watch) {\n      // If we're in watch mode, we want to run the creation on each change (if it validates)\n      registerUnlinkOnSigInt(tmpFile)\n      output.print(`Watch mode: ${tmpFile}`)\n      output.print('Watch mode: Will write documents on each save.')\n      output.print('Watch mode: Press Ctrl + C to cancel watch mode.')\n      chokidar.watch(tmpFile).on('change', () => {\n        output.print('')\n        return readAndPerformCreatesFromFile(tmpFile)\n      })\n      execa(editor.bin, editor.args.concat(tmpFile), {stdio: 'inherit'})\n    } else {\n      // While in normal mode, we just want to wait for the editor to close and run the thing once\n      execa.sync(editor.bin, editor.args.concat(tmpFile), {stdio: 'inherit'})\n      await readAndPerformCreatesFromFile(tmpFile)\n      await fs.unlink(tmpFile).catch(noop)\n    }\n\n    async function readAndPerformCreatesFromFile(filePath: string) {\n      let content\n      try {\n        content = json5.parse(await fs.readFile(filePath, 'utf8'))\n      } catch (err) {\n        output.error(`Failed to read input: ${err.message}`)\n        return\n      }\n\n      if (isEqual(content, defaultValue)) {\n        output.print('Value not modified, doing nothing.')\n        output.print('Modify document to trigger creation.')\n        return\n      }\n\n      try {\n        const writeResult = await writeDocuments(content, operation, client)\n        output.print(getResultMessage(writeResult, operation))\n      } catch (err) {\n        output.error(`Failed to write documents: ${err.message}`)\n        if (err.message.includes('already exists')) {\n          output.error('Perhaps you want to use `--replace` or `--missing`?')\n        }\n      }\n    }\n  },\n}\n\nfunction registerUnlinkOnSigInt(tmpFile: string) {\n  process.on('SIGINT', async () => {\n    await fs.unlink(tmpFile).catch(noop)\n    // eslint-disable-next-line no-process-exit\n    process.exit(130)\n  })\n}\n\nfunction writeDocuments(\n  documents: {_id?: string; _type: string} | {_id?: string; _type: string}[],\n  operation: MutationOperationName,\n  client: SanityClient,\n) {\n  const docs = Array.isArray(documents) ? documents : [documents]\n  if (docs.length === 0) {\n    throw new Error('No documents provided')\n  }\n\n  const mutations = docs.map((doc, index): Mutation => {\n    validateDocument(doc, index, docs)\n    if (operation === 'create') {\n      return {create: doc}\n    }\n\n    if (operation === 'createIfNotExists') {\n      if (isIdentifiedSanityDocument(doc)) {\n        return {createIfNotExists: doc}\n      }\n\n      throw new Error(`Missing required _id attribute for ${operation}`)\n    }\n\n    if (operation === 'createOrReplace') {\n      if (isIdentifiedSanityDocument(doc)) {\n        return {createOrReplace: doc}\n      }\n\n      throw new Error(`Missing required _id attribute for ${operation}`)\n    }\n\n    throw new Error(`Unsupported operation ${operation}`)\n  })\n\n  return client.transaction(mutations).commit()\n}\n\nfunction validateDocument(doc: unknown, index: number, arr: unknown[]) {\n  const isSingle = arr.length === 1\n\n  if (!isPlainObject(doc)) {\n    throw new Error(getErrorMessage('must be an object', index, isSingle))\n  }\n\n  if (!isSanityDocumentish(doc)) {\n    throw new Error(getErrorMessage('must have a `_type` property of type string', index, isSingle))\n  }\n}\n\nfunction isSanityDocumentish(doc: unknown): doc is {_type: string} {\n  return (\n    doc !== null &&\n    typeof doc === 'object' &&\n    '_type' in doc &&\n    typeof (doc as any)._type === 'string'\n  )\n}\n\nfunction isIdentifiedSanityDocument(doc: unknown): doc is IdentifiedSanityDocumentStub {\n  return isSanityDocumentish(doc) && '_id' in doc\n}\n\nfunction getErrorMessage(message: string, index: number, isSingle: boolean): string {\n  return isSingle ? `Document ${message}` : `Document at index ${index} ${message}`\n}\n\nfunction getResultMessage(\n  result: MultipleMutationResult,\n  operation: MutationOperationName,\n): string {\n  const joiner = '\\n  - '\n  if (operation === 'createOrReplace') {\n    return `Upserted:\\n  - ${result.results.map((res) => res.id).join(joiner)}`\n  }\n\n  if (operation === 'create') {\n    return `Created:\\n  - ${result.results.map((res) => res.id).join(joiner)}`\n  }\n\n  // \"Missing\" (createIfNotExists)\n  const created: string[] = []\n  const skipped: string[] = []\n  for (const res of result.results) {\n    if (res.operation === 'update') {\n      skipped.push(res.id)\n    } else {\n      created.push(res.id)\n    }\n  }\n\n  if (created.length > 0 && skipped.length > 0) {\n    return [\n      `Created:\\n  - ${created.join(joiner)}`,\n      `Skipped (already exists):${joiner}${skipped.join(joiner)}`,\n    ].join('\\n\\n')\n  } else if (created.length > 0) {\n    return `Created:\\n  - ${created.join(joiner)}`\n  }\n\n  return `Skipped (already exists):\\n  - ${skipped.join(joiner)}`\n}\n\nfunction getEditor() {\n  const defaultEditor = /^win/.test(process.platform) ? 'notepad' : 'vim'\n  // eslint-disable-next-line no-process-env\n  const editor = process.env.VISUAL || process.env.EDITOR || defaultEditor\n  const args = editor.split(/\\s+/)\n  const bin = args.shift() || ''\n  return {bin, args}\n}\n\nexport default createDocumentsCommand\n","import {type CliCommandDefinition} from '@sanity/cli'\nimport pluralize from 'pluralize-esm'\n\nconst helpText = `\nDelete a document from the projects configured dataset\n\nOptions\n  --dataset NAME to override dataset\n\nExample\n  # Delete the document with the ID \"myDocId\"\n  sanity documents delete myDocId\n\n  # ID wrapped in double or single quote works equally well\n  sanity documents delete 'myDocId'\n\n  # Delete document with ID \"someDocId\" from dataset \"blog\"\n  sanity documents delete --dataset=blog someDocId\n\n  # Delete the document with ID \"doc1\" and \"doc2\"\n  sanity documents delete doc1 doc2\n`\n\ninterface DeleteFlags {\n  dataset?: string\n}\n\nconst deleteDocumentsCommand: CliCommandDefinition<DeleteFlags> = {\n  name: 'delete',\n  group: 'documents',\n  signature: '[ID] [...IDS]',\n  helpText,\n  description: 'Delete a document by ID',\n  action: async (args, context) => {\n    const {apiClient, output, chalk} = context\n    const {dataset} = args.extOptions\n    const ids = args.argsWithoutOptions.map((str) => `${str}`)\n\n    if (!ids.length) {\n      throw new Error('Document ID must be specified')\n    }\n\n    const client = dataset ? apiClient().clone().config({dataset}) : apiClient()\n\n    const transaction = ids.reduce((trx, id) => trx.delete(id), client.transaction())\n    try {\n      const {results} = await transaction.commit()\n      const deleted = results.filter((res) => res.operation === 'delete').map((res) => res.id)\n      const notFound = ids.filter((id) => !deleted.includes(id))\n      if (deleted.length > 0) {\n        output.print(`Deleted ${deleted.length} ${pluralize('document', deleted.length)}`)\n      }\n\n      if (notFound.length > 0) {\n        output.error(\n          chalk.red(`${pluralize('Document', notFound.length)} not found: ${notFound.join(', ')}`),\n        )\n      }\n    } catch (err) {\n      throw new Error(`Failed to delete ${pluralize('document', ids.length)}:\\n${err.message}`)\n    }\n  },\n}\n\nexport default deleteDocumentsCommand\n","import {type CliCommandGroupDefinition} from '@sanity/cli'\n\nconst documentsGroup: CliCommandGroupDefinition = {\n  name: 'documents',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Manages documents in your Sanity Content Lake datasets',\n}\n\nexport default documentsGroup\n","import {type CliCommandContext} from '@sanity/cli'\nimport tokenize, {type LexerToken} from 'json-lexer'\n\ninterface KeyToken {\n  type: 'key'\n  value: string\n  raw: string\n}\n\ntype ExtendedLexerToken = LexerToken | KeyToken\n\nconst identity = (inp: string): string => inp\n\nexport function colorizeJson(input: unknown, chalk: CliCommandContext['chalk']): string {\n  const formatters: Record<ExtendedLexerToken['type'], (str: string) => string> = {\n    punctuator: chalk.white,\n    key: chalk.white,\n    string: chalk.green,\n    number: chalk.yellow,\n    literal: chalk.bold,\n    whitespace: identity,\n  }\n\n  const json = JSON.stringify(input, null, 2)\n\n  return tokenize(json)\n    .map((token, i, arr): ExtendedLexerToken => {\n      // Note how the following only works because we pretty-print the JSON\n      const prevToken = i === 0 ? token : arr[i - 1]\n      if (\n        token.type === 'string' &&\n        prevToken.type === 'whitespace' &&\n        /^\\n\\s+$/.test(prevToken.value)\n      ) {\n        return {...token, type: 'key'}\n      }\n\n      return token\n    })\n    .map((token) => {\n      const formatter = formatters[token.type] || identity\n      return formatter(token.raw)\n    })\n    .join('')\n}\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nimport {colorizeJson} from '../../util/colorizeJson'\n\nconst helpText = `\nGet and print a document from the projects configured dataset\n\nOptions\n  --pretty colorized JSON output\n  --dataset NAME to override dataset\n\nExamples\n  # Get the document with the ID \"myDocId\"\n  sanity documents get myDocId\n\n  # ID wrapped in double or single quote works equally well\n  sanity documents get 'myDocId'\n`\n\ninterface GetDocumentFlags {\n  pretty?: boolean\n  dataset?: string\n}\n\nconst getDocumentsCommand: CliCommandDefinition<GetDocumentFlags> = {\n  name: 'get',\n  group: 'documents',\n  signature: '[DOCUMENT_ID]',\n  helpText,\n  description: 'Get and print a document by ID',\n  action: async (args, context) => {\n    const {apiClient, output, chalk} = context\n    const {pretty, dataset} = args.extOptions\n    const [docId] = args.argsWithoutOptions.map((str) => `${str}`)\n\n    if (!docId) {\n      throw new Error('Document ID must be specified')\n    }\n\n    const client = dataset ? apiClient().clone().config({dataset}) : apiClient()\n\n    try {\n      const doc = await client.getDocument(docId)\n      if (!doc) {\n        throw new Error(`Document ${docId} not found`)\n      }\n\n      output.print(pretty ? colorizeJson(doc, chalk) : JSON.stringify(doc, null, 2))\n    } catch (err) {\n      throw new Error(`Failed to fetch document:\\n${err.message}`)\n    }\n  },\n}\n\nexport default getDocumentsCommand\n","import {type CliCommandArguments, type CliCommandContext} from '@sanity/cli'\nimport {hideBin} from 'yargs/helpers'\nimport yargs from 'yargs/yargs'\n\nimport {colorizeJson} from '../../util/colorizeJson'\n\nconst defaultApiVersion = 'v2022-06-01'\n\nconst helpText = `\nRun a query against the projects configured dataset\n\nOptions\n  --pretty colorized JSON output\n  --dataset NAME to override dataset\n  --project PROJECT to override project ID\n  --anonymous Send the query without any authorization token\n  --api-version API version to use (defaults to \\`${defaultApiVersion}\\`)\n\nEnvironment variables\n  \\`SANITY_CLI_QUERY_API_VERSION\\` - will use the defined API version,\n  unless \\`--api-version\\` is specified.\n\nExamples\n  # Fetch 5 documents of type \"movie\"\n  sanity documents query '*[_type == \"movie\"][0..4]'\n\n  # Fetch title of the oldest movie in the dataset named \"staging\"\n  sanity documents query '*[_type == \"movie\"]|order(releaseDate asc)[0]{title}' --dataset staging\n\n  # Use API version v2021-06-07 and do a query\n  sanity documents query --api-version v2021-06-07 '*[_id == \"header\"] { \"headerText\": pt::text(body) }'\n`\n\ninterface CliQueryCommandFlags {\n  pretty?: boolean\n  anonymous?: boolean\n  dataset?: string\n  project?: string\n  apiVersion?: string\n}\n\nexport default {\n  name: 'query',\n  group: 'documents',\n  signature: '[QUERY]',\n  helpText,\n  description: 'Query for documents',\n  action: async (\n    args: CliCommandArguments<CliQueryCommandFlags>,\n    context: CliCommandContext,\n  ): Promise<void> => {\n    // Reparsing arguments for improved control of flags\n    const {\n      pretty,\n      dataset,\n      project,\n      anonymous,\n      'api-version': apiVersion,\n    } = await parseCliFlags(args)\n    const {apiClient, output, chalk, cliConfig} = context\n    const [query] = args.argsWithoutOptions\n\n    if (!query) {\n      throw new Error('Query must be specified')\n    }\n\n    if (!apiVersion) {\n      output.warn(chalk.yellow(`--api-version not specified, using \\`${defaultApiVersion}\\``))\n    }\n\n    const requireDataset = !dataset\n    const requireProject = !project\n    const requireUser = !anonymous\n\n    if (requireProject && !cliConfig?.api?.projectId) {\n      throw new Error(\n        'No project configured in CLI config - either configure one, or use `--project` flag',\n      )\n    }\n\n    if (requireDataset && !cliConfig?.api?.dataset) {\n      throw new Error(\n        'No dataset configured in CLI config - either configure one, or use `--dataset` flag',\n      )\n    }\n\n    const baseClient = apiClient({requireProject, requireUser}).clone()\n    const {dataset: originalDataset, projectId: originalProjectId} = baseClient.config()\n\n    const client = baseClient.config({\n      projectId: project || originalProjectId,\n      dataset: dataset || originalDataset,\n      apiVersion: apiVersion || defaultApiVersion,\n    })\n\n    try {\n      const docs = await client.fetch(query)\n      if (!docs) {\n        throw new Error('Query returned no results')\n      }\n\n      output.print(pretty ? colorizeJson(docs, chalk) : JSON.stringify(docs, null, 2))\n    } catch (err) {\n      throw new Error(`Failed to run query:\\n${err.message}`)\n    }\n  },\n}\n\nfunction parseCliFlags(args: CliCommandArguments<CliQueryCommandFlags>) {\n  // eslint-disable-next-line no-process-env\n  const fallbackApiVersion = process.env.SANITY_CLI_QUERY_API_VERSION\n  return yargs(hideBin(args.argv || process.argv).slice(2))\n    .option('pretty', {type: 'boolean', default: false})\n    .option('dataset', {type: 'string'})\n    .option('project', {type: 'string'})\n    .option('anonymous', {type: 'boolean', default: false})\n    .option('api-version', {type: 'string', default: fallbackApiVersion}).argv\n}\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nconst description = `Downloads and validates all document specified in a workspace`\n\nconst helpText = `\nOptions\n  -y, --yes Skips the first confirmation prompt.\n  --workspace <name> The name of the workspace to use when downloading and validating all documents.\n  --dataset <name> Override the dataset used. By default, this is derived from the given workspace.\n  --file <filepath> Provide a path to either an .ndjson file or a tarball containing an .ndjson file.\n  --format <pretty|ndjson|json> The output format used to print the found validation markers and report progress.\n  --level <error|warning|info> The minimum level reported out. Defaults to warning.\n  --max-custom-validation-concurrency <number> Specify how many custom validators can run concurrently. Defaults to 5.\n\nExamples\n  # Validates all documents in a Sanity project with more than one workspace\n  sanity documents validate --workspace default\n\n  # Override the dataset specified in the workspace\n  sanity documents validate --workspace default --dataset staging\n\n  # Save the results of the report into a file\n  sanity documents validate > report.txt\n\n  # Report out info level validation markers too\n  sanity documents validate --level info\n`\n\nconst validateDocumentsCommand: CliCommandDefinition = {\n  name: 'validate',\n  group: 'documents',\n  signature: '',\n  description,\n  helpText,\n  action: async (args, context) => {\n    const mod = await import('../../actions/validation/validateAction')\n\n    return mod.default(args, context)\n  },\n} satisfies CliCommandDefinition\n\nexport default validateDocumentsCommand\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nconst helpText = `\nOptions\n  --with-user-token Prime access token from CLI config into getCliClient()\n  --mock-browser-env Mocks a browser-like environment using jsdom\n\nExamples\n  # Run the script at some/script.js in Sanity context\n  sanity exec some/script.js\n\n  # Run the script at migrations/fullname.ts and configure \\`getCliClient()\\`\n  # from \\`sanity/cli\\`to include the current user's token\n  sanity exec migrations/fullname.ts --with-user-token\n\n  # Run the script at scripts/browserScript.js in a mock browser environment\n  sanity exec scripts/browserScript.js --mock-browser-env\n\n  # Pass arbitrary arguments to scripts by separating them with a \\`--\\`.\n  # Arguments are available in \\`process.argv\\` as they would in regular node scripts\n  # eg the following command would yield a \\`process.argv\\` of:\n  # ['/path/to/node', '/path/to/myscript.js', '--dry-run', 'positional-argument']\n  sanity exec --mock-browser-env myscript.js -- --dry-run positional-argument\n`\n\nexport const execCommand: CliCommandDefinition = {\n  name: 'exec',\n  signature: 'SCRIPT',\n  description: 'Executes a script within the Sanity Studio context',\n  helpText,\n  action: async (args, context) => {\n    const mod = await import('../../actions/exec/execScript')\n\n    return mod.default(args, context)\n  },\n}\n\nexport default execCommand\n","import {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliCommandDefinition,\n} from '@sanity/cli'\n\nimport {type DeleteGraphQLApiFlags} from '../../actions/graphql/deleteApiAction'\n\nconst helpText = `\nOptions\n  --api <api-id> Undeploy API with this ID (project, dataset and tag flags takes preference)\n  --project <projectId> Project ID to delete GraphQL API for\n  --dataset <dataset> Delete GraphQL API for the given dataset\n  --tag <tag> Delete GraphQL API for the given tag (defaults to 'default')\n  --force Skip confirmation prompt, forcefully undeploying the GraphQL API\n\nExamples\n  sanity graphql undeploy\n  sanity graphql undeploy --api ios\n  sanity graphql undeploy --dataset staging\n  sanity graphql undeploy --dataset staging --tag next\n`\n\nconst deleteGraphQLAPICommand: CliCommandDefinition = {\n  name: 'undeploy',\n  group: 'graphql',\n  signature: '',\n  description: 'Remove a deployed GraphQL API',\n  action: async (args: CliCommandArguments<DeleteGraphQLApiFlags>, context: CliCommandContext) => {\n    const mod = await import('../../actions/graphql/deleteApiAction')\n\n    return mod.default(args, context)\n  },\n  helpText,\n}\n\nexport default deleteGraphQLAPICommand\n","import {type CliCommandContext, type CliCommandDefinition} from '@sanity/cli'\n\nconst helpText = `\nOptions\n  --dry-run Validate defined APIs, exiting with an error on breaking changes\n  --force Deploy API without confirming breaking changes\n  --api <api-id> Only deploy API with this ID. Can be specified multiple times.\n\nThe following options will override any setting from the CLI configuration file\n(sanity.cli.js/sanity.cli.ts) - and applies to ALL defined APIs defined in that\nconfiguration file. Tread with caution!\n\n  --tag Deploy API(s) to given tag (defaults to 'default')\n  --dataset <name> Deploy API for the given dataset\n  --generation <gen1|gen2|gen3> API generation to deploy (defaults to 'gen3')\n  --non-null-document-fields Use non-null document fields (_id, _type etc)\n  --playground Enable GraphQL playground for easier debugging\n  --no-playground Disable GraphQL playground\n  --with-union-cache *Experimental:* Enable union cache that optimizes schema generation for schemas with many self referencing types\n\nExamples\n  # Deploy all defined GraphQL APIs\n  sanity graphql deploy\n\n  # Validate defined GraphQL APIs, check for breaking changes, skip deploy\n  sanity graphql deploy --dry-run\n\n  # Deploy only the GraphQL APIs with the IDs \"staging\" and \"ios\"\n  sanity graphql deploy --api staging --api ios\n\n  # Deploy all defined GraphQL APIs, overriding any playground setting\n  sanity graphql deploy --playground\n`\n\nconst deployGraphQLAPICommand: CliCommandDefinition = {\n  name: 'deploy',\n  signature: '',\n  group: 'graphql',\n  description: 'Deploy a GraphQL API from the current Sanity schema',\n  action: async (args: {argv?: string[]}, context: CliCommandContext) => {\n    const mod = await import('../../actions/graphql/deployApiAction')\n\n    return mod.default(args, context)\n  },\n  helpText,\n}\n\nexport default deployGraphQLAPICommand\n","import {type CliCommandGroupDefinition} from '@sanity/cli'\n\nconst graphqlGroup: CliCommandGroupDefinition = {\n  name: 'graphql',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: \"Deploys changes to your project's GraphQL API(s)\",\n}\n\nexport default graphqlGroup\n","import {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliCommandDefinition,\n} from '@sanity/cli'\n\nconst helpText = `\nExamples\n  sanity graphql list\n`\n\nconst listGraphQLAPIsCommand: CliCommandDefinition = {\n  name: 'list',\n  signature: '',\n  group: 'graphql',\n  description: 'Lists all the GraphQL endpoints deployed for this project',\n  action: async (\n    args: CliCommandArguments<Record<string, unknown>>,\n    context: CliCommandContext,\n  ) => {\n    const mod = await import('../../actions/graphql/listApisAction')\n\n    return mod.default(args, context)\n  },\n  helpText,\n}\n\nexport default listGraphQLAPIsCommand\n","import {type CliCommandDefinition} from '@sanity/cli'\nimport open from 'open'\n\nconst createHookCommand: CliCommandDefinition = {\n  name: 'create',\n  group: 'hook',\n  signature: '',\n  helpText: '',\n  description: 'Create a new hook for the given dataset',\n  action: async (args, context) => {\n    const {apiClient, output} = context\n    const client = apiClient()\n\n    const {projectId} = client.config()\n    if (!projectId) {\n      throw new Error('No project ID found')\n    }\n\n    const projectInfo = (await client.projects.getById(projectId)) || {}\n    const organizationId = projectInfo.organizationId || 'personal'\n    const manageUrl = `https://www.sanity.io/organizations/${organizationId}/project/${projectId}/api/webhooks/new`\n\n    output.print(`Opening ${manageUrl}`)\n    open(manageUrl)\n  },\n}\n\nexport default createHookCommand\n","import {type CliCommandContext, type CliCommandDefinition} from '@sanity/cli'\n\nimport {type Hook} from './types'\n\nconst deleteHookCommand: CliCommandDefinition = {\n  name: 'delete',\n  group: 'hook',\n  signature: '[NAME]',\n  helpText: '',\n  description: 'Delete a hook within your project',\n  action: async (args, context) => {\n    const {apiClient} = context\n    const [name] = args.argsWithoutOptions\n    const client = apiClient()\n\n    const hookId = await promptForHook(name, context)\n    try {\n      await client\n        .clone()\n        .config({apiVersion: '2021-10-04'})\n        .request({method: 'DELETE', uri: `/hooks/${hookId}`})\n    } catch (err) {\n      throw new Error(`Hook deletion failed:\\n${err.message}`)\n    }\n  },\n}\n\nasync function promptForHook(specified: string | undefined, context: CliCommandContext) {\n  const specifiedName = specified && specified.toLowerCase()\n  const {prompt, apiClient} = context\n  const client = apiClient()\n\n  const hooks = await client\n    .clone()\n    .config({apiVersion: '2021-10-04'})\n    .request<Hook[]>({uri: '/hooks', json: true})\n\n  if (specifiedName) {\n    const selected = hooks.filter((hook) => hook.name.toLowerCase() === specifiedName)[0]\n    if (!selected) {\n      throw new Error(`Hook with name \"${specified} not found\"`)\n    }\n\n    return selected.id\n  }\n\n  const choices = hooks.map((hook) => ({value: hook.id, name: hook.name}))\n  return prompt.single({\n    message: 'Select hook to delete',\n    type: 'list',\n    choices,\n  })\n}\n\nexport default deleteHookCommand\n","import {type CliCommandGroupDefinition} from '@sanity/cli'\n\nconst hookGroup: CliCommandGroupDefinition = {\n  name: 'hook',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Sets up and manages webhooks within your Sanity project',\n}\n\nexport default hookGroup\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nimport {type DeliveryAttempt} from './types'\n\nconst printHookAttemptCommand: CliCommandDefinition = {\n  name: 'attempt',\n  group: 'hook',\n  signature: 'ATTEMPT_ID',\n  helpText: '',\n  description: 'Print details of a given webhook delivery attempt',\n  action: async (args, context) => {\n    const {apiClient, output} = context\n    const [attemptId] = args.argsWithoutOptions\n    const client = apiClient()\n\n    let attempt\n    try {\n      attempt = await client.request<DeliveryAttempt>({uri: `/hooks/attempts/${attemptId}`})\n    } catch (err) {\n      throw new Error(`Hook attempt retrieval failed:\\n${err.message}`)\n    }\n\n    const {createdAt, resultCode, resultBody, failureReason, inProgress} = attempt\n\n    output.print(`Date: ${createdAt}`)\n    output.print(`Status: ${getStatus(attempt)}`)\n    output.print(`Status code: ${resultCode}`)\n\n    if (attempt.isFailure) {\n      output.print(`Failure: ${formatFailure(attempt)}`)\n    }\n\n    if (!inProgress && (!failureReason || failureReason === 'http')) {\n      const body = resultBody ? `\\n---\\n${resultBody}\\n---\\n` : '<empty>'\n      output.print(`Response body: ${body}`)\n    }\n  },\n}\n\nexport default printHookAttemptCommand\n\nexport function formatFailure(\n  attempt: DeliveryAttempt,\n  options: {includeHelp?: boolean} = {},\n): string {\n  const {includeHelp} = options\n  const {id, failureReason, resultCode} = attempt\n  const help = includeHelp ? `(run \\`sanity hook attempt ${id}\\` for details)` : ''\n  switch (failureReason) {\n    case 'http':\n      return `HTTP ${resultCode} ${help}`\n    case 'timeout':\n      return 'Request timed out'\n    case 'network':\n      return 'Network error'\n    case 'other':\n    default:\n  }\n\n  return 'Unknown error'\n}\n\nexport function getStatus(attempt: DeliveryAttempt): string {\n  if (attempt.isFailure) {\n    return 'Failed'\n  }\n\n  if (attempt.inProgress) {\n    return 'In progress'\n  }\n\n  return 'Delivered'\n}\n","import {type CliCommandContext, type CliCommandDefinition} from '@sanity/cli'\nimport {groupBy} from 'lodash'\nimport {inspect} from 'util'\n\nimport {formatFailure} from './printHookAttemptCommand'\nimport {type DeliveryAttempt, type Hook, type HookMessage} from './types'\n\ninterface ListHookFlags {\n  detailed?: boolean\n}\n\nconst listHookLogsCommand: CliCommandDefinition<ListHookFlags> = {\n  name: 'logs',\n  group: 'hook',\n  signature: '[NAME]',\n  helpText: '',\n  description: 'List latest log entries for a given hook',\n  action: async (args, context) => {\n    const {apiClient} = context\n    const flags = args.extOptions\n    const [name] = args.argsWithoutOptions\n    const client = apiClient()\n\n    const hookId = await promptForHook(name, context)\n    let messages\n    let attempts\n    try {\n      messages = await client.request<HookMessage[]>({uri: `/hooks/${hookId}/messages`})\n      attempts = await client.request<DeliveryAttempt[]>({uri: `/hooks/${hookId}/attempts`})\n    } catch (err) {\n      throw new Error(`Hook logs retrieval failed:\\n${err.message}`)\n    }\n\n    const groupedAttempts = groupBy(attempts, 'messageId')\n    const populated = messages.map((msg): HookMessage & {attempts: DeliveryAttempt[]} => ({\n      ...msg,\n      attempts: groupedAttempts[msg.id],\n    }))\n\n    const totalMessages = messages.length - 1\n    populated.forEach((message, i) => {\n      printMessage(message, context, {detailed: flags.detailed})\n      printSeparator(context, totalMessages === i)\n    })\n  },\n}\n\nexport default listHookLogsCommand\n\nasync function promptForHook(specified: string | undefined, context: CliCommandContext) {\n  const specifiedName = specified && specified.toLowerCase()\n  const {prompt, apiClient} = context\n  const client = apiClient()\n\n  const hooks = await client\n    .clone()\n    .config({apiVersion: '2021-10-04'})\n    .request<Hook[]>({uri: '/hooks', json: true})\n\n  if (specifiedName) {\n    const selected = hooks.filter((hook) => hook.name.toLowerCase() === specifiedName)[0]\n    if (!selected) {\n      throw new Error(`Hook with name \"${specified} not found\"`)\n    }\n\n    return selected.id\n  }\n\n  if (hooks.length === 0) {\n    throw new Error('No hooks currently registered')\n  }\n\n  if (hooks.length === 1) {\n    return hooks[0].id\n  }\n\n  const choices = hooks.map((hook) => ({value: hook.id, name: hook.name}))\n  return prompt.single({\n    message: 'Select hook to list logs for',\n    type: 'list',\n    choices,\n  })\n}\n\nfunction printSeparator(context: CliCommandContext, skip: boolean) {\n  if (!skip) {\n    context.output.print('---\\n')\n  }\n}\n\nfunction printMessage(\n  message: HookMessage & {attempts: DeliveryAttempt[]},\n  context: CliCommandContext,\n  options: {detailed?: boolean},\n) {\n  const {detailed} = options\n  const {output, chalk} = context\n\n  output.print(`Date: ${message.createdAt}`)\n  output.print(`Status: ${message.status}`)\n  output.print(`Result code: ${message.resultCode}`)\n\n  if (message.failureCount > 0) {\n    output.print(`Failures: ${message.failureCount}`)\n  }\n\n  if (detailed) {\n    output.print('Payload:')\n    output.print(inspect(JSON.parse(message.payload), {colors: true}))\n  }\n\n  if (detailed && message.attempts) {\n    output.print('Attempts:')\n    message.attempts.forEach((attempt) => {\n      const date = attempt.createdAt.replace(/\\.\\d+Z$/, 'Z')\n      const prefix = `  [${date}]`\n\n      if (attempt.inProgress) {\n        output.print(`${prefix} ${chalk.yellow('Pending')}`)\n      } else if (attempt.isFailure) {\n        const failure = formatFailure(attempt, {includeHelp: true})\n        output.print(`${prefix} ${chalk.yellow(`Failure: ${failure}`)}`)\n      } else {\n        output.print(`${prefix} Success: HTTP ${attempt.resultCode} (${attempt.duration}ms)`)\n      }\n    })\n  }\n\n  // Leave some empty space between messages\n  output.print('')\n}\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nimport {type Hook} from './types'\n\nconst listHooksCommand: CliCommandDefinition = {\n  name: 'list',\n  group: 'hook',\n  signature: '',\n  helpText: '',\n  description: 'List hooks for a given project',\n  action: async (args, context) => {\n    const {apiClient, output} = context\n    const client = apiClient()\n\n    let hooks\n    try {\n      hooks = await client\n        .clone()\n        .config({apiVersion: '2021-10-04'})\n        .request<Hook[]>({uri: '/hooks'})\n    } catch (err) {\n      throw new Error(`Hook list retrieval failed:\\n${err.message}`)\n    }\n\n    hooks.forEach((hook) => {\n      output.print(`Name: ${hook.name}`)\n      output.print(`Dataset: ${hook.dataset}`)\n      output.print(`URL: ${hook.url}`)\n\n      if (hook.type === 'document') {\n        output.print(`HTTP method: ${hook.httpMethod}`)\n\n        if (hook.description) {\n          output.print(`Description: ${hook.description}`)\n        }\n      }\n\n      output.print('')\n    })\n  },\n}\n\nexport default listHooksCommand\n","export const MIGRATIONS_DIRECTORY = 'migrations'\nexport const MIGRATION_SCRIPT_EXTENSIONS = ['mjs', 'js', 'ts', 'cjs']\n","export const minimalAdvanced = ({\n  migrationName,\n  documentTypes,\n}: {\n  migrationName: string\n  documentTypes: string[]\n}) => `import {defineMigration, patch, at, setIfMissing} from 'sanity/migrate'\n\n/**\n * this migration will set \\`Default title\\` on all documents that are missing a title\n * and make \\`true\\` the default value for the \\`enabled\\` field\n */\nexport default defineMigration({\n  title: '${migrationName}',\n${\n  documentTypes.length > 0\n    ? `  documentTypes: [${documentTypes.map((t) => JSON.stringify(t)).join(', ')}],\\n`\n    : ''\n}\n  async *migrate(documents, context) {\n    for await (const document of documents()) {\n      yield patch(document._id, [\n        at('title', setIfMissing('Default title')),\n        at('enabled', setIfMissing(true)),\n      ])\n    }\n  }\n})\n`\n","export const minimalSimple = ({\n  migrationName,\n  documentTypes,\n}: {\n  migrationName: string\n  documentTypes: string[]\n}) => `import {at, defineMigration, setIfMissing, unset} from 'sanity/migrate'\n\nexport default defineMigration({\n  title: '${migrationName}',\n${\n  documentTypes.length > 0\n    ? `  documentTypes: [${documentTypes.map((t) => JSON.stringify(t)).join(', ')}],\\n`\n    : ''\n}\n  migrate: {\n    document(doc, context) {\n      // this will be called for every document of the matching type\n      // any patch returned will be applied to the document\n      // you can also return mutations that touches other documents\n\n      return at('title', setIfMissing('Default title'))\n    },\n    node(node, path, context) {\n      // this will be called for every node in every document of the matching type\n      // any patch returned will be applied to the document\n      // you can also return mutations that touches other documents\n\n      if (typeof node === 'string' && node === 'deleteme') {\n        return unset()\n      }\n    },\n    object(node, path, context) {\n      // this will be called for every object node in every document of the matching type\n      // any patch returned will be applied to the document\n      // you can also return mutations that touches other documents\n      if (node._type === 'author') {\n        // make sure all authors objects have a books array\n        return at('books', setIfMissing([]))\n      }\n    },\n    array(node, path, context) {\n      // this will be called for every array node in every document of the matching type\n      // any patch returned will be applied to the document\n      // you can also return mutations that touches other documents\n    },\n    string(node, path, context) {\n      // this will be called for every string node in every document of the matching type\n      // any patch returned will be applied to the document\n      // you can also return mutations that touches other documents\n    },\n    number(node, path, context) {\n      // this will be called for every number node in every document of the matching type\n      // any patch returned will be applied to the document\n      // you can also return mutations that touches other documents\n    },\n    boolean(node, path, context) {\n      // this will be called for every boolean node in every document of the matching type\n      // any patch returned will be applied to the document\n      // you can also return mutations that touches other documents\n    },\n    null(node, path, context) {\n      // this will be called for every null node in every document of the matching type\n      // any patch returned will be applied to the document\n      // you can also return mutations that touches other documents\n    },\n  },\n})\n`\n","export const renameField = ({\n  migrationName,\n  documentTypes,\n}: {\n  migrationName: string\n  documentTypes: string[]\n}) => `import {defineMigration, at, setIfMissing, unset} from 'sanity/migrate'\n\nconst from = 'oldFieldName'\nconst to = 'newFieldName'\n\nexport default defineMigration({\n  title: '${migrationName}',\n${\n  documentTypes.length > 0\n    ? `  documentTypes: [${documentTypes.map((t) => JSON.stringify(t)).join(', ')}],\\n`\n    : ''\n}\n  migrate: {\n    document(doc, context) {\n      return [\n        at(to, setIfMissing(doc[from])),\n        at(from, unset())\n      ]\n    }\n  }\n})\n`\n","export const renameType = ({\n  migrationName,\n  documentTypes,\n}: {\n  migrationName: string\n  documentTypes: string[]\n}) => `import {defineMigration, at, set} from 'sanity/migrate'\n\nconst oldType = 'old'\nconst newType = 'new'\n\nexport default defineMigration({\n  title: '${migrationName}',\n${\n  documentTypes.length > 0\n    ? `  documentTypes: [${documentTypes.map((t) => JSON.stringify(t)).join(', ')}],\\n`\n    : ''\n}\n  migrate: {\n    object(object, path, context) {\n      if (object._type === oldType) {\n        return at('_type', set(newType))\n      }\n    }\n  }\n})\n`\n","export const stringToPTE = ({\n  migrationName,\n  documentTypes,\n}: {\n  migrationName: string\n  documentTypes: string[]\n}) => `import {pathsAreEqual, stringToPath} from 'sanity'\nimport {defineMigration, set} from 'sanity/migrate'\n\nconst targetPath = stringToPath('some.path')\n\nexport default defineMigration({\n  title: '${migrationName}',\n${\n  documentTypes.length > 0\n    ? `  documentTypes: [${documentTypes.map((t) => JSON.stringify(t)).join(', ')}],\\n`\n    : ''\n}\n  migrate: {\n    string(node, path, ctx) {\n      if (pathsAreEqual(path, targetPath)) {\n        return set([\n          {\n            style: 'normal',\n            _type: 'block',\n            children: [\n              {\n                _type: 'span',\n                marks: [],\n                text: node,\n              },\n            ],\n            markDefs: [],\n          },\n        ])\n      }\n    },\n  },\n})\n`\n","import {existsSync, mkdirSync} from 'node:fs'\nimport {writeFile} from 'node:fs/promises'\nimport path from 'node:path'\n\nimport {type CliCommandDefinition} from '@sanity/cli'\nimport deburr from 'lodash/deburr'\n\nimport {MIGRATIONS_DIRECTORY} from './constants'\nimport {minimalAdvanced} from './templates/minimalAdvanced'\nimport {minimalSimple} from './templates/minimalSimple'\nimport {renameField} from './templates/renameField'\nimport {renameType} from './templates/renameType'\nimport {stringToPTE} from './templates/stringToPTE'\n\nconst helpText = `\nExamples:\n  # Create a new migration, prompting for title and options\n  sanity migration create\n\n  # Create a new migration with the provided title, prompting for options\n  sanity migration create \"Rename field from location to address\"\n`\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface CreateMigrationFlags {}\n\nconst TEMPLATES = [\n  {name: 'Minimalistic migration to get you started', template: minimalSimple},\n  {name: 'Rename an object type', template: renameType},\n  {name: 'Rename a field', template: renameField},\n  {name: 'Convert string field to Portable Text', template: stringToPTE},\n  {\n    name: 'Advanced template using async iterators providing more fine grained control',\n    template: minimalAdvanced,\n  },\n]\n\nconst createMigrationCommand: CliCommandDefinition<CreateMigrationFlags> = {\n  name: 'create',\n  group: 'migration',\n  signature: '[TITLE]',\n  helpText,\n  description: 'Create a new migration within your project',\n  action: async (args, context) => {\n    const {output, prompt, workDir, chalk} = context\n\n    let [title] = args.argsWithoutOptions\n\n    while (!title?.trim()) {\n      title = await prompt.single({\n        type: 'input',\n        suffix: ' (e.g. \"Rename field from location to address\")',\n        message: 'Title of migration',\n      })\n      if (!title.trim()) {\n        output.error(chalk.red('Name cannot be empty'))\n      }\n    }\n    const types = await prompt.single({\n      type: 'input',\n      suffix: ' (optional)',\n      message: 'Type of documents to migrate. You can add multiple types separated by comma',\n    })\n\n    const templatesByName = Object.fromEntries(TEMPLATES.map((t) => [t.name, t]))\n    const template = await prompt.single({\n      type: 'list',\n      message: 'Select a template',\n      choices: TEMPLATES.map((definedTemplate) => ({\n        name: definedTemplate.name,\n        value: definedTemplate.name,\n      })),\n    })\n\n    const sluggedName = deburr(title.toLowerCase())\n      .replace(/\\s+/g, '-')\n      .replace(/[^a-z0-9-]/g, '')\n\n    const destDir = path.join(MIGRATIONS_DIRECTORY, sluggedName)\n    if (existsSync(destDir)) {\n      if (\n        !(await prompt.single({\n          type: 'confirm',\n          message: `Migration directory ./${destDir} already exists. Overwrite?`,\n          default: false,\n        }))\n      ) {\n        return\n      }\n    }\n    mkdirSync(destDir, {recursive: true})\n\n    const renderedTemplate = (templatesByName[template].template || minimalSimple)({\n      migrationName: title,\n      documentTypes: types\n        .split(',')\n        .map((t) => t.trim())\n        .filter(Boolean),\n    })\n\n    const definitionFile = path.join(destDir, 'index.ts')\n\n    await writeFile(path.join(workDir, definitionFile), renderedTemplate)\n    // To dry run it, run \\`sanity migration run ${sluggedName}\\``)\n    output.print()\n    output.print(`${chalk.green('✓')} Migration created!`)\n    output.print()\n    output.print('Next steps:')\n    output.print(\n      `Open ./${chalk.bold(\n        definitionFile,\n      )} in your code editor and write the code for your migration.`,\n    )\n    output.print(\n      `Dry run the migration with:\\n\\`${chalk.bold(\n        `sanity migration run ${sluggedName} --project=<projectId> --dataset <dataset> `,\n      )}\\``,\n    )\n    output.print(\n      `Run the migration against a dataset with:\\n \\`${chalk.bold(\n        `sanity migration run ${sluggedName} --project=<projectId> --dataset <dataset> --no-dry-run`,\n      )}\\``,\n    )\n    output.print()\n    output.print(\n      `👉 Learn more about schema and content migrations at ${chalk.bold(\n        'https://www.sanity.io/docs/schema-and-content-migrations',\n      )}`,\n    )\n  },\n}\nexport default createMigrationCommand\n","import path from 'node:path'\n\nimport {type Migration} from '@sanity/migrate'\nimport {isPlainObject} from 'lodash'\n\nimport {MIGRATION_SCRIPT_EXTENSIONS, MIGRATIONS_DIRECTORY} from '../constants'\n\ninterface ResolvedMigrationScript {\n  /**\n   * Relative path from the working directory to the migration script\n   */\n  relativePath: string\n\n  /**\n   * Absolute path to the migration script\n   */\n  absolutePath: string\n\n  /**\n   * The migration module, if it could be resolved - otherwise `undefined`\n   */\n  mod?: {default: Migration; up?: unknown; down?: unknown}\n}\n\n/**\n * Resolves the potential paths to a migration script.\n * Considers the following paths (where `<ext>` is 'mjs', 'js', 'ts' or 'cjs'):\n *\n * - `<migrationsDir>/<migrationName>.<ext>`\n * - `<migrationsDir>/<migrationName>/index.<ext>`\n *\n * Note that all possible paths are returned, even if the files do not exist.\n * Check the `mod` property to see if a module could actually be loaded.\n *\n * @param workDir - Working directory of the studio\n * @param migrationName - The name of the migration directory to resolve\n * @returns An array of potential migration scripts\n * @internal\n */\nexport function resolveMigrationScript(\n  workDir: string,\n  migrationName: string,\n): ResolvedMigrationScript[] {\n  return [migrationName, path.join(migrationName, 'index')].flatMap((location) =>\n    MIGRATION_SCRIPT_EXTENSIONS.map((ext) => {\n      const relativePath = path.join(MIGRATIONS_DIRECTORY, `${location}.${ext}`)\n      const absolutePath = path.resolve(workDir, relativePath)\n      let mod\n      try {\n        // eslint-disable-next-line import/no-dynamic-require\n        mod = require(absolutePath)\n      } catch (err) {\n        if (err.code !== 'MODULE_NOT_FOUND') {\n          throw new Error(`Error: ${err.message}\"`)\n        }\n      }\n      return {relativePath, absolutePath, mod}\n    }),\n  )\n}\n\n/**\n * Checks whether or not the passed resolved migration script is actually loadable (eg has a default export)\n *\n * @param script - The resolved migration script to check\n * @returns `true` if the script is loadable, `false` otherwise\n * @internal\n */\nexport function isLoadableMigrationScript(\n  script: ResolvedMigrationScript,\n): script is Required<ResolvedMigrationScript> {\n  if (typeof script.mod === 'undefined' || !isPlainObject(script.mod.default)) {\n    return false\n  }\n\n  const mod = script.mod.default\n  return typeof mod.title === 'string' && mod.migrate !== undefined\n}\n","import {readdir} from 'node:fs/promises'\nimport path from 'node:path'\n\nimport {type CliCommandDefinition} from '@sanity/cli'\nimport {type Migration} from '@sanity/migrate'\nimport {Table} from 'console-table-printer'\nimport {register} from 'esbuild-register/dist/node'\n\nimport {MIGRATION_SCRIPT_EXTENSIONS, MIGRATIONS_DIRECTORY} from './constants'\nimport {isLoadableMigrationScript, resolveMigrationScript} from './utils/resolveMigrationScript'\n\nconst helpText = ``\n\nconst listMigrationCommand: CliCommandDefinition = {\n  name: 'list',\n  group: 'migration',\n  signature: '',\n  helpText,\n  description: 'List available migrations',\n  action: async (_, context) => {\n    const {workDir, output, chalk} = context\n    try {\n      const migrations = await resolveMigrations(workDir)\n\n      if (migrations.length === 0) {\n        output.print('No migrations found in migrations folder of the project')\n        output.print(\n          `\\nRun ${chalk.green(`\\`sanity migration create <NAME>\\``)} to create a new migration`,\n        )\n        return\n      }\n\n      const table = new Table({\n        title: `Found ${migrations.length} migrations in project`,\n        columns: [\n          {name: 'id', title: 'ID', alignment: 'left'},\n          {name: 'title', title: 'Title', alignment: 'left'},\n        ],\n      })\n\n      migrations.forEach((definedMigration) => {\n        table.addRow({id: definedMigration.id, title: definedMigration.migration.title})\n      })\n      table.printTable()\n      output.print('\\nRun `sanity migration run <ID>` to run a migration')\n    } catch (error) {\n      if (error.code === 'ENOENT') {\n        output.print('No migrations folder found in the project')\n        output.print(\n          `\\nRun ${chalk.green(`\\`sanity migration create <NAME>\\``)} to create a new migration`,\n        )\n        return\n      }\n      throw new Error(`An error occurred while listing migrations: ${error.message}`)\n    }\n  },\n}\n\n/**\n * A resolved migration, where you are guaranteed that the migration file exists\n *\n * @internal\n */\nexport interface ResolvedMigration {\n  id: string\n  migration: Migration\n}\n\n/**\n * Resolves all migrations in the studio working directory\n *\n * @param workDir - The studio working directory\n * @returns Array of migrations and their respective paths\n * @internal\n */\nexport async function resolveMigrations(workDir: string): Promise<ResolvedMigration[]> {\n  let unregister\n  if (!__DEV__) {\n    unregister = register({\n      target: `node${process.version.slice(1)}`,\n    }).unregister\n  }\n\n  const migrationsDir = path.join(workDir, MIGRATIONS_DIRECTORY)\n  const migrationEntries = await readdir(migrationsDir, {withFileTypes: true})\n\n  const migrations: ResolvedMigration[] = []\n  for (const entry of migrationEntries) {\n    const entryName = entry.isDirectory() ? entry.name : removeMigrationScriptExtension(entry.name)\n    const candidates = resolveMigrationScript(workDir, entryName).filter(isLoadableMigrationScript)\n\n    for (const candidate of candidates) {\n      migrations.push({\n        id: entryName,\n        migration: candidate.mod.default,\n      })\n    }\n  }\n\n  if (unregister) {\n    unregister()\n  }\n\n  return migrations\n}\n\nfunction removeMigrationScriptExtension(fileName: string) {\n  // Remove `.ts`, `.js` etc from the end of a filename\n  return MIGRATION_SCRIPT_EXTENSIONS.reduce(\n    (name, ext) => (name.endsWith(`.${ext}`) ? path.basename(name, `.${ext}`) : name),\n    fileName,\n  )\n}\n\nexport default listMigrationCommand\n","export default {\n  name: 'migration',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Manages content migrations for Content Lake datasets',\n}\n","import {type Path, pathToString} from 'sanity'\n\ninterface BaseNode {\n  path: Path\n}\n\nexport interface Tree<Node extends BaseNode> {\n  nodes?: Node[]\n  children?: Record<string, Tree<Node>>\n}\n\n/**\n * Recursively calculates the max length of all the keys in the given validation\n * tree respecting extra length due to indentation depth. Used to calculate the\n * padding for the rest of the tree.\n */\nexport const maxKeyLength = (children: Record<string, Tree<BaseNode>> = {}, depth = 0): number => {\n  return Object.entries(children)\n    .map(([key, child]) =>\n      Math.max(key.length + depth * 2, maxKeyLength(child.children, depth + 1)),\n    )\n    .reduce((max, next) => (next > max ? next : max), 0)\n}\n\ninterface Options<Node extends BaseNode> {\n  node?: Record<string, Tree<Node>>\n  paddingLength: number\n  indent?: string\n  getNodes?: (node: Tree<Node>) => Node[] | undefined\n  getMessage: (node: Node) => string\n}\n\n/**\n * Recursively formats a given tree into a printed user-friendly tree structure\n */\nexport const formatTree = <Node extends BaseNode>({\n  node = {},\n  paddingLength,\n  indent = '',\n  getNodes: getLeaves = ({nodes}) => nodes,\n  getMessage,\n}: Options<Node>): string => {\n  const entries = Object.entries(node)\n\n  return entries\n    .map(([key, child], index) => {\n      const isLast = index === entries.length - 1\n      const nextIndent = `${indent}${isLast ? '  ' : '│ '}`\n      const leaves = getLeaves(child)\n\n      const nested = formatTree({\n        node: child.children,\n        paddingLength,\n        indent: nextIndent,\n        getNodes: getLeaves,\n        getMessage,\n      })\n\n      if (!leaves?.length) {\n        const current = `${indent}${isLast ? '└' : '├'}─ ${key}`\n        return [current, nested].filter(Boolean).join('\\n')\n      }\n\n      const [first, ...rest] = leaves\n      const firstPadding = '.'.repeat(paddingLength - indent.length - key.length)\n      const elbow = isLast ? '└' : '├'\n      const subsequentPadding = ' '.repeat(paddingLength - indent.length + 2)\n\n      const firstMessage = `${indent}${elbow}─ ${key} ${firstPadding} ${getMessage(first)}`\n      const subsequentMessages = rest\n        .map((marker) => `${nextIndent}${subsequentPadding} ${getMessage(marker)}`)\n        .join('\\n')\n\n      const current = [firstMessage, subsequentMessages].filter(Boolean).join('\\n')\n      return [current, nested].filter(Boolean).join('\\n')\n    })\n    .join('\\n')\n}\n\n/**\n * Converts a set of markers with paths into a tree of markers where the paths\n * are embedded in the tree\n */\nexport function convertToTree<const Node extends BaseNode>(nodes: Node[]): Tree<Node> {\n  const root: Tree<Node> = {}\n\n  // add the markers to the tree\n  function addNode(node: Node, tree: Tree<Node> = root) {\n    // if we've traversed the whole path\n    if (!node.path.length) {\n      if (!tree.nodes) tree.nodes = [] // ensure markers is defined\n\n      // then add the marker to the front\n      tree.nodes.push(node)\n      return\n    }\n\n    const [current, ...rest] = node.path\n    const key = pathToString([current])\n\n    // ensure the current node has children and the next node\n    if (!tree.children) tree.children = {}\n    if (!(key in tree.children)) tree.children[key] = {}\n\n    addNode({...node, path: rest}, tree.children[key])\n  }\n\n  for (const node of nodes) addNode(node)\n  return root\n}\n","import {isatty} from 'node:tty'\n\nimport {type Migration, type Mutation, type NodePatch, type Transaction} from '@sanity/migrate'\nimport {type KeyedSegment} from '@sanity/types'\nimport {type Chalk} from 'chalk'\n\nimport {convertToTree, formatTree, maxKeyLength} from '../../util/tree'\n\ntype ItemRef = string | number\ntype Impact = 'destructive' | 'maybeDestructive' | 'incremental'\ntype Variant = Impact | 'info'\n\nconst isTty = isatty(1)\n\ninterface FormatterOptions<Subject> {\n  chalk: Chalk\n  subject: Subject\n  migration: Migration\n  indentSize?: number\n}\n\nexport function prettyFormat({\n  chalk,\n  subject,\n  migration,\n  indentSize = 0,\n}: FormatterOptions<Mutation | Transaction | (Mutation | Transaction)[]>): string {\n  return (Array.isArray(subject) ? subject : [subject])\n    .map((subjectEntry) => {\n      if (subjectEntry.type === 'transaction') {\n        return [\n          [\n            badge('transaction', 'info', chalk),\n            typeof subjectEntry.id === 'undefined' ? null : chalk.underline(subjectEntry.id),\n          ]\n            .filter(Boolean)\n            .join(' '),\n          indent(\n            prettyFormat({\n              chalk,\n              subject: subjectEntry.mutations,\n              migration,\n              indentSize: indentSize,\n            }),\n          ),\n        ].join('\\n\\n')\n      }\n      return prettyFormatMutation({\n        chalk,\n        subject: subjectEntry,\n        migration,\n        indentSize,\n      })\n    })\n    .join('\\n\\n')\n}\n\nfunction encodeItemRef(ref: number | KeyedSegment): ItemRef {\n  return typeof ref === 'number' ? ref : ref._key\n}\n\nfunction badgeStyle(chalk: Chalk, variant: Variant): Chalk {\n  const styles: Record<Variant, Chalk> = {\n    info: chalk.bgWhite.black,\n    incremental: chalk.bgGreen.black.bold,\n    maybeDestructive: chalk.bgYellow.black.bold,\n    destructive: chalk.bgRed.black.bold,\n  }\n\n  return styles[variant]\n}\n\nfunction badge(label: string, variant: Variant, chalk: Chalk): string {\n  if (!isTty) {\n    return `[${label}]`\n  }\n\n  return badgeStyle(chalk, variant)(` ${label} `)\n}\n\nconst mutationImpact: Record<Mutation['type'], Impact> = {\n  create: 'incremental',\n  createIfNotExists: 'incremental',\n  createOrReplace: 'maybeDestructive',\n  delete: 'destructive',\n  patch: 'maybeDestructive',\n}\n\nfunction documentId(mutation: Mutation): string | undefined {\n  if ('id' in mutation) {\n    return mutation.id\n  }\n\n  if ('document' in mutation) {\n    return mutation.document._id\n  }\n\n  return undefined\n}\n\nconst listFormatter = new Intl.ListFormat('en-US', {\n  type: 'disjunction',\n})\n\nfunction mutationHeader(chalk: Chalk, mutation: Mutation, migration: Migration): string {\n  const mutationType = badge(mutation.type, mutationImpact[mutation.type], chalk)\n\n  const documentType =\n    'document' in mutation || migration.documentTypes\n      ? badge(\n          'document' in mutation\n            ? mutation.document._type\n            : listFormatter.format(migration.documentTypes ?? []),\n          'info',\n          chalk,\n        )\n      : null\n\n  // TODO: Should we list documentType when a mutation can be yielded for any document type?\n  return [mutationType, documentType, chalk.underline(documentId(mutation))]\n    .filter(Boolean)\n    .join(' ')\n}\n\nexport function prettyFormatMutation({\n  chalk,\n  subject,\n  migration,\n  indentSize = 0,\n}: FormatterOptions<Mutation>): string {\n  const lock =\n    'options' in subject ? chalk.cyan(`(if revision==${subject.options?.ifRevision})`) : ''\n  const header = [mutationHeader(chalk, subject, migration), lock].join(' ')\n  const padding = ' '.repeat(indentSize)\n\n  if (\n    subject.type === 'create' ||\n    subject.type === 'createIfNotExists' ||\n    subject.type === 'createOrReplace'\n  ) {\n    return [header, '\\n', indent(JSON.stringify(subject.document, null, 2), indentSize)].join('')\n  }\n\n  if (subject.type === 'patch') {\n    const tree = convertToTree<NodePatch>(subject.patches.flat())\n    const paddingLength = Math.max(maxKeyLength(tree.children) + 2, 30)\n\n    return [\n      header,\n      '\\n',\n      formatTree<NodePatch>({\n        node: tree.children,\n        paddingLength,\n        indent: padding,\n        getMessage: (patch) => formatPatchMutation(chalk, patch),\n      }),\n    ].join('')\n  }\n\n  return header\n}\n\nfunction formatPatchMutation(chalk: Chalk, patch: NodePatch): string {\n  const {op} = patch\n  const formattedType = chalk.bold(op.type)\n  if (op.type === 'unset') {\n    return `${chalk.red(formattedType)}()`\n  }\n  if (op.type === 'diffMatchPatch') {\n    return `${chalk.yellow(formattedType)}(${op.value})`\n  }\n  if (op.type === 'inc' || op.type === 'dec') {\n    return `${chalk.yellow(formattedType)}(${op.amount})`\n  }\n  if (op.type === 'set') {\n    return `${chalk.yellow(formattedType)}(${JSON.stringify(op.value)})`\n  }\n  if (op.type === 'setIfMissing') {\n    return `${chalk.green(formattedType)}(${JSON.stringify(op.value)})`\n  }\n  if (op.type === 'insert') {\n    return `${chalk.green(formattedType)}(${op.position}, ${encodeItemRef(\n      op.referenceItem,\n    )}, ${JSON.stringify(op.items)})`\n  }\n  if (op.type === 'replace') {\n    return `${chalk.yellow(formattedType)}(${encodeItemRef(op.referenceItem)}, ${JSON.stringify(\n      op.items,\n    )})`\n  }\n  if (op.type === 'truncate') {\n    return `${chalk.red(formattedType)}(${op.startIndex}, ${op.endIndex})`\n  }\n  // @ts-expect-error all cases are covered\n  throw new Error(`Invalid operation type: ${op.type}`)\n}\n\nfunction indent(subject: string, size = 2): string {\n  const padding = ' '.repeat(size)\n\n  return subject\n    .split('\\n')\n    .map((line) => padding + line)\n    .join('\\n')\n}\n","import {type CliCommandDefinition} from '@sanity/cli'\nimport {\n  DEFAULT_MUTATION_CONCURRENCY,\n  dryRun,\n  MAX_MUTATION_CONCURRENCY,\n  type Migration,\n  type MigrationProgress,\n  run,\n} from '@sanity/migrate'\nimport {Table} from 'console-table-printer'\nimport {register} from 'esbuild-register/dist/node'\nimport {hideBin} from 'yargs/helpers'\nimport yargs from 'yargs/yargs'\n\nimport {debug} from '../../debug'\nimport {resolveMigrations} from './listMigrationsCommand'\nimport {prettyFormat} from './prettyMutationFormatter'\nimport {isLoadableMigrationScript, resolveMigrationScript} from './utils/resolveMigrationScript'\n\nconst helpText = `\nOptions\n  --no-dry-run By default the migration runs in dry mode. Pass this option to migrate dataset.\n  --concurrency <concurrent> How many mutation requests to run in parallel. Must be between 1 and ${MAX_MUTATION_CONCURRENCY}. Default: ${DEFAULT_MUTATION_CONCURRENCY}.\n  --no-progress Don't output progress. Useful if you want debug your migration script and see the output of console.log() statements.\n  --dataset <dataset> Dataset to migrate. Defaults to the dataset configured in your Sanity CLI config.\n  --project <project id> Project ID of the dataset to migrate. Defaults to the projectId configured in your Sanity CLI config.\n  --no-confirm Skip the confirmation prompt before running the migration. Make sure you know what you're doing before using this flag.\n  --from-export <export.tar.gz> Use a local dataset export as source for migration instead of calling the Sanity API. Note: this is only supported for dry runs.\n\n\nExamples\n  # dry run the migration\n  sanity migration run <id>\n\n  # execute the migration against a dataset\n  sanity migration run <id> --no-dry-run --project xyz --dataset staging\n\n  # execute the migration using a dataset export as the source\n  sanity migration run <id>  --from-export=production.tar.gz --no-dry-run --projectId xyz --dataset staging\n`\n\ninterface CreateFlags {\n  ['dry-run']?: boolean\n  concurrency?: number\n  ['from-export']?: string\n  progress?: boolean\n  dataset?: string\n  project?: string\n  confirm?: boolean\n}\n\nfunction parseCliFlags(args: {argv?: string[]}) {\n  return yargs(hideBin(args.argv || process.argv).slice(2))\n    .options('dry-run', {type: 'boolean', default: true})\n    .options('concurrency', {type: 'number', default: DEFAULT_MUTATION_CONCURRENCY})\n    .options('progress', {type: 'boolean', default: true})\n    .options('dataset', {type: 'string'})\n    .options('from-export', {type: 'string'})\n    .options('project', {type: 'string'})\n    .options('confirm', {type: 'boolean', default: true}).argv\n}\n\nconst runMigrationCommand: CliCommandDefinition<CreateFlags> = {\n  name: 'run',\n  group: 'migration',\n  signature: 'ID',\n  helpText,\n  description: 'Run a migration against a dataset',\n  // eslint-disable-next-line max-statements\n  action: async (args, context) => {\n    const {apiClient, output, prompt, chalk, workDir} = context\n    const [id] = args.argsWithoutOptions\n\n    const flags = await parseCliFlags(args)\n\n    const fromExport = flags.fromExport\n    const dry = flags.dryRun\n    const dataset = flags.dataset\n    const project = flags.project\n\n    if ((dataset && !project) || (project && !dataset)) {\n      throw new Error('If either --dataset or --project is provided, both must be provided')\n    }\n\n    if (!id) {\n      output.error(chalk.red('Error: Migration ID must be provided'))\n      const migrations = await resolveMigrations(workDir)\n      const table = new Table({\n        title: `Migrations found in project`,\n        columns: [\n          {name: 'id', title: 'ID', alignment: 'left'},\n          {name: 'title', title: 'Title', alignment: 'left'},\n        ],\n      })\n\n      migrations.forEach((definedMigration) => {\n        table.addRow({id: definedMigration.id, title: definedMigration.migration.title})\n      })\n      table.printTable()\n      output.print('\\nRun `sanity migration run <ID>` to run a migration')\n\n      return\n    }\n\n    if (!__DEV__) {\n      register({\n        target: `node${process.version.slice(1)}`,\n      })\n    }\n\n    const candidates = resolveMigrationScript(workDir, id)\n    const resolvedScripts = candidates.filter(isLoadableMigrationScript)\n\n    if (resolvedScripts.length > 1) {\n      // todo: consider prompt user about which one to run? note: it's likely a mistake if multiple files resolve to the same name\n      throw new Error(\n        `Found multiple migrations for \"${id}\" in current directory ${candidates\n          .map((candidate) => candidate!.relativePath)\n          .join(', ')}`,\n      )\n    }\n\n    const script = resolvedScripts[0]\n    if (!script) {\n      throw new Error(\n        `No migration found for \"${id}\" in current directory. Make sure that the migration file exists and exports a valid migration as its default export.\\n\n Tried the following files:\\n - ${candidates\n   .map((candidate) => candidate.relativePath)\n   .join('\\n - ')}`,\n      )\n    }\n\n    const mod = script.mod\n    if ('up' in mod || 'down' in mod) {\n      // todo: consider adding support for up/down as separate named exports\n      // For now, make sure we reserve the names for future use\n      throw new Error(\n        'Only \"up\" migrations are supported at this time, please use a default export',\n      )\n    }\n\n    const migration: Migration = mod.default\n\n    if (fromExport && !dry) {\n      throw new Error('Can only dry run migrations from a dataset export file')\n    }\n\n    const concurrency = flags.concurrency\n    if (concurrency !== undefined) {\n      if (concurrency > MAX_MUTATION_CONCURRENCY) {\n        throw new Error(\n          `Concurrency exceeds the maximum allowed value of ${MAX_MUTATION_CONCURRENCY}`,\n        )\n      }\n\n      if (concurrency === 0) {\n        throw new Error(`Concurrency must be a positive number, got ${concurrency}`)\n      }\n    }\n\n    const projectConfig = apiClient({\n      requireUser: true,\n      requireProject: true,\n    }).config()\n\n    const apiConfig = {\n      dataset: dataset ?? projectConfig.dataset!,\n      projectId: project ?? projectConfig.projectId!,\n      apiHost: projectConfig.apiHost!,\n      token: projectConfig.token!,\n      apiVersion: 'v2024-01-29',\n    } as const\n    if (dry) {\n      dryRunHandler()\n      return\n    }\n\n    const response =\n      flags.confirm &&\n      (await prompt.single<boolean>({\n        message: `This migration will run on the ${chalk.yellow(\n          chalk.bold(apiConfig.dataset),\n        )} dataset in ${chalk.yellow(chalk.bold(apiConfig.projectId))} project. Are you sure?`,\n        type: 'confirm',\n      }))\n\n    if (response === false) {\n      debug('User aborted migration')\n      return\n    }\n\n    const spinner = output.spinner(`Running migration \"${id}\"`).start()\n    await run({api: apiConfig, concurrency, onProgress: createProgress(spinner)}, migration)\n    spinner.stop()\n\n    function createProgress(progressSpinner: ReturnType<typeof output.spinner>) {\n      return function onProgress(progress: MigrationProgress) {\n        if (!flags.progress) {\n          progressSpinner.stop()\n          return\n        }\n        if (progress.done) {\n          progressSpinner.text = `Migration \"${id}\" completed.\n\n  Project id:  ${chalk.bold(apiConfig.projectId)}\n  Dataset:     ${chalk.bold(apiConfig.dataset)}\n\n  ${progress.documents} documents processed.\n  ${progress.mutations} mutations generated.\n  ${chalk.green(progress.completedTransactions.length)} transactions committed.`\n          progressSpinner.stopAndPersist({symbol: chalk.green('✔')})\n          return\n        }\n\n        ;[null, ...progress.currentTransactions].forEach((transaction) => {\n          progressSpinner.text = `Running migration \"${id}\" ${dry ? 'in dry mode...' : '...'}\n\n  Project id:     ${chalk.bold(apiConfig.projectId)}\n  Dataset:        ${chalk.bold(apiConfig.dataset)}\n  Document type:  ${chalk.bold(migration.documentTypes?.join(','))}\n\n  ${progress.documents} documents processed…\n  ${progress.mutations} mutations generated…\n  ${chalk.blue(progress.pending)} requests pending…\n  ${chalk.green(progress.completedTransactions.length)} transactions committed.\n\n  ${\n    transaction && !progress.done\n      ? `» ${prettyFormat({chalk, subject: transaction, migration, indentSize: 2})}`\n      : ''\n  }`\n        })\n      }\n    }\n\n    async function dryRunHandler() {\n      output.print(`Running migration \"${id}\" in dry mode`)\n\n      if (fromExport) {\n        output.print(`Using export ${chalk.cyan(fromExport)}`)\n      }\n\n      output.print()\n      output.print(`Project id:  ${chalk.bold(apiConfig.projectId)}`)\n      output.print(`Dataset:     ${chalk.bold(apiConfig.dataset)}`)\n\n      for await (const mutation of dryRun({api: apiConfig, exportPath: fromExport}, migration)) {\n        if (!mutation) continue\n        output.print()\n        output.print(\n          prettyFormat({\n            chalk,\n            subject: mutation,\n            migration,\n          }),\n        )\n      }\n    }\n  },\n}\n\nexport default runMigrationCommand\n","import {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliCommandDefinition,\n} from '@sanity/cli'\n\nimport {type StartPreviewServerCommandFlags} from '../../actions/preview/previewAction'\n\nconst helpText = `\nNotes\n  Changing the hostname or port number might require a new entry to the CORS-origins allow list.\n\nOptions\n  --port <port> TCP port to start server on. [default: 3333]\n  --host <host> The local network interface at which to listen. [default: \"127.0.0.1\"]\n\nExamples\n  sanity preview --host=0.0.0.0\n  sanity preview --port=1942\n  sanity preview some/build-output-dir\n`\n\nconst previewCommand: CliCommandDefinition = {\n  name: 'preview',\n  signature: '[BUILD_OUTPUT_DIR] [--port <port>] [--host <host>]',\n  description: 'Starts a server to preview a production build of Sanity Studio',\n  action: async (\n    args: CliCommandArguments<StartPreviewServerCommandFlags>,\n    context: CliCommandContext,\n  ) => {\n    const previewAction = await getPreviewAction()\n\n    return previewAction(args, context)\n  },\n  helpText,\n}\n\nasync function getPreviewAction() {\n  // NOTE: in dev-mode we want to include from `src` so we need to use `.ts` extension\n  // NOTE: this `if` statement is not included in the output bundle\n  if (__DEV__) {\n    // eslint-disable-next-line import/extensions,@typescript-eslint/consistent-type-imports\n    const mod: typeof import('../../actions/preview/previewAction') = require('../../actions/preview/previewAction.ts')\n\n    return mod.default\n  }\n\n  const mod = await import('../../actions/preview/previewAction')\n\n  return mod.default\n}\n\nexport default previewCommand\n","export default {\n  name: 'schema',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Interacts with Sanity Studio schema configurations',\n}\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nconst description = 'Validates all schema types specified in a workspace.'\n\nconst helpText = `\nOptions\n  --workspace <name> The name of the workspace to use when validating all schema types.\n  --format <pretty|ndjson|json> The output format used to print schema errors and warnings.\n  --level <error|warning> The minimum level reported out. Defaults to warning.\n\nExamples\n  # Validates all schema types in a Sanity project with more than one workspace\n  sanity schema validate --workspace default\n\n  # Save the results of the report into a file\n  sanity schema validate > report.txt\n\n  # Report out only errors\n  sanity schema validate --level error\n`\n\nconst validateDocumentsCommand: CliCommandDefinition = {\n  name: 'validate',\n  group: 'schema',\n  signature: '',\n  description,\n  helpText,\n  action: async (args, context) => {\n    const mod = await import('../../actions/schema/validateAction')\n\n    return mod.default(args, context)\n  },\n} satisfies CliCommandDefinition\n\nexport default validateDocumentsCommand\n","/* eslint-disable no-process-env */\nexport const isInteractive =\n  process.stdout.isTTY && process.env.TERM !== 'dumb' && !('CI' in process.env)\n","import {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliCommandDefinition,\n} from '@sanity/cli'\n\nimport {type StartPreviewServerCommandFlags} from '../../actions/preview/previewAction'\nimport {isInteractive} from '../../util/isInteractive'\nimport {getDevAction} from '../dev/devCommand'\n\nconst helpText = `\nNotes\n  Changing the hostname or port number might require a new CORS-entry to be added.\n\nOptions\n  --port <port> TCP port to start server on. [default: 3333]\n  --host <host> The local network interface at which to listen. [default: \"127.0.0.1\"]\n\nExamples\n  sanity start --host=0.0.0.0\n  sanity start --port=1942\n  sanity start some/build-output-dir\n`\n\nconst startCommand: CliCommandDefinition = {\n  name: 'start',\n  signature: '[BUILD_OUTPUT_DIR] [--port <port>] [--host <host>]',\n  description: 'Alias for `sanity preview`',\n  action: async (\n    args: CliCommandArguments<StartPreviewServerCommandFlags>,\n    context: CliCommandContext,\n  ) => {\n    const {output, chalk, prompt} = context\n    const previewAction = await getPreviewAction()\n\n    const warn = (msg: string) => output.warn(chalk.yellow.bgBlack(msg))\n    const error = (msg: string) => output.warn(chalk.red.bgBlack(msg))\n    warn('╭───────────────────────────────────────────────────────────╮')\n    warn('│                                                           │')\n    warn(\"│  You're running Sanity Studio v3. In this version the     │\")\n    warn('│  [start] command is used to preview static builds.        |')\n    warn('│                                                           │')\n    warn('│  To run a development server, use the [npm run dev] or    |')\n    warn('│  [npx sanity dev] command instead. For more information,  │')\n    warn('│  see https://www.sanity.io/help/studio-v2-vs-v3           │')\n    warn('│                                                           │')\n    warn('╰───────────────────────────────────────────────────────────╯')\n    warn('') // Newline to separate from other output\n\n    try {\n      await previewAction(args, context)\n    } catch (err) {\n      if (err.name !== 'BUILD_NOT_FOUND') {\n        throw err\n      }\n\n      error(err.message)\n      error('\\n')\n\n      const shouldRunDevServer =\n        isInteractive &&\n        (await prompt.single({\n          message: 'Do you want to start a development server instead?',\n          type: 'confirm',\n        }))\n\n      if (shouldRunDevServer) {\n        const devAction = await getDevAction()\n        await devAction(args, context)\n      } else {\n        // Indicate that this isn't an expected exit\n        // eslint-disable-next-line no-process-exit\n        process.exit(1)\n      }\n    }\n  },\n  helpText,\n}\n\nasync function getPreviewAction() {\n  // NOTE: in dev-mode we want to include from `src` so we need to use `.ts` extension\n  // NOTE: this `if` statement is not included in the output bundle\n  if (__DEV__) {\n    // eslint-disable-next-line import/extensions,@typescript-eslint/consistent-type-imports\n    const mod: typeof import('../../actions/preview/previewAction') = require('../../actions/preview/previewAction.ts')\n\n    return mod.default\n  }\n\n  const mod = await import('../../actions/preview/previewAction')\n\n  return mod.default\n}\n\nexport default startCommand\n","import {type CliCommandDefinition} from '@sanity/cli'\n\nconst uninstallCommand: CliCommandDefinition = {\n  name: 'uninstall',\n  signature: '[plugin]',\n  helpText: '',\n  description: 'Removes a Sanity plugin from the current Sanity configuration',\n  hideFromHelp: true,\n  action: async (args, context) => {\n    await context.output.error('`sanity uninstall` is no longer supported - use npm/yarn')\n  },\n}\n\nexport default uninstallCommand\n","export function prettifyQuotaError(message: string) {\n  return (err: Error & {statusCode?: number}): Error & {statusCode?: number} => {\n    if (err.statusCode === 402) {\n      err.message = message\n      throw err\n    }\n\n    throw err\n  }\n}\n","import {type CliCommandDefinition, type CliPrompter} from '@sanity/cli'\n\nimport {prettifyQuotaError} from '../../util/prettifyQuotaError'\nimport {type Role} from './types'\n\nconst helpText = `\nOptions\n  --role Role to invite the user as\n\nExamples\n  # Invite a new user to the project (prompt for details)\n  sanity users invite\n\n  # Send a new user invite to the email \"pippi@sanity.io\", prompt for role\n  sanity users invite pippi@sanity.io\n\n  # Send a new user invite to the email \"pippi@sanity.io\", as administrator\n  sanity users invite pippi@sanity.io --role administrator\n`\n\ninterface InviteFlags {\n  role?: string\n}\n\nconst inviteUserCommand: CliCommandDefinition<InviteFlags> = {\n  name: 'invite',\n  group: 'users',\n  signature: '[EMAIL]',\n  helpText,\n  description: 'Invite a new user to the project',\n  action: async (args, context) => {\n    const {apiClient, output, prompt} = context\n    const [selectedEmail] = args.argsWithoutOptions\n    const flags = args.extOptions\n\n    const client = apiClient().clone().config({useProjectHostname: false, apiVersion: '2021-06-07'})\n    const {projectId} = client.config()\n    const roles = (await client.request<Role[]>({uri: `/projects/${projectId}/roles`})).filter(\n      (role) => role.appliesToUsers,\n    )\n    const email = selectedEmail || (await promptForEmail(prompt))\n    const selectedRole = flags.role || (await promptForRole(prompt, roles))\n    const role = roles.find(({name}) => name.toLowerCase() === selectedRole.toLowerCase())\n    if (!role) {\n      throw new Error(`Role name \"${selectedRole}\" not found`)\n    }\n\n    await client\n      .clone()\n      .request({\n        method: 'POST',\n        uri: `/invitations/project/${projectId}`,\n        body: {email, role: role.name},\n        useGlobalApi: true,\n        maxRedirects: 0,\n      })\n      .catch(\n        prettifyQuotaError(\n          'Project is already at user quota, add billing details to the project in order to allow overage charges.',\n        ),\n      )\n\n    output.print(`Invitation sent to ${email}`)\n  },\n}\n\nexport default inviteUserCommand\n\nfunction promptForEmail(prompt: CliPrompter): Promise<string> {\n  return prompt.single({\n    type: 'input',\n    message: 'Email to invite:',\n    filter: (val) => val.trim(),\n    validate: (name) => {\n      if (!name || !name.includes('@')) {\n        return 'Invalid email'\n      }\n\n      return true\n    },\n  })\n}\n\nfunction promptForRole(prompt: CliPrompter, roles: Role[]): Promise<string> {\n  return prompt.single({\n    type: 'list',\n    message: 'Which role should the user have?',\n    choices: roles.map((role) => ({\n      value: role.name,\n      name: `${role.title} (${role.description})`,\n    })),\n  })\n}\n","import {type CliCommandDefinition} from '@sanity/cli'\nimport {size, sortBy} from 'lodash'\n\nimport {type Invite, type PartialProjectResponse, type User} from './types'\n\nconst sortFields = ['id', 'name', 'role', 'date']\n\nconst helpText = `\nOptions\n  --no-invitations Don't include pending invitations\n  --no-robots Don't include robots (token users)\n  --sort <field> Sort users by specified column: ${sortFields.join(', ')}\n  --order <asc/desc> Sort output ascending/descending\n\nExamples\n  # List all users of the project\n  sanity users list\n\n  # List all users of the project, but exclude pending invitations and robots\n  sanity users list --no-invitations --no-robots\n\n  # List all users, sorted by role\n  sanity users list --sort role\n`\n\nconst listUsersCommand: CliCommandDefinition = {\n  name: 'list',\n  group: 'users',\n  signature: '',\n  helpText,\n  description: 'List all users of the project',\n  action: async (args, context) => {\n    const {apiClient, output, chalk} = context\n    const {sort, order, robots, invitations} = {\n      sort: 'date',\n      order: 'asc',\n      robots: true,\n      invitations: true,\n      ...args.extOptions,\n    }\n\n    if (!sortFields.includes(sort)) {\n      throw new Error(`Can't sort by field \"${sort}\". Must be one of ${sortFields.join(', ')}`)\n    }\n\n    if (order !== 'asc' && order !== 'desc') {\n      throw new Error(`Unknown sort order \"${order}\", must be either \"asc\" or \"desc\"`)\n    }\n\n    const client = apiClient()\n    const globalClient = client.clone().config({useProjectHostname: false})\n    const {projectId} = client.config()\n\n    const useGlobalApi = true\n    const [pendingInvitations, project] = await Promise.all([\n      invitations\n        ? globalClient\n            .request<Invite[]>({uri: `/invitations/project/${projectId}`, useGlobalApi})\n            .then(getPendingInvitations)\n        : [],\n      globalClient.request<PartialProjectResponse>({uri: `/projects/${projectId}`, useGlobalApi}),\n    ])\n\n    const memberIds = project.members.map((member) => member.id)\n    const users = await globalClient\n      .request<User | User[]>({uri: `/users/${memberIds.join(',')}`, useGlobalApi})\n      .then((user) => (Array.isArray(user) ? user : [user]))\n\n    const projectMembers = project.members\n      .map((member) => ({\n        ...member,\n        ...getUserProps(users.find((candidate) => candidate.id === member.id)),\n      }))\n      .filter((member) => !member.isRobot || robots)\n\n    const members = [...projectMembers, ...pendingInvitations]\n\n    const ordered = sortBy(\n      members.map(({id, name, role, date}) => [id, name, role, date]),\n      [sortFields.indexOf(sort)],\n    )\n\n    const rows = order === 'asc' ? ordered : ordered.reverse()\n\n    const maxWidths = rows.reduce(\n      (max, row) => row.map((current, index) => Math.max(size(current), max[index])),\n      sortFields.map((str) => size(str)),\n    )\n\n    const printRow = (row: string[]) => {\n      const isInvite = row[0] === '<pending>'\n      const textRow = row.map((col, i) => `${col}`.padEnd(maxWidths[i])).join('   ')\n      return isInvite ? chalk.dim(textRow) : textRow\n    }\n\n    output.print(chalk.cyan(printRow(sortFields)))\n    rows.forEach((row) => output.print(printRow(row)))\n  },\n}\n\nfunction getUserProps(user: User | undefined) {\n  const {displayName: name, createdAt: date} = user || {}\n  return {name: name || '', date: date || ''}\n}\n\nfunction getPendingInvitations(invitations: Invite[]) {\n  return invitations\n    .filter((invite) => !invite.isAccepted && !invite.isRevoked && !invite.acceptedByUserId)\n    .map((invite) => ({\n      id: '<pending>',\n      name: invite.email,\n      role: invite.role,\n      date: invite.createdAt,\n    }))\n}\n\nexport default listUsersCommand\n","import {type CliCommandGroupDefinition} from '@sanity/cli'\n\nexport const usersGroup: CliCommandGroupDefinition = {\n  name: 'users',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Manages users of your Sanity project',\n}\n\nexport default usersGroup\n","import {type CliCommandDefinition, type CliCommandGroupDefinition} from '@sanity/cli'\n\nimport backupGroup from './backup/backupGroup'\nimport disableBackupCommand from './backup/disableBackupCommand'\nimport downloadBackupCommand from './backup/downloadBackupCommand'\nimport enableBackupCommand from './backup/enableBackupCommand'\nimport listBackupCommand from './backup/listBackupCommand'\nimport buildCommand from './build/buildCommand'\nimport checkCommand from './check/checkCommand'\nimport configCheckCommand from './config/configCheckCommand'\nimport addCorsOriginCommand from './cors/addCorsOriginCommand'\nimport corsGroup from './cors/corsGroup'\nimport deleteCorsOriginCommand from './cors/deleteCorsOriginCommand'\nimport listCorsOriginsCommand from './cors/listCorsOriginsCommand'\nimport aliasDatasetCommand from './dataset/alias/aliasCommands'\nimport copyDatasetCommand from './dataset/copyDatasetCommand'\nimport createDatasetCommand from './dataset/createDatasetCommand'\nimport datasetGroup from './dataset/datasetGroup'\nimport datasetVisibilityCommand from './dataset/datasetVisibilityCommand'\nimport deleteDatasetCommand from './dataset/deleteDatasetCommand'\nimport exportDatasetCommand from './dataset/exportDatasetCommand'\nimport importDatasetCommand from './dataset/importDatasetCommand'\nimport listDatasetsCommand from './dataset/listDatasetsCommand'\nimport deployCommand from './deploy/deployCommand'\nimport undeployCommand from './deploy/undeployCommand'\nimport devCommand from './dev/devCommand'\nimport createDocumentsCommand from './documents/createDocumentsCommand'\nimport deleteDocumentsCommand from './documents/deleteDocumentsCommand'\nimport documentsGroup from './documents/documentsGroup'\nimport getDocumentsCommand from './documents/getDocumentsCommand'\nimport queryDocumentsCommand from './documents/queryDocumentsCommand'\nimport validateDocumentsCommand from './documents/validateDocumentsCommand'\nimport execCommand from './exec/execCommand'\nimport deleteGraphQLAPICommand from './graphql/deleteGraphQLAPICommand'\nimport deployGraphQLAPICommand from './graphql/deployGraphQLAPICommand'\nimport graphqlGroup from './graphql/graphqlGroup'\nimport listGraphQLAPIsCommand from './graphql/listGraphQLAPIsCommand'\nimport createHookCommand from './hook/createHookCommand'\nimport deleteHookCommand from './hook/deleteHookCommand'\nimport hookGroup from './hook/hookGroup'\nimport listHookLogsCommand from './hook/listHookLogsCommand'\nimport listHooksCommand from './hook/listHooksCommand'\nimport printHookAttemptCommand from './hook/printHookAttemptCommand'\nimport createMigrationCommand from './migration/createMigrationCommand'\nimport listMigrationsCommand from './migration/listMigrationsCommand'\nimport migrationGroup from './migration/migrationGroup'\nimport runMigrationCommand from './migration/runMigrationCommand'\nimport previewCommand from './preview/previewCommand'\nimport schemaGroup from './schema/schemaGroup'\nimport validateSchemaCommand from './schema/validateSchemaCommand'\nimport startCommand from './start/startCommand'\nimport uninstallCommand from './uninstall/uninstallCommand'\nimport inviteUserCommand from './users/inviteUserCommand'\nimport listUsersCommand from './users/listUsersCommand'\nimport usersGroup from './users/usersGroup'\n\nconst commands: (CliCommandDefinition | CliCommandGroupDefinition)[] = [\n  buildCommand,\n  checkCommand,\n  configCheckCommand,\n  datasetGroup,\n  deployCommand,\n  undeployCommand,\n  listDatasetsCommand,\n  createDatasetCommand,\n  datasetVisibilityCommand,\n  exportDatasetCommand,\n  importDatasetCommand,\n  deleteDatasetCommand,\n  copyDatasetCommand,\n  aliasDatasetCommand,\n  backupGroup,\n  listBackupCommand,\n  downloadBackupCommand,\n  disableBackupCommand,\n  enableBackupCommand,\n  corsGroup,\n  listCorsOriginsCommand,\n  addCorsOriginCommand,\n  deleteCorsOriginCommand,\n  usersGroup,\n  inviteUserCommand,\n  listUsersCommand,\n  hookGroup,\n  listHooksCommand,\n  createHookCommand,\n  migrationGroup,\n  createMigrationCommand,\n  runMigrationCommand,\n  listMigrationsCommand,\n  deleteHookCommand,\n  listHookLogsCommand,\n  printHookAttemptCommand,\n  documentsGroup,\n  getDocumentsCommand,\n  queryDocumentsCommand,\n  deleteDocumentsCommand,\n  createDocumentsCommand,\n  validateDocumentsCommand,\n  graphqlGroup,\n  listGraphQLAPIsCommand,\n  deployGraphQLAPICommand,\n  deleteGraphQLAPICommand,\n  devCommand,\n  startCommand,\n  schemaGroup,\n  validateSchemaCommand,\n  previewCommand,\n  uninstallCommand,\n  execCommand,\n]\n\n/**\n * @deprecated Not actually deprecated, but these are internals and should not be relied upon outside of the Sanity team\n * @internal\n */\nexport const cliProjectCommands = {\n  requiredCliVersionRange: '^3.0.0',\n  commands,\n}\n"],"names":["defaultApiVersion","datasetBackupGroup","name","signature","description","isGroupRoot","hideFromHelp","parseApiErr","err","_a","_b","_c","_d","apiErr","code","statusCode","message","statusMessage","response","body","data","JSON","stringify","debug","debugIt","MAX_DATASET_NAME_LENGTH","validateDatasetName","datasetName","concat","toLowerCase","length","test","promptForDatasetName","prompt","options","arguments","undefined","single","type","validate","chooseDatasetPrompt","context","apiClient","allowCreation","client","datasets","list","hasProduction","find","dataset","datasetChoices","map","value","selected","choices","Separator","newDatasetName","default","create","resolveApiClient","apiVersion","projectId","token","config","Error","selectedDataset","withConfig","helpText","disableDatasetBackupCommand","group","action","args","output","chalk","argsWithoutOptions","request","method","headers","Authorization","uri","enabled","print","green","error","red","debug$1","require","archiver","archiveDir","tmpOutDir","outFilePath","progressCb","Promise","resolve","reject","archiveDestination","createWriteStream","on","archive","gzip","gzipOptions","level","zlib","constants","Z_DEFAULT_COMPRESSION","stack","progress","fs","processedBytes","pipe","directory","finalize","maxBackupIdsShown","chooseBackupIdPrompt","query","limit","toString","backups","backupIdChoices","backup","id","cleanupTmpDir","tmpDir","rimraf","MAX_RETRIES","BACKOFF_DELAY_BASE","exponentialBackoff","retryCount","Math","pow","withRetry","operation","maxRetries","retryDelay","setTimeout","CONNECTION_TIMEOUT","READ_TIMEOUT","getIt","keepAlive","promise","downloadAsset","url","fileName","fileType","outDir","normalizedFileName","path","basename","assetFilePath","getAssetFilePath","maxRedirects","timeout","connect","socket","stream","pipeline","join","downloadDocument","PaginatedGetBackupStream","Readable","constructor","backupId","objectMode","cursor","totalFiles","_read","fetchNextBackupPage","files","forEach","file","push","nextCursor","destroy","msg","String","newProgress","startStep","spinner","start","lastProgress","step","Date","now","elapsed","prettyMs","current","total","text","set","succeed","update","fail","humanFileSize","size","i","floor","log","toFixed","isPathDirName","filepath","createDebug","DEFAULT_DOWNLOAD_CONCURRENCY","MAX_DOWNLOAD_CONCURRENCY","parseCliFlags","yargs","hideBin","argv","process","slice","downloadBackupCommand","opts","prepareBackupOptions","outFileName","bold","cyan","padEnd","progressSpinner","mkdtemp","tmpdir","dir","mkdirSync","recursive","tmpOutDocumentsFile","docOutStream","docWriteMutex","Mutex","backupFileStream","totalItemsDownloaded","pMap","doc","runExclusive","write","concurrency","end","finished","flags","workDir","isString","defaultOutFileName","out","absolutify","input","filter","overwrite","existsSync","shouldOverwrite","dirname","enableDatasetBackupCommand","DEFAULT_LIST_BACKUP_LIMIT","alias","listDatasetBackupCommand","Number","MAX_SAFE_INTEGER","before","after","parsedBefore","processDateFlags","parsedAfter","isAfter","table","Table","columns","title","alignment","createdAt","addRow","resource","lightFormat","parse","printTable","date","parsedDate","isValid","buildCommand","overrides","buildAction","getBuildAction","mod","checkCommand","_args","configCheckCommand","wildcardReplacement","portReplacement","addCorsOrigin","givenOrigin","origin","filterAndValidateOrigin","promptForOrigin","hasWildcard","includes","promptForWildcardConfirmation","allowCredentials","credentials","promptForCredentials","Boolean","requireUser","requireProject","oneline","__template","yellow","logSymbols","warning","underline","replace","filterOrigin","validateOrigin","example","parsed","host","protocol","RegExp","result","addCorsOriginCommand","extOptions","isFile","cwd","warn","success","corsGroup","deleteCorsOriginCommand","originId","specified","specifiedOrigin","origins","listCorsOriginsCommand","validateDatasetAliasName","promptForDatasetAliasName","ALIAS_PREFIX","listAliases","createAlias","aliasName","modify","updateAlias","unlinkAlias","removeAlias","createAliasHandler","targetDataset","nameError","aliases","projectFeatures","all","then","sets","ds","aliasClient.listAliases","aliasOutputName","startsWith","substring","datasetErr","canCreateAlias","aliasClient.createAlias","option","deleteAliasHandler","force","dsError","fetchedAliases","linkedAlias","elem","trim","aliasClient.removeAlias","linkAliasHandler","da","aliasClient.updateAlias","unlinkAliasHandler","aliasClient.unlinkAlias","aliasCommand","verb","listDatasetCopyJobs","offset","job","state","updatedAt","sourceDataset","withHistory","timeStarted","formatDistanceToNow","parseISO","timeTaken","formatDistance","color","getClientUrl","useCdn","base","cdnUrl","Observable","observer","progressSource","EventSource","stopped","onError","close","next","onChannelError","onMessage","event","onComplete","removeEventListener","complete","addEventListener","followProgress","jobId","currentProgress","listenUrl","subscribe","copyDatasetCommand","attach","shouldSkipHistory","existingDatasets","sourceDatasetName","targetDatasetName","skipHistory","detach","allowedModes","createDatasetCommand","visibility","canCreatePrivate","defaultAclMode","aclMode","promptForDatasetVisibility","mode","datasetGroup","datasetVisibilityCommand","edit","curr","deleteDatasetCommand","delete","noop","parseFlags","rawFlags","types","split","assetConcurrency","parseInt","raw","assets","drafts","compress","exportDatasetCommand","targetDestination","destinationPath","outputPath","getOutputPath","currentStep","onProgress","exportDataset","destination","dstPath","isAbsolute","dstStats","stat","catch","looksLikeFile","indexOf","createPath","mkdir","finalPath","str","toBoolIfSet","flag","allowAssetsInDifferentDataset","allowFailingAssets","replaceAssets","skipCrossDatasetReferences","allowSystemDocuments","missing","importDatasetCommand","fromInitCommand","getMutationOperation","target","determineTargetDataset","isUrl","inputStream","assetsBase","sourceIsFolder","getUrlStream","sourceFile","fileStats","isDirectory","createReadStream","importClient","clone","stepStart","spinInterval","percent","lengthComputable","sameStep","getPercentage","clearInterval","prevStep","prevStepStart","timeSpent","secondsDecimalDigits","setInterval","endTask","_ref","numDocs","warnings","sanityImport","printWarnings","isNonRefConflict","details","responseBody","shouldCreate","padStart","onlyBody","assetFails","bind","listAliasesHandler","listDatasetsCommand","deployCommand","undeployCommand","devCommand","devAction","getDevAction","createDocumentsCommand","watch","useJson5","json5","contentPath","content","readFile","writeDocuments","getResultMessage","docId","uuid","ext","tmpFile","os","defaultValue","getDocument","_id","_type","writeFile","editor","getEditor","registerUnlinkOnSigInt","chokidar","readAndPerformCreatesFromFile","execa","bin","stdio","sync","unlink","filePath","isEqual","writeResult","exit","documents","docs","Array","isArray","mutations","index","validateDocument","isIdentifiedSanityDocument","createIfNotExists","createOrReplace","transaction","commit","arr","isSingle","isPlainObject","getErrorMessage","isSanityDocumentish","joiner","results","res","created","skipped","defaultEditor","platform","env","VISUAL","EDITOR","shift","deleteDocumentsCommand","ids","reduce","trx","deleted","notFound","pluralize","documentsGroup","identity","inp","colorizeJson","formatters","punctuator","white","key","string","number","literal","whitespace","json","tokenize","prevToken","formatter","getDocumentsCommand","pretty","queryDocumentsCommand","project","anonymous","cliConfig","requireDataset","api","baseClient","originalDataset","originalProjectId","fetch","fallbackApiVersion","SANITY_CLI_QUERY_API_VERSION","validateDocumentsCommand","execCommand","deleteGraphQLAPICommand","deployGraphQLAPICommand","graphqlGroup","listGraphQLAPIsCommand","createHookCommand","projectInfo","projects","getById","organizationId","manageUrl","open","deleteHookCommand","hookId","promptForHook","promptForHook$1","specifiedName","hooks","hook","hookGroup","printHookAttemptCommand","attemptId","attempt","resultCode","resultBody","failureReason","inProgress","getStatus","isFailure","formatFailure","includeHelp","help","listHookLogsCommand","messages","attempts","groupedAttempts","groupBy","populated","totalMessages","printMessage","detailed","printSeparator","skip","status","failureCount","inspect","payload","colors","prefix","failure","duration","listHooksCommand","httpMethod","MIGRATIONS_DIRECTORY","MIGRATION_SCRIPT_EXTENSIONS","minimalAdvanced","_ref2","migrationName","documentTypes","t","minimalSimple","_ref3","renameField","_ref4","renameType","_ref5","stringToPTE","_ref6","TEMPLATES","template","createMigrationCommand","suffix","templatesByName","Object","fromEntries","definedTemplate","sluggedName","deburr","destDir","renderedTemplate","definitionFile","resolveMigrationScript","flatMap","location","relativePath","absolutePath","isLoadableMigrationScript","script","migrate","listMigrationCommand","_","migrations","resolveMigrations","definedMigration","migration","unregister","register","version","migrationsDir","migrationEntries","readdir","withFileTypes","entry","entryName","removeMigrationScriptExtension","candidates","candidate","endsWith","migrationGroup","maxKeyLength","children","depth","entries","_ref7","child","max","formatTree","_ref8","node","paddingLength","indent","getNodes","getLeaves","_ref9","nodes","getMessage","_ref10","isLast","nextIndent","leaves","nested","first","rest","firstPadding","repeat","elbow","subsequentPadding","firstMessage","subsequentMessages","marker","convertToTree","root","addNode","tree","pathToString","isTty","isatty","prettyFormat","_ref11","subject","indentSize","subjectEntry","badge","prettyFormatMutation","encodeItemRef","ref","_key","badgeStyle","variant","styles","info","bgWhite","black","incremental","bgGreen","maybeDestructive","bgYellow","destructive","bgRed","label","mutationImpact","patch","documentId","mutation","document","listFormatter","Intl","ListFormat","mutationHeader","mutationType","documentType","format","_ref12","lock","ifRevision","header","padding","patches","flat","formatPatchMutation","op","formattedType","amount","position","referenceItem","items","startIndex","endIndex","line","MAX_MUTATION_CONCURRENCY","DEFAULT_MUTATION_CONCURRENCY","runMigrationCommand","fromExport","dry","dryRun","resolvedScripts","projectConfig","apiConfig","apiHost","dryRunHandler","confirm","run","createProgress","stop","done","completedTransactions","stopAndPersist","symbol","currentTransactions","blue","pending","exportPath","previewCommand","previewAction","getPreviewAction","getPreviewAction$1","schemaGroup","isInteractive","stdout","isTTY","TERM","startCommand","bgBlack","shouldRunDevServer","uninstallCommand","prettifyQuotaError","inviteUserCommand","selectedEmail","useProjectHostname","roles","role","appliesToUsers","email","promptForEmail","selectedRole","promptForRole","_ref13","useGlobalApi","val","sortFields","listUsersCommand","sort","order","robots","invitations","globalClient","pendingInvitations","getPendingInvitations","memberIds","members","member","users","user","projectMembers","getUserProps","isRobot","ordered","sortBy","_ref14","rows","reverse","maxWidths","row","printRow","isInvite","textRow","col","dim","displayName","invite","isAccepted","isRevoked","acceptedByUserId","usersGroup","commands","aliasDatasetCommand","backupGroup","listBackupCommand","disableBackupCommand","enableBackupCommand","listMigrationsCommand","validateSchemaCommand","cliProjectCommands","requiredCliVersionRange"],"mappings":"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"}