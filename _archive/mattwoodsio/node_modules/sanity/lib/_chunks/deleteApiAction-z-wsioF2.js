import { hideBin } from 'yargs/helpers';
import yargs from 'yargs/yargs';
import { getGraphQLAPIs } from './getGraphQLAPIs-CF_07sLx.js';
function parseCliFlags(args) {
  return yargs(hideBin(args.argv || process.argv).slice(2)).option("api", {
    type: "string"
  }).option("project", {
    type: "string"
  }).option("dataset", {
    type: "string"
  }).option("tag", {
    type: "string",
    default: "default"
  }).option("force", {
    type: "boolean"
  }).argv;
}
async function deleteGraphQLApi(args, context) {
  const flags = await parseCliFlags(args);
  const {
    apiClient,
    output,
    prompt
  } = context;
  let projectId = flags.project;
  let dataset = flags.dataset;
  let tag = flags.tag;
  if (flags.api) {
    const apiDefs = await getGraphQLAPIs(context);
    const apiDef = apiDefs.find(def => def.id === flags.api);
    if (!apiDef) {
      throw new Error('GraphQL API "'.concat(flags.api, '" not found'));
    }
    if (projectId) {
      output.warn("Both --api and --project specified, using --project ".concat(projectId));
    } else {
      projectId = apiDef.projectId;
    }
    if (dataset) {
      output.warn("Both --api and --dataset specified, using --dataset ".concat(dataset));
    } else {
      dataset = apiDef.dataset;
    }
    if (tag && apiDef.tag) {
      output.warn("Both --api and --tag specified, using --tag ".concat(tag));
    } else {
      tag = apiDef.tag || "default";
    }
  }
  let client;
  if (!projectId || !dataset) {
    client = apiClient({
      requireUser: true,
      requireProject: true
    }).config({
      apiVersion: "2023-08-01"
    });
    projectId = projectId || client.config().projectId;
    dataset = dataset || client.config().dataset;
  } else {
    client = apiClient({
      requireProject: false,
      requireUser: true
    }).config({
      projectId,
      dataset
    });
  }
  const confirmMessage = tag === "default" ? 'Are you absolutely sure you want to delete the current GraphQL API connected to the "'.concat(dataset, '" dataset in project ').concat(projectId, "?") : 'Are you absolutely sure you want to delete the GraphQL API connected to the "'.concat(dataset, '" dataset in project ').concat(projectId, ', tagged "').concat(tag, '"?');
  const confirmedDelete = flags.force || (await prompt.single({
    type: "confirm",
    message: confirmMessage,
    default: false
  }));
  if (!confirmedDelete) {
    return;
  }
  if (projectId !== client.config().projectId) {
    client = client.clone().config({
      projectId
    });
  }
  try {
    await client.request({
      url: "/apis/graphql/".concat(dataset, "/").concat(tag),
      method: "DELETE"
    });
  } catch (err) {
    throw err;
  }
  output.print("GraphQL API deleted");
}
export { deleteGraphQLApi as default };
//# sourceMappingURL=deleteApiAction-z-wsioF2.js.map
