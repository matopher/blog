import { generateHelpUrl } from '@sanity/generate-help-url';
import fs from 'fs';
import path from 'path';
import resolveFrom from 'resolve-from';
import semver from 'semver';
import execa from 'execa';
import { readFile } from 'fs/promises';
import oneline from 'oneline';
import { performance } from 'perf_hooks';
const PACKAGES = [{
  name: "react",
  supported: ["^18"],
  deprecatedBelow: null
}, {
  name: "react-dom",
  supported: ["^18"],
  deprecatedBelow: null
}];
function checkStudioDependencyVersions(workDir) {
  const manifest = readPackageJson$1(path.join(workDir, "package.json"));
  const dependencies = {
    ...manifest.dependencies,
    ...manifest.devDependencies
  };
  const packageInfo = PACKAGES.map(pkg => {
    const dependency = dependencies[pkg.name];
    if (!dependency) {
      return false;
    }
    const manifestPath = resolveFrom.silent(workDir, path.join(pkg.name, "package.json"));
    const installed = semver.coerce(manifestPath ? readPackageJson$1(manifestPath).version : dependency.replace(/[\D.]/g, ""));
    if (!installed) {
      return false;
    }
    const supported = pkg.supported.join(" || ");
    const isUntested = !semver.satisfies(installed, supported) && semver.gtr(installed, supported);
    const isUnsupported = !semver.satisfies(installed, supported) && !isUntested;
    const isDeprecated = pkg.deprecatedBelow ? semver.ltr(installed, pkg.deprecatedBelow) : false;
    return {
      ...pkg,
      installed,
      isUnsupported,
      isDeprecated,
      isUntested
    };
  });
  const installedPackages = packageInfo.filter(inp => inp !== false);
  const unsupported = installedPackages.filter(pkg => pkg.isUnsupported);
  const deprecated = installedPackages.filter(pkg => !pkg.isUnsupported && pkg.isDeprecated);
  const untested = installedPackages.filter(pkg => pkg.isUntested);
  if (deprecated.length > 0) {
    console.warn("\n[WARN] The following package versions have been deprecated and should be upgraded:\n\n  ".concat(listPackages(deprecated), "\n\nSupport for these will be removed in a future release!\n\n  ").concat(getUpgradeInstructions(deprecated), "\n"));
  }
  if (untested.length > 0) {
    console.warn("\n[WARN] The following package versions have not yet been marked as supported:\n\n  ".concat(listPackages(untested), "\n\nYou _may_ encounter bugs while using these versions.\n\n  ").concat(getDowngradeInstructions(untested), "\n"));
  }
  if (unsupported.length > 0) {
    console.error("\n[ERROR] The following package versions are no longer supported and needs to be upgraded:\n\n  ".concat(listPackages(unsupported), "\n\n  ").concat(getUpgradeInstructions(unsupported), "\n"));
    process.exit(1);
  }
}
function listPackages(pkgs) {
  return pkgs.map(pkg => "".concat(pkg.name, " (installed: ").concat(pkg.installed, ", want: ").concat(pkg.deprecatedBelow || pkg.supported.join(" || "), ")")).join("\n  ");
}
function getUpgradeInstructions(pkgs) {
  const inst = pkgs.map(pkg => {
    const [highestSupported] = pkg.supported.map(version => (semver.coerce(version) || {
      version: ""
    }).version).sort(semver.rcompare);
    return '"'.concat(pkg.name, "@").concat(highestSupported, '"');
  }).join(" ");
  return "To upgrade, run either:\n\n  npm install ".concat(inst, "\n\n  or\n\n  yarn add ").concat(inst, "\n\n  or\n\n  pnpm add ").concat(inst, "\n\n\nRead more at ").concat(generateHelpUrl("upgrade-packages"));
}
function getDowngradeInstructions(pkgs) {
  const inst = pkgs.map(pkg => {
    const [highestSupported] = pkg.supported.map(version => (semver.coerce(version) || {
      version: ""
    }).version).sort(semver.rcompare);
    return '"'.concat(pkg.name, "@").concat(highestSupported, '"');
  }).join(" ");
  return "To downgrade, run either:\n\n  yarn add ".concat(inst, "\n\n  or\n\n  npm install ").concat(inst, "\n\n  or\n\n  pnpm install ").concat(inst);
}
function readPackageJson$1(filePath) {
  try {
    return JSON.parse(fs.readFileSync(filePath, "utf8"));
  } catch (err) {
    throw new Error('Failed to read "'.concat(filePath, '": ').concat(err.message));
  }
}
var peerDependencies = {
  react: "^18",
  "react-dom": "^18",
  "styled-components": "^5.2 || ^6"
};
var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", {
  value: __freeze(raw || cooked.slice())
}));
var _a, _b, _c, _d;
const defaultStudioManifestProps = {
  name: "studio",
  version: "1.0.0"
};
async function checkRequiredDependencies(context) {
  const {
    workDir: studioPath,
    output
  } = context;
  const [studioPackageManifest, installedStyledComponentsVersion] = await Promise.all([await readPackageManifest(path.join(studioPath, "package.json"), defaultStudioManifestProps), await readModuleVersion(studioPath, "styled-components")]);
  const wantedStyledComponentsVersionRange = peerDependencies["styled-components"];
  const declaredStyledComponentsVersion = studioPackageManifest.dependencies["styled-components"];
  if (!declaredStyledComponentsVersion) {
    const [file, ...args] = process.argv;
    const deps = {
      "styled-components": wantedStyledComponentsVersionRange
    };
    await installDependencies(deps, context);
    await execa(file, args, {
      cwd: studioPath,
      stdio: "inherit"
    });
    return {
      didInstall: true
    };
  }
  let minDeclaredStyledComponentsVersion = null;
  try {
    minDeclaredStyledComponentsVersion = semver.minVersion(declaredStyledComponentsVersion);
  } catch (err) {}
  if (!minDeclaredStyledComponentsVersion) {
    throw new Error(oneline(_a || (_a = __template(["\n      Declared dependency `styled-components` has an invalid version range:\n      `", "`.\n    "], ["\n      Declared dependency \\`styled-components\\` has an invalid version range:\n      \\`", "\\`.\n    "])), declaredStyledComponentsVersion));
  }
  if (isComparableRange(declaredStyledComponentsVersion) && !semver.satisfies(minDeclaredStyledComponentsVersion, wantedStyledComponentsVersionRange)) {
    output.warn(oneline(_b || (_b = __template(["\n      Declared version of styled-components (", ")\n      is not compatible with the version required by sanity (", ").\n      This might cause problems!\n    "])), declaredStyledComponentsVersion, wantedStyledComponentsVersionRange));
  }
  if (!installedStyledComponentsVersion) {
    throw new Error(oneline(_c || (_c = __template(["\n      Declared dependency `styled-components` is not installed - run\n      `npm install`, `yarn install` or `pnpm install` to install it before re-running this command.\n    "], ["\n      Declared dependency \\`styled-components\\` is not installed - run\n      \\`npm install\\`, \\`yarn install\\` or \\`pnpm install\\` to install it before re-running this command.\n    "]))));
  }
  if (!semver.satisfies(installedStyledComponentsVersion, wantedStyledComponentsVersionRange)) {
    output.warn(oneline(_d || (_d = __template(["\n      Installed version of styled-components (", ")\n      is not compatible with the version required by sanity (", ").\n      This might cause problems!\n    "])), installedStyledComponentsVersion, wantedStyledComponentsVersionRange));
  }
  return {
    didInstall: false
  };
}
async function readModuleVersion(studioPath, moduleName) {
  const manifestPath = resolveFrom.silent(studioPath, path.join(moduleName, "package.json"));
  return manifestPath ? (await readPackageManifest(manifestPath)).version : null;
}
async function readPackageManifest(packageJsonPath) {
  let defaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let manifest;
  try {
    manifest = {
      ...defaults,
      ...(await readPackageJson(packageJsonPath))
    };
  } catch (err) {
    throw new Error('Failed to read "'.concat(packageJsonPath, '": ').concat(err.message));
  }
  if (!isPackageManifest(manifest)) {
    throw new Error('Failed to read "'.concat(packageJsonPath, '": Invalid package manifest'));
  }
  const {
    name,
    version,
    dependencies = {},
    devDependencies = {}
  } = manifest;
  return {
    name,
    version,
    dependencies,
    devDependencies
  };
}
async function installDependencies(dependencies, context) {
  const {
    output,
    prompt,
    workDir,
    cliPackageManager
  } = context;
  const packages = [];
  output.print("The Sanity studio needs to install missing dependencies:");
  for (const [pkgName, version] of Object.entries(dependencies)) {
    const declaration = "".concat(pkgName, "@").concat(version);
    output.print("- ".concat(declaration));
    packages.push(declaration);
  }
  if (!cliPackageManager) {
    output.error("ERROR: Could not determine package manager choice - run `npm install` or equivalent");
    return;
  }
  const {
    getPackageManagerChoice,
    installNewPackages
  } = cliPackageManager;
  const {
    mostOptimal,
    chosen: pkgManager
  } = await getPackageManagerChoice(workDir, {
    prompt
  });
  if (mostOptimal && pkgManager !== mostOptimal) {
    output.warn("WARN: This project appears to be installed with or using ".concat(mostOptimal, " - using a different package manager _may_ result in errors."));
  }
  await installNewPackages({
    packages,
    packageManager: pkgManager
  }, context);
}
function isPackageManifest(item) {
  return typeof item === "object" && item !== null && "name" in item && "version" in item;
}
function isComparableRange(range) {
  return /^[\^~]?\d+(\.\d+)?(\.\d+)?$/.test(range);
}
function readPackageJson(filePath) {
  return readFile(filePath, "utf8").then(res => JSON.parse(res));
}
function getTimer() {
  const timings = {};
  const startTimes = {};
  function start(name) {
    if (typeof startTimes[name] !== "undefined") {
      throw new Error('Timer "'.concat(name, '" already started, cannot overwrite'));
    }
    startTimes[name] = performance.now();
  }
  function end(name) {
    if (typeof startTimes[name] === "undefined") {
      throw new Error('Timer "'.concat(name, '" never started, cannot end'));
    }
    timings[name] = performance.now() - startTimes[name];
    return timings[name];
  }
  return {
    start,
    end,
    getTimings: () => timings
  };
}
export { checkRequiredDependencies, checkStudioDependencyVersions, getTimer };
//# sourceMappingURL=timing-DjElMkC8.js.map
