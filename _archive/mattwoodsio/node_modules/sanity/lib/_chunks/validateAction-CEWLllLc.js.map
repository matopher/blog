{"version":3,"file":"validateAction-CEWLllLc.js","sources":["../../src/_internal/cli/actions/validation/reporters/jsonReporter.ts","../../src/_internal/cli/actions/validation/reporters/ndjsonReporter.ts","../../src/_internal/cli/actions/validation/reporters/prettyReporter/util.ts","../../src/_internal/cli/actions/validation/reporters/prettyReporter/formatDocumentValidation.ts","../../src/_internal/cli/actions/validation/reporters/prettyReporter/prettyReporter.ts","../../src/_internal/cli/actions/validation/reporters/index.ts","../../src/_internal/cli/actions/validation/validateDocuments.ts","../../src/_internal/cli/actions/validation/validateAction.ts"],"sourcesContent":["import {type BuiltInValidationReporter} from '../validateAction'\n\n// TODO: replace with Array.fromAsync when it's out of stage3\nasync function arrayFromAsync<T>(iterable: AsyncIterable<T>) {\n  const results: T[] = []\n  for await (const item of iterable) results.push(item)\n  return results\n}\n\nexport const json: BuiltInValidationReporter = async ({output, worker}) => {\n  const results = await arrayFromAsync(worker.stream.validation())\n  const formatted = results\n    // report out only documents with some markers\n    .filter(({markers}) => markers.length)\n    // remove validatedCount from the results\n    .map(({validatedCount, ...result}) => result)\n\n  await worker.dispose()\n\n  output.print(JSON.stringify(formatted))\n\n  let overallLevel: 'error' | 'warning' | 'info' = 'info'\n\n  for (const {level} of formatted) {\n    if (level === 'error') overallLevel = 'error'\n    if (level === 'warning' && overallLevel !== 'error') overallLevel = 'warning'\n  }\n\n  return overallLevel\n}\n","import {type BuiltInValidationReporter} from '../validateAction'\n\nexport const ndjson: BuiltInValidationReporter = async ({output, worker}) => {\n  let overallLevel: 'error' | 'warning' | 'info' = 'info'\n\n  for await (const {validatedCount, ...result} of worker.stream.validation()) {\n    if (result.level === 'error') overallLevel = 'error'\n    if (result.level === 'warning' && overallLevel !== 'error') overallLevel = 'warning'\n\n    if (result.markers.length) {\n      output.print(JSON.stringify(result))\n    }\n  }\n\n  await worker.dispose()\n\n  return overallLevel\n}\n","import {type ValidationMarker} from '@sanity/types'\nimport logSymbols from 'log-symbols'\nimport {isatty} from 'tty'\n\nexport type Level = ValidationMarker['level']\n\nexport interface DocumentValidationResult {\n  revision: string\n  documentId: string\n  documentType: string\n  intentUrl?: string\n  level: ValidationMarker['level']\n  markers: ValidationMarker[]\n}\n\nexport const isTty = isatty(1)\nexport const levelValues = {error: 0, warning: 1, info: 2} as const\n\n/**\n * Generates a formatted string that includes a numerical amount and a subject\n * in plural or singular form. Note: the subject must end in `s`\n */\nexport const count = (amount: number, subject: string): string =>\n  `${amount.toLocaleString('en-US')} ${\n    amount === 1 ? subject.substring(0, subject.length - 1) : subject\n  }`\n\nconst percentageFormatter = new Intl.NumberFormat('en-US', {\n  style: 'percent',\n  minimumFractionDigits: 1,\n  maximumFractionDigits: 1,\n})\n\n/**\n * Given a decimal, this will return that number formatted as a percentage\n */\nexport const percent = (value: number): string => percentageFormatter.format(Math.min(value, 1))\n\nconst secondFormatter = new Intl.NumberFormat('en-US', {\n  minimumFractionDigits: 1,\n  maximumFractionDigits: 1,\n})\n\n/**\n * Given a start time in milliseconds, this will output the time elapsed\n * formatted in seconds\n */\nexport const seconds = (startTime: number): string => {\n  const endTime = Date.now()\n  return `(${secondFormatter.format((endTime - startTime) / 1000)}s)`\n}\n\ninterface ValidationTotals {\n  valid: {documents: number}\n  errors: {documents: number; markers: number}\n  warnings: {documents: number; markers: number}\n  infos: {documents: number; markers: number}\n}\n\n/**\n * Outputs summary text given an object of totals. Omits totals depending on the\n * desired validation `level`\n */\nexport const summary = (\n  {errors, infos, valid, warnings}: ValidationTotals,\n  level: Level = 'warning',\n): string => {\n  const levelValue = levelValues[level]\n\n  return [\n    `${logSymbols.success} Valid:    ${count(valid.documents, 'documents')}`,\n    `${logSymbols.error} Errors:   ${count(errors.documents, 'documents')}, ${count(\n      errors.markers,\n      'errors',\n    )}`,\n    levelValue >= levelValues.warning &&\n      `${logSymbols.warning} Warnings: ${count(warnings.documents, 'documents')}, ${count(\n        warnings.markers,\n        'warnings',\n      )}`,\n    levelValue >= levelValues.info &&\n      `${logSymbols.info} Info:     ${count(infos.documents, 'documents')}, ${count(\n        infos.documents,\n        'markers',\n      )}`,\n  ]\n    .filter(Boolean)\n    .join('\\n')\n}\n","import {type Path, type ValidationMarker} from '@sanity/types'\nimport chalk from 'chalk'\nimport logSymbols from 'log-symbols'\n\nimport {convertToTree, formatTree, maxKeyLength, type Tree} from '../../../../util/tree'\nimport {type DocumentValidationResult, isTty, type Level, levelValues} from './util'\n\nexport interface FormatDocumentValidationOptions extends DocumentValidationResult {\n  studioHost?: string\n  basePath?: string\n}\n\ninterface Marker extends Pick<ValidationMarker, 'level' | 'message'> {\n  path: Path\n}\n\ntype ValidationTree = Tree<Marker>\n\nconst levelHeaders = {\n  error: isTty ? chalk.bold(chalk.bgRed(chalk.black(' ERROR '))) : chalk.red('[ERROR]'),\n  warning: isTty ? chalk.bold(chalk.bgYellow(chalk.black(' WARN '))) : chalk.yellow('[WARN]'),\n  info: isTty ? chalk.bold(chalk.cyan(chalk.black(' INFO '))) : chalk.cyan('[INFO]'),\n}\n/**\n * Creates a terminal hyperlink. Only outputs a hyperlink if the output is\n * determined to be a TTY\n */\nconst link = (text: string, url: string) =>\n  isTty ? `\\u001b]8;;${url}\\u0007${text}\\u001b]8;;\\u0007` : chalk.underline(text)\n\n/**\n * For sorting markers\n */\nconst compareLevels = <T extends {level: Level; message: string}>(a: T, b: T) =>\n  levelValues[a.level] - levelValues[b.level]\n\n/**\n * Formats the markers at the root of the validation tree\n */\nconst formatRootErrors = (root: ValidationTree, hasChildren: boolean, paddingLength: number) => {\n  if (!root.nodes) return ''\n\n  const [first, ...rest] = root.nodes.slice().sort(compareLevels)\n  if (!first) return ''\n\n  const firstElbow = hasChildren ? '│ ' : '└─'\n  const firstPadding = '.'.repeat(paddingLength - 6)\n  const firstLine = `${firstElbow} (root) ${firstPadding} ${logSymbols[first.level]} ${\n    first.message\n  }`\n  const subsequentPadding = ' '.repeat(paddingLength + 2)\n  const subsequentElbow = hasChildren ? '│ ' : '  '\n\n  const restOfLines = rest\n    .map(\n      (marker) =>\n        `${subsequentElbow}${subsequentPadding} ${logSymbols[marker.level]} ${marker.message}`,\n    )\n    .join('\\n')\n  return [firstLine, restOfLines].filter(Boolean).join('\\n')\n}\n\n/**\n * Formats document validation results into a user-friendly tree structure\n */\nexport function formatDocumentValidation({\n  documentId,\n  documentType,\n  level,\n  markers,\n  intentUrl,\n}: FormatDocumentValidationOptions): string {\n  const tree = convertToTree<Marker>(markers)\n\n  const documentTypeHeader = isTty\n    ? chalk.bgWhite(chalk.black(` ${documentType} `))\n    : `[${documentType}]`\n\n  const header = `${levelHeaders[level]} ${documentTypeHeader} ${\n    intentUrl ? link(documentId, intentUrl) : chalk.underline(documentId)\n  }`\n\n  const paddingLength = Math.max(maxKeyLength(tree.children) + 2, 30)\n\n  const childErrors = formatTree<Marker>({\n    node: tree.children,\n    paddingLength,\n    getNodes: ({nodes}) => (nodes ?? []).slice().sort(compareLevels),\n    getMessage: (marker) => [logSymbols[marker.level], marker.message].join(' '),\n  })\n\n  const rootErrors = formatRootErrors(tree, childErrors.length > 0, paddingLength)\n\n  return [header, rootErrors, childErrors].filter(Boolean).join('\\n')\n}\n","import {type BuiltInValidationReporter} from '../../validateAction'\nimport {formatDocumentValidation} from './formatDocumentValidation'\nimport {\n  count,\n  type DocumentValidationResult,\n  type Level,\n  levelValues,\n  percent,\n  seconds,\n  summary,\n} from './util'\n\n/**\n * Represents the default stylish/pretty reporter\n */\n// eslint-disable-next-line max-statements\nexport const pretty: BuiltInValidationReporter = async ({output, worker, flags}) => {\n  const workspaceLoadStart = Date.now()\n  // Report workspace loaded\n  const spinner = output\n    .spinner(flags.workspace ? `Loading workspace '${flags.workspace}'…` : 'Loading workspace…')\n    .start()\n\n  const workspace = await worker.event.loadedWorkspace()\n  spinner.succeed(\n    `Loaded workspace '${workspace.name}' using project '${workspace.projectId}' and dataset '${\n      flags.dataset || workspace.dataset\n    }' ${seconds(workspaceLoadStart)}`,\n  )\n\n  if (!flags.file) {\n    // Report document count\n    spinner.start('Calculating documents to be validated…')\n    const {documentCount} = await worker.event.loadedDocumentCount()\n\n    // Report export progress\n    const downloadStart = Date.now()\n    spinner.text = `Downloading ${count(documentCount, 'documents')}…`\n    for await (const {downloadedCount} of worker.stream.exportProgress()) {\n      const percentage = percent(downloadedCount / documentCount)\n      spinner.text = `Downloading ${count(documentCount, 'documents')}… ${percentage}`\n    }\n    spinner.succeed(`Downloaded ${count(documentCount, 'documents')} ${seconds(downloadStart)}`)\n  }\n\n  const {totalDocumentsToValidate} = await worker.event.exportFinished()\n\n  const referenceIntegrityStart = Date.now()\n  spinner.start(`Checking reference existence…`)\n  await worker.event.loadedReferenceIntegrity()\n  spinner.succeed(`Checked all references ${seconds(referenceIntegrityStart)}`)\n\n  // Report validation progress\n  const validationStart = Date.now()\n  spinner.start(`Validating ${count(totalDocumentsToValidate, 'documents')}…`)\n\n  const results: DocumentValidationResult[] = []\n\n  const totals = {\n    valid: {documents: 0},\n    errors: {documents: 0, markers: 0},\n    warnings: {documents: 0, markers: 0},\n    infos: {documents: 0, markers: 0},\n  }\n\n  for await (const {validatedCount, ...result} of worker.stream.validation()) {\n    const {markers} = result\n\n    if (markers.length) {\n      results.push(result)\n    }\n\n    const errors = markers.filter((marker) => marker.level === 'error')\n    const warnings = markers.filter((marker) => marker.level === 'warning')\n    const infos = markers.filter((marker) => marker.level === 'info')\n\n    if (!markers.length) {\n      totals.valid.documents += 1\n    }\n\n    if (errors.length) {\n      totals.errors.documents += 1\n      totals.errors.markers += errors.length\n    }\n\n    if (warnings.length) {\n      totals.warnings.documents += 1\n      totals.warnings.markers += warnings.length\n    }\n\n    if (infos.length) {\n      totals.infos.documents += 1\n      totals.infos.markers += infos.length\n    }\n\n    spinner.text =\n      `Validating ${count(totalDocumentsToValidate, 'documents')}…\\n\\n` +\n      `Processed ${count(validatedCount, 'documents')} (${percent(\n        validatedCount / totalDocumentsToValidate,\n      )}):\\n${summary(totals, flags.level)}`\n  }\n\n  spinner.succeed(\n    `Validated ${count(totalDocumentsToValidate, 'documents')} ${seconds(validationStart)}`,\n  )\n  output.print(`\\nValidation results:\\n${summary(totals, flags.level)}`)\n\n  results.sort((a, b) => {\n    if (a.level === b.level) return a.documentType.localeCompare(b.documentType)\n    return levelValues[a.level] - levelValues[b.level]\n  })\n\n  let overallLevel: Level = 'info'\n\n  for (const result of results) {\n    if (result.level === 'error') overallLevel = 'error'\n    if (result.level === 'warning' && overallLevel !== 'error') overallLevel = 'warning'\n\n    output.print(`${formatDocumentValidation(result)}\\n`)\n  }\n\n  await worker.dispose()\n\n  return overallLevel\n}\n","import {json} from './jsonReporter'\nimport {ndjson} from './ndjsonReporter'\nimport {pretty} from './prettyReporter'\n\nexport const reporters = {pretty, ndjson, json}\n","import {type ClientConfig} from '@sanity/client'\nimport {type ValidationMarker} from '@sanity/types'\nimport path from 'path'\nimport readPkgUp from 'read-pkg-up'\nimport {Worker} from 'worker_threads'\n\nimport {\n  type ValidateDocumentsWorkerData,\n  type ValidationWorkerChannel,\n} from '../../threads/validateDocuments'\nimport {createReceiver, type WorkerChannelReceiver} from '../../util/workerChannels'\n\nconst DEFAULT_MAX_CUSTOM_VALIDATION_CONCURRENCY = 5\n\nexport interface ValidateDocumentsOptions<TReturn = unknown> {\n  level?: 'error' | 'warning' | 'info'\n  workspace?: string\n  workDir?: string\n  configPath?: string\n  clientConfig?: Partial<ClientConfig>\n  projectId?: string // override\n  dataset?: string // override\n  ndjsonFilePath?: string\n  maxCustomValidationConcurrency?: number\n  reporter?: (worker: WorkerChannelReceiver<ValidationWorkerChannel>) => TReturn\n}\n\nexport interface DocumentValidationResult {\n  documentId: string\n  documentType: string\n  revision: string\n  level: ValidationMarker['level']\n  markers: ValidationMarker[]\n}\n\nconst defaultReporter = ({stream, dispose}: WorkerChannelReceiver<ValidationWorkerChannel>) => {\n  async function* createValidationGenerator() {\n    for await (const {documentId, documentType, markers, revision, level} of stream.validation()) {\n      const result: DocumentValidationResult = {\n        documentId,\n        documentType,\n        revision,\n        level,\n        markers,\n      }\n\n      yield result\n    }\n\n    await dispose()\n  }\n\n  return createValidationGenerator()\n}\n\nexport function validateDocuments<TReturn>(\n  options: ValidateDocumentsOptions<TReturn> &\n    Required<Pick<ValidateDocumentsOptions<TReturn>, 'reporter'>>,\n): TReturn\nexport function validateDocuments(\n  options: ValidateDocumentsOptions,\n): AsyncIterable<DocumentValidationResult>\nexport function validateDocuments(options: ValidateDocumentsOptions): unknown {\n  const {\n    workspace,\n    clientConfig,\n    configPath,\n    dataset,\n    projectId,\n    workDir = process.cwd(),\n    reporter = defaultReporter,\n    level,\n    maxCustomValidationConcurrency,\n    ndjsonFilePath,\n  } = options\n\n  const rootPkgPath = readPkgUp.sync({cwd: __dirname})?.path\n  if (!rootPkgPath) {\n    throw new Error('Could not find root directory for `sanity` package')\n  }\n\n  const workerPath = path.join(\n    path.dirname(rootPkgPath),\n    'lib',\n    '_internal',\n    'cli',\n    'threads',\n    'validateDocuments.js',\n  )\n\n  const worker = new Worker(workerPath, {\n    workerData: {\n      workDir,\n      // removes props in the config that make this object fail to serialize\n      clientConfig: JSON.parse(JSON.stringify(clientConfig)),\n      configPath,\n      workspace,\n      dataset,\n      projectId,\n      level,\n      ndjsonFilePath,\n      maxCustomValidationConcurrency:\n        maxCustomValidationConcurrency ?? DEFAULT_MAX_CUSTOM_VALIDATION_CONCURRENCY,\n    } satisfies ValidateDocumentsWorkerData,\n    // eslint-disable-next-line no-process-env\n    env: process.env,\n  })\n\n  return reporter(createReceiver<ValidationWorkerChannel>(worker))\n}\n","import {type CliCommandArguments, type CliCommandContext, type CliOutputter} from '@sanity/cli'\nimport {type ClientConfig} from '@sanity/client'\nimport chalk from 'chalk'\nimport fs from 'fs'\nimport logSymbols from 'log-symbols'\nimport path from 'path'\n\nimport {type ValidationWorkerChannel} from '../../threads/validateDocuments'\nimport {type WorkerChannelReceiver} from '../../util/workerChannels'\nimport {reporters} from './reporters'\nimport {validateDocuments} from './validateDocuments'\n\ninterface ValidateFlags {\n  workspace?: string\n  format?: string\n  dataset?: string\n  file?: string\n  level?: 'error' | 'warning' | 'info'\n  'max-custom-validation-concurrency'?: number\n  yes?: boolean\n  y?: boolean\n}\n\nexport type BuiltInValidationReporter = (options: {\n  output: CliOutputter\n  worker: WorkerChannelReceiver<ValidationWorkerChannel>\n  flags: ValidateFlags\n}) => Promise<'error' | 'warning' | 'info'>\n\nexport default async function validateAction(\n  args: CliCommandArguments<ValidateFlags>,\n  {apiClient, workDir, output, prompt}: CliCommandContext,\n): Promise<void> {\n  const flags = args.extOptions\n  const unattendedMode = Boolean(flags.yes || flags.y)\n\n  if (!unattendedMode) {\n    output.print(\n      `${chalk.yellow(`${logSymbols.warning} Warning:`)} This command ${\n        flags.file\n          ? 'reads all documents from your input file'\n          : 'downloads all documents from your dataset'\n      } and processes them through your local schema within a ` +\n        `simulated browser environment.\\n`,\n    )\n    output.print(`Potential pitfalls:\\n`)\n    output.print(\n      `- Processes all documents locally (excluding assets). Large datasets may require more resources.`,\n    )\n    output.print(\n      `- Executes all custom validation functions. Some functions may need to be refactored for compatibility.`,\n    )\n    output.print(\n      `- Not all standard browser features are available and may cause issues while loading your Studio.`,\n    )\n    output.print(\n      `- Adheres to document permissions. Ensure this account can see all desired documents.`,\n    )\n    if (flags.file) {\n      output.print(\n        `- Checks for missing document references against the live dataset if not found in your file.`,\n      )\n    }\n\n    const confirmed = await prompt.single<boolean>({\n      type: 'confirm',\n      message: `Are you sure you want to continue?`,\n      default: true,\n    })\n\n    if (!confirmed) {\n      output.print('User aborted')\n      process.exitCode = 1\n      return\n    }\n  }\n\n  if (flags.format && !(flags.format in reporters)) {\n    const formatter = new Intl.ListFormat('en-US', {\n      style: 'long',\n      type: 'conjunction',\n    })\n    throw new Error(\n      `Did not recognize format '${flags.format}'. Available formats are ${formatter.format(\n        Object.keys(reporters).map((key) => `'${key}'`),\n      )}`,\n    )\n  }\n\n  const level = flags.level || 'warning'\n\n  if (level !== 'error' && level !== 'warning' && level !== 'info') {\n    throw new Error(`Invalid level. Available levels are 'error', 'warning', and 'info'.`)\n  }\n\n  const maxCustomValidationConcurrency = flags['max-custom-validation-concurrency']\n  if (\n    maxCustomValidationConcurrency &&\n    typeof maxCustomValidationConcurrency !== 'number' &&\n    !Number.isInteger(maxCustomValidationConcurrency)\n  ) {\n    throw new Error(`'--max-custom-validation-concurrency' must be an integer.`)\n  }\n\n  const clientConfig: Partial<ClientConfig> = {\n    ...apiClient({\n      requireUser: true,\n      requireProject: false, // we'll get this from the workspace\n    }).config(),\n    // we set this explictly to true because the default client configuration\n    // from the CLI comes configured with `useProjectHostname: false` when\n    // `requireProject` is set to false\n    useProjectHostname: true,\n    // we set this explictly to true because we pass in a token via the\n    // `clientConfiguration` object and also mock a browser environment in\n    // this worker which triggers the browser warning\n    ignoreBrowserTokenWarning: true,\n  }\n\n  let ndjsonFilePath\n  if (flags.file) {\n    if (typeof flags.file !== 'string') {\n      throw new Error(`'--file' must be a string`)\n    }\n    const filePath = path.resolve(workDir, flags.file)\n\n    const stat = await fs.promises.stat(filePath)\n    if (!stat.isFile()) {\n      throw new Error(`'--file' must point to a valid ndjson file or tarball`)\n    }\n\n    ndjsonFilePath = filePath\n  }\n\n  const overallLevel = await validateDocuments({\n    workspace: flags.workspace,\n    dataset: flags.dataset,\n    clientConfig,\n    workDir,\n    level,\n    maxCustomValidationConcurrency,\n    ndjsonFilePath,\n    reporter: (worker) => {\n      const reporter =\n        flags.format && flags.format in reporters\n          ? reporters[flags.format as keyof typeof reporters]\n          : reporters.pretty\n\n      return reporter({output, worker, flags})\n    },\n  })\n\n  process.exitCode = overallLevel === 'error' ? 1 : 0\n}\n"],"names":["arrayFromAsync","iterable","results","item","push","json","_ref","output","worker","stream","validation","formatted","filter","_ref2","markers","length","map","_ref3","validatedCount","result","dispose","print","JSON","stringify","overallLevel","level","ndjson","_ref4","isTty","isatty","levelValues","error","warning","info","count","amount","subject","concat","toLocaleString","substring","percentageFormatter","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","percent","value","format","Math","min","secondFormatter","seconds","startTime","endTime","Date","now","summary","_ref5","errors","infos","valid","warnings","arguments","undefined","levelValue","logSymbols","success","documents","Boolean","join","levelHeaders","chalk","bold","bgRed","black","red","bgYellow","yellow","cyan","link","text","url","underline","compareLevels","a","b","formatRootErrors","root","hasChildren","paddingLength","nodes","first","rest","slice","sort","firstElbow","firstPadding","repeat","firstLine","default","message","subsequentPadding","subsequentElbow","restOfLines","marker","formatDocumentValidation","_ref6","documentId","documentType","intentUrl","tree","convertToTree","documentTypeHeader","bgWhite","header","max","maxKeyLength","children","childErrors","formatTree","node","getNodes","_ref7","getMessage","rootErrors","pretty","_ref8","flags","workspaceLoadStart","spinner","workspace","start","event","loadedWorkspace","succeed","name","projectId","dataset","file","documentCount","loadedDocumentCount","downloadStart","downloadedCount","exportProgress","percentage","totalDocumentsToValidate","exportFinished","referenceIntegrityStart","loadedReferenceIntegrity","validationStart","totals","localeCompare","reporters","DEFAULT_MAX_CUSTOM_VALIDATION_CONCURRENCY","defaultReporter","_ref9","createValidationGenerator","revision","validateDocuments","options","_a","clientConfig","configPath","workDir","process","cwd","reporter","maxCustomValidationConcurrency","ndjsonFilePath","rootPkgPath","sync","__dirname","path","Error","workerPath","dirname","Worker","workerData","parse","env","createReceiver","validateAction","args","_ref10","apiClient","prompt","extOptions","unattendedMode","yes","y","confirmed","single","type","exitCode","formatter","ListFormat","Object","keys","key","Number","isInteger","requireUser","requireProject","config","useProjectHostname","ignoreBrowserTokenWarning","filePath","resolve","stat","fs","promises","isFile"],"mappings":"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"}