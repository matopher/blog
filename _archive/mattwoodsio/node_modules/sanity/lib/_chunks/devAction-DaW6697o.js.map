{"version":3,"file":"devAction-DaW6697o.js","sources":["../../src/_internal/cli/server/devServer.ts","../../src/_internal/cli/actions/dev/devAction.ts"],"sourcesContent":["import {type UserViteConfig} from '@sanity/cli'\nimport chalk from 'chalk'\nimport {createServer} from 'vite'\n\nimport {debug} from './debug'\nimport {extendViteConfigWithUserConfig, getViteConfig} from './getViteConfig'\nimport {writeSanityRuntime} from './runtime'\n\nexport interface DevServerOptions {\n  cwd: string\n  basePath: string\n  staticPath: string\n\n  httpPort: number\n  httpHost?: string\n  projectName?: string\n\n  reactStrictMode: boolean\n  vite?: UserViteConfig\n}\n\nexport interface DevServer {\n  close(): Promise<void>\n}\n\nexport async function startDevServer(options: DevServerOptions): Promise<DevServer> {\n  const {cwd, httpPort, httpHost, basePath, reactStrictMode, vite: extendViteConfig} = options\n\n  const startTime = Date.now()\n  debug('Writing Sanity runtime files')\n  await writeSanityRuntime({cwd, reactStrictMode, watch: true, basePath})\n\n  debug('Resolving vite config')\n  const mode = 'development'\n  let viteConfig = await getViteConfig({\n    basePath,\n    mode: 'development',\n    server: {port: httpPort, host: httpHost},\n    cwd,\n  })\n\n  // Extend Vite configuration with user-provided config\n  if (extendViteConfig) {\n    viteConfig = await extendViteConfigWithUserConfig(\n      {command: 'serve', mode},\n      viteConfig,\n      extendViteConfig,\n    )\n  }\n\n  debug('Creating vite server')\n  const server = await createServer(viteConfig)\n  const info = server.config.logger.info\n\n  debug('Listening on specified port')\n  await server.listen()\n\n  const startupDuration = Date.now() - startTime\n  const url = `http://${httpHost || 'localhost'}:${httpPort || '3333'}${basePath}`\n  info(\n    `Sanity Studio ` +\n      `using ${chalk.cyan(`vite@${require('vite/package.json').version}`)} ` +\n      `ready in ${chalk.cyan(`${Math.ceil(startupDuration)}ms`)} ` +\n      `and running at ${chalk.cyan(url)}`,\n  )\n\n  return {close: () => server.close()}\n}\n","import {\n  type CliCommandArguments,\n  type CliCommandContext,\n  type CliConfig,\n  type CliOutputter,\n} from '@sanity/cli'\nimport path from 'path'\n\nimport {type DevServerOptions, startDevServer} from '../../server/devServer'\nimport {checkRequiredDependencies} from '../../util/checkRequiredDependencies'\nimport {checkStudioDependencyVersions} from '../../util/checkStudioDependencyVersions'\nimport {getSharedServerConfig, gracefulServerDeath} from '../../util/servers'\nimport {getTimer} from '../../util/timing'\n\nexport interface StartDevServerCommandFlags {\n  host?: string\n  port?: string\n}\n\nexport default async function startSanityDevServer(\n  args: CliCommandArguments<StartDevServerCommandFlags>,\n  context: CliCommandContext,\n): Promise<void> {\n  const timers = getTimer()\n  const flags = args.extOptions\n  const {output, workDir, cliConfig} = context\n\n  timers.start('checkStudioDependencyVersions')\n  checkStudioDependencyVersions(workDir)\n  timers.end('checkStudioDependencyVersions')\n\n  // If the check resulted in a dependency install, the CLI command will be re-run,\n  // thus we want to exit early\n  if ((await checkRequiredDependencies(context)).didInstall) {\n    return\n  }\n\n  // Try to load CLI configuration from sanity.cli.(js|ts)\n  const config = getDevServerConfig({flags, workDir, cliConfig, output})\n\n  try {\n    await startDevServer(config)\n  } catch (err) {\n    gracefulServerDeath('dev', config.httpHost, config.httpPort, err)\n  }\n}\n\nfunction getDevServerConfig({\n  flags,\n  workDir,\n  cliConfig,\n  output,\n}: {\n  flags: StartDevServerCommandFlags\n  workDir: string\n  cliConfig?: CliConfig\n  output: CliOutputter\n}): DevServerOptions {\n  const configSpinner = output.spinner('Checking configuration files...')\n  const baseConfig = getSharedServerConfig({flags, workDir, cliConfig})\n  configSpinner.succeed()\n\n  const env = process.env // eslint-disable-line no-process-env\n  const reactStrictMode = env.SANITY_STUDIO_REACT_STRICT_MODE\n    ? env.SANITY_STUDIO_REACT_STRICT_MODE === 'true'\n    : Boolean(cliConfig?.reactStrictMode)\n\n  if (env.SANITY_STUDIO_BASEPATH && cliConfig?.project?.basePath) {\n    output.warn(\n      `Overriding configured base path (${cliConfig.project.basePath}) with value from environment variable (${env.SANITY_STUDIO_BASEPATH})`,\n    )\n  }\n\n  return {\n    ...baseConfig,\n    staticPath: path.join(workDir, 'static'),\n    reactStrictMode,\n  }\n}\n"],"names":["startDevServer","options","cwd","httpPort","httpHost","basePath","reactStrictMode","vite","extendViteConfig","startTime","Date","now","debug","writeSanityRuntime","watch","mode","viteConfig","getViteConfig","server","port","host","extendViteConfigWithUserConfig","command","createServer","info","config","logger","listen","startupDuration","url","concat","chalk","default","cyan","version","Math","ceil","close","startSanityDevServer","args","context","timers","getTimer","flags","extOptions","output","workDir","cliConfig","start","checkStudioDependencyVersions","end","checkRequiredDependencies","didInstall","getDevServerConfig","err","gracefulServerDeath","_ref","_a","configSpinner","spinner","baseConfig","getSharedServerConfig","succeed","env","process","SANITY_STUDIO_REACT_STRICT_MODE","Boolean","SANITY_STUDIO_BASEPATH","project","warn","staticPath","path","join"],"mappings":"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"}