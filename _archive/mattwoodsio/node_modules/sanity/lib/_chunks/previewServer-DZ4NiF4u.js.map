{"version":3,"file":"previewServer-DZ4NiF4u.js","sources":["../../src/_internal/cli/server/buildStaticFiles.ts","../../src/_internal/cli/server/vite/plugin-sanity-basepath-redirect.ts","../../src/_internal/cli/server/previewServer.ts"],"sourcesContent":["import {type UserViteConfig} from '@sanity/cli'\nimport {constants as fsConstants} from 'fs'\nimport fs from 'fs/promises'\nimport path from 'path'\nimport readPkgUp from 'read-pkg-up'\nimport {build} from 'vite'\n\nimport {debug as serverDebug} from './debug'\nimport {extendViteConfigWithUserConfig, finalizeViteConfig, getViteConfig} from './getViteConfig'\nimport {writeSanityRuntime} from './runtime'\nimport {generateWebManifest} from './webManifest'\n\nconst debug = serverDebug.extend('static')\n\nexport interface ChunkModule {\n  name: string\n  originalLength: number\n  renderedLength: number\n}\n\nexport interface ChunkStats {\n  name: string\n  modules: ChunkModule[]\n}\n\nexport interface StaticBuildOptions {\n  cwd: string\n  basePath: string\n  outputDir: string\n  minify?: boolean\n  profile?: boolean\n  sourceMap?: boolean\n\n  vite?: UserViteConfig\n}\n\nexport async function buildStaticFiles(\n  options: StaticBuildOptions,\n): Promise<{chunks: ChunkStats[]}> {\n  const {\n    cwd,\n    outputDir,\n    sourceMap = false,\n    minify = true,\n    basePath,\n    vite: extendViteConfig,\n  } = options\n\n  debug('Writing Sanity runtime files')\n  await writeSanityRuntime({cwd, reactStrictMode: false, watch: false, basePath})\n\n  debug('Resolving vite config')\n  const mode = 'production'\n  let viteConfig = await getViteConfig({\n    cwd,\n    basePath,\n    outputDir,\n    minify,\n    sourceMap,\n    mode,\n  })\n\n  // Extend Vite configuration with user-provided config\n  if (extendViteConfig) {\n    viteConfig = await extendViteConfigWithUserConfig(\n      {command: 'build', mode},\n      viteConfig,\n      extendViteConfig,\n    )\n    viteConfig = finalizeViteConfig(viteConfig)\n  }\n\n  // Copy files placed in /static to the built /static\n  debug('Copying static files from /static to output dir')\n  const staticPath = path.join(outputDir, 'static')\n  await copyDir(path.join(cwd, 'static'), staticPath)\n\n  // Write favicons, not overwriting ones that already exist, to static folder\n  debug('Writing favicons to output dir')\n  const faviconBasePath = `${basePath.replace(/\\/+$/, '')}/static`\n  await writeFavicons(faviconBasePath, staticPath)\n\n  debug('Bundling using vite')\n  const bundle = await build(viteConfig)\n  debug('Bundling complete')\n\n  // For typescript only - this shouldn't ever be the case given we're not watching\n  if (Array.isArray(bundle) || !('output' in bundle)) {\n    return {chunks: []}\n  }\n\n  const stats: ChunkStats[] = []\n  bundle.output.forEach((chunk) => {\n    if (chunk.type !== 'chunk') {\n      return\n    }\n\n    stats.push({\n      name: chunk.name,\n      modules: Object.entries(chunk.modules).map(([rawFilePath, chunkModule]) => {\n        const filePath = rawFilePath.startsWith('\\x00')\n          ? rawFilePath.slice('\\x00'.length)\n          : rawFilePath\n\n        return {\n          name: path.isAbsolute(filePath) ? path.relative(cwd, filePath) : filePath,\n          originalLength: chunkModule.originalLength,\n          renderedLength: chunkModule.renderedLength,\n        }\n      }),\n    })\n  })\n\n  return {chunks: stats}\n}\n\nasync function copyDir(srcDir: string, destDir: string, skipExisting?: boolean): Promise<void> {\n  await fs.mkdir(destDir, {recursive: true})\n\n  for (const file of await tryReadDir(srcDir)) {\n    const srcFile = path.resolve(srcDir, file)\n    if (srcFile === destDir) {\n      continue\n    }\n\n    const destFile = path.resolve(destDir, file)\n    const stat = await fs.stat(srcFile)\n\n    if (stat.isDirectory()) {\n      await copyDir(srcFile, destFile, skipExisting)\n    } else if (skipExisting) {\n      await fs.copyFile(srcFile, destFile, fsConstants.COPYFILE_EXCL).catch(skipIfExistsError)\n    } else {\n      await fs.copyFile(srcFile, destFile)\n    }\n  }\n}\n\nasync function tryReadDir(dir: string): Promise<string[]> {\n  try {\n    const content = await fs.readdir(dir)\n    return content\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      return []\n    }\n\n    throw err\n  }\n}\n\nfunction skipIfExistsError(err: Error & {code: string}) {\n  if (err.code === 'EEXIST') {\n    return\n  }\n\n  throw err\n}\n\nasync function writeFavicons(basePath: string, destDir: string): Promise<void> {\n  const sanityPkgPath = (await readPkgUp({cwd: __dirname}))?.path\n  const faviconsPath = sanityPkgPath\n    ? path.join(path.dirname(sanityPkgPath), 'static', 'favicons')\n    : undefined\n\n  if (!faviconsPath) {\n    throw new Error('Unable to resolve `sanity` module root')\n  }\n\n  await fs.mkdir(destDir, {recursive: true})\n  await copyDir(faviconsPath, destDir, true)\n  await writeWebManifest(basePath, destDir)\n\n  // Copy the /static/favicon.ico to /favicon.ico as well, because some tools/browsers\n  // blindly expects it to be there before requesting the HTML containing the actual path\n  await fs.copyFile(path.join(destDir, 'favicon.ico'), path.join(destDir, '..', 'favicon.ico'))\n}\n\nasync function writeWebManifest(basePath: string, destDir: string): Promise<void> {\n  const content = JSON.stringify(generateWebManifest(basePath), null, 2)\n  await fs\n    .writeFile(path.join(destDir, 'manifest.webmanifest'), content, 'utf8')\n    .catch(skipIfExistsError)\n}\n","import {type Plugin} from 'vite'\n\nexport function sanityBasePathRedirectPlugin(basePath: string | undefined): Plugin {\n  return {\n    name: 'sanity/server/sanity-base-path-redirect',\n    apply: 'serve',\n    configurePreviewServer(vitePreviewServer) {\n      return () => {\n        if (!basePath) {\n          return\n        }\n\n        vitePreviewServer.middlewares.use((req, res, next) => {\n          if (req.url !== '/') {\n            next()\n            return\n          }\n\n          res.writeHead(302, {Location: basePath})\n          res.end()\n        })\n      }\n    },\n  }\n}\n","import {type UserViteConfig} from '@sanity/cli'\nimport chalk from 'chalk'\nimport fs from 'fs/promises'\nimport path from 'path'\nimport {type InlineConfig, preview} from 'vite'\n\nimport {debug as serverDebug} from './debug'\nimport {extendViteConfigWithUserConfig} from './getViteConfig'\nimport {sanityBasePathRedirectPlugin} from './vite/plugin-sanity-basepath-redirect'\n\nconst debug = serverDebug.extend('preview')\n\nexport interface PreviewServer {\n  urls: {local: string[]; network: string[]}\n  close(): Promise<void>\n}\n\nexport interface PreviewServerOptions {\n  root: string\n  cwd: string\n\n  httpPort: number\n  httpHost?: string\n\n  vite?: UserViteConfig\n}\n\nexport async function startPreviewServer(options: PreviewServerOptions): Promise<PreviewServer> {\n  const {httpPort, httpHost, root, vite: extendViteConfig} = options\n  const startTime = Date.now()\n\n  const indexPath = path.join(root, 'index.html')\n  let basePath: string | undefined\n  try {\n    const index = await fs.readFile(indexPath, 'utf8')\n    basePath = tryResolveBasePathFromIndex(index)\n  } catch (err) {\n    if (err.code !== 'ENOENT') {\n      throw err\n    }\n\n    const error = new Error(\n      `Could not find a production build in the '${root}' directory.\\nTry building your studio app with 'sanity build' before starting the preview server.`,\n    )\n    error.name = 'BUILD_NOT_FOUND'\n    throw error\n  }\n\n  const mode = 'production'\n  let previewConfig: InlineConfig = {\n    root,\n    base: basePath || '/',\n    plugins: [sanityBasePathRedirectPlugin(basePath)],\n    configFile: false,\n    preview: {\n      port: httpPort,\n      host: httpHost,\n      strictPort: true,\n    },\n    // Needed for vite to not serve `root/dist`\n    build: {\n      outDir: root,\n    },\n    mode,\n  }\n\n  // Extend Vite configuration with user-provided config\n  if (extendViteConfig) {\n    previewConfig = await extendViteConfigWithUserConfig(\n      {command: 'serve', mode},\n      previewConfig,\n      extendViteConfig,\n    )\n  }\n\n  debug('Creating vite server')\n  const server = await preview(previewConfig)\n  const warn = server.config.logger.warn\n  const info = server.config.logger.info\n  const url = server.resolvedUrls.local[0]\n\n  if (typeof basePath === 'undefined') {\n    warn('Could not determine base path from index.html, using \"/\" as default')\n  } else if (basePath && basePath !== '/') {\n    info(`Using resolved base path from static build: ${chalk.cyan(basePath)}`)\n  }\n\n  const startupDuration = Date.now() - startTime\n\n  info(\n    `Sanity Studio ` +\n      `using ${chalk.cyan(`vite@${require('vite/package.json').version}`)} ` +\n      `ready in ${chalk.cyan(`${Math.ceil(startupDuration)}ms`)} ` +\n      `and running at ${chalk.cyan(url)} (production preview mode)`,\n  )\n\n  return {\n    urls: server.resolvedUrls,\n    close: () =>\n      new Promise((resolve, reject) =>\n        server.httpServer.close((err) => (err ? reject(err) : resolve())),\n      ),\n  }\n}\n\nfunction tryResolveBasePathFromIndex(index: string): string | undefined {\n  // <script ... src=\"/some-base-path/static/sanity-a3cc3d86.js\"></script>\n  const basePath = index.match(/<script[^>]+src=\"(.*?)\\/static\\/sanity-/)?.[1]\n\n  // We _expect_ to be able to find the base path. If we can't, we should warn.\n  // Note that we're checking for `undefined` here, since an empty string is a\n  // valid base path.\n  if (typeof basePath === 'undefined') {\n    return undefined\n  }\n\n  // In the case of an empty base path, we still want to return `/` to indicate\n  // that we _found_ the basepath - it just happens to be empty. Eg:\n  // <script ... src = \"/static/sanity-a3cc3d86.js\"></script>\n  // Which differs from not being able to find the script tag at all, in which\n  // case we'll want to show a warning to indicate that it is an abnormality.\n  return basePath === '' ? '/' : basePath\n}\n"],"names":["debug","serverDebug","extend","buildStaticFiles","options","cwd","outputDir","sourceMap","minify","basePath","vite","extendViteConfig","writeSanityRuntime","reactStrictMode","watch","mode","viteConfig","getViteConfig","extendViteConfigWithUserConfig","command","finalizeViteConfig","staticPath","path","default","join","copyDir","faviconBasePath","concat","replace","writeFavicons","bundle","build","Array","isArray","chunks","stats","output","forEach","chunk","type","push","name","modules","Object","entries","map","_ref","rawFilePath","chunkModule","filePath","startsWith","slice","length","isAbsolute","relative","originalLength","renderedLength","srcDir","destDir","skipExisting","fs","mkdir","recursive","file","tryReadDir","srcFile","resolve","destFile","stat","isDirectory","copyFile","fsConstants","COPYFILE_EXCL","catch","skipIfExistsError","dir","content","readdir","err","code","_a","sanityPkgPath","readPkgUp","__dirname","faviconsPath","dirname","Error","writeWebManifest","JSON","stringify","generateWebManifest","writeFile","sanityBasePathRedirectPlugin","apply","configurePreviewServer","vitePreviewServer","middlewares","use","req","res","next","url","writeHead","Location","end","startPreviewServer","httpPort","httpHost","root","startTime","Date","now","indexPath","index","readFile","tryResolveBasePathFromIndex","error","previewConfig","base","plugins","configFile","preview","port","host","strictPort","outDir","server","warn","config","logger","info","resolvedUrls","local","chalk","cyan","startupDuration","require","version","Math","ceil","urls","close","Promise","reject","httpServer","match"],"mappings":"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"}