{"version":3,"file":"deployAction-CEKPux0n.js","sources":["../../src/_internal/cli/actions/deploy/deployAction.ts"],"sourcesContent":["import {type CliCommandArguments, type CliCommandContext} from '@sanity/cli'\nimport {type SanityClient} from '@sanity/client'\nimport {promises as fs} from 'fs'\nimport path from 'path'\nimport tar from 'tar-fs'\nimport zlib from 'zlib'\n\nimport buildSanityStudio, {type BuildSanityStudioCommandFlags} from '../build/buildAction'\n\nexport interface DeployStudioActionFlags extends BuildSanityStudioCommandFlags {\n  build?: boolean\n}\n\nexport default async function deployStudio(\n  args: CliCommandArguments<DeployStudioActionFlags>,\n  context: CliCommandContext,\n): Promise<void> {\n  const {apiClient, workDir, chalk, output, prompt} = context\n  const flags = {build: true, ...args.extOptions}\n  const destFolder = args.argsWithoutOptions[0]\n  const sourceDir = path.resolve(process.cwd(), destFolder || path.join(workDir, 'dist'))\n\n  if (destFolder === 'graphql') {\n    throw new Error('Did you mean `sanity graphql deploy`?')\n  }\n\n  if (destFolder) {\n    let relativeOutput = path.relative(process.cwd(), sourceDir)\n    if (relativeOutput[0] !== '.') {\n      relativeOutput = `./${relativeOutput}`\n    }\n\n    const isEmpty = await dirIsEmptyOrNonExistent(sourceDir)\n    const shouldProceed =\n      isEmpty ||\n      (await prompt.single({\n        type: 'confirm',\n        message: `\"${relativeOutput}\" is not empty, do you want to proceed?`,\n        default: false,\n      }))\n\n    if (!shouldProceed) {\n      output.print('Cancelled.')\n      return\n    }\n\n    output.print(`Building to ${relativeOutput}\\n`)\n  }\n\n  const client = apiClient({\n    requireUser: true,\n    requireProject: true,\n  })\n\n  // Check that the project has a studio hostname\n  let spinner = output.spinner('Checking project info').start()\n  const project = await client.projects.getById(client.config().projectId as string)\n  let studioHostname = project && project.studioHost\n  spinner.succeed()\n\n  if (!studioHostname) {\n    output.print('Your project has not been assigned a studio hostname.')\n    output.print('To deploy your Sanity Studio to our hosted Sanity.Studio service,')\n    output.print('you will need one. Please enter the part you want to use.')\n\n    studioHostname = await prompt.single({\n      type: 'input',\n      filter: (inp: string) => inp.replace(/\\.sanity\\.studio$/i, ''),\n      message: 'Studio hostname (<value>.sanity.studio):',\n      validate: (name: string) => validateHostname(name, client),\n    })\n  }\n\n  // Always build the project, unless --no-build is passed\n  const shouldBuild = flags.build\n  if (shouldBuild) {\n    const buildArgs = [destFolder].filter(Boolean)\n    const {didCompile} = await buildSanityStudio(\n      {...args, extOptions: flags, argsWithoutOptions: buildArgs},\n      context,\n      {basePath: '/'},\n    )\n\n    if (!didCompile) {\n      return\n    }\n  }\n\n  // Ensure that the directory exists, is a directory and seems to have valid content\n  spinner = output.spinner('Verifying local content').start()\n  try {\n    await checkDir(sourceDir)\n    spinner.succeed()\n  } catch (err) {\n    spinner.fail()\n    throw err\n  }\n\n  // Now create a tarball of the given directory\n  const parentDir = path.dirname(sourceDir)\n  const base = path.basename(sourceDir)\n  const tarball = tar.pack(parentDir, {entries: [base]}).pipe(zlib.createGzip())\n\n  spinner = output.spinner('Deploying to Sanity.Studio').start()\n  try {\n    const response = await client.request({\n      method: 'POST',\n      url: '/deploy',\n      body: tarball,\n      maxRedirects: 0,\n    })\n\n    spinner.succeed()\n\n    // And let the user know we're done\n    output.print(`\\nSuccess! Studio deployed to ${chalk.cyan(response.location)}`)\n  } catch (err) {\n    spinner.fail()\n    throw err\n  }\n}\n\nasync function dirIsEmptyOrNonExistent(sourceDir: string): Promise<boolean> {\n  try {\n    const stats = await fs.stat(sourceDir)\n    if (!stats.isDirectory()) {\n      throw new Error(`Directory ${sourceDir} is not a directory`)\n    }\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      return true\n    }\n\n    throw err\n  }\n\n  const content = await fs.readdir(sourceDir)\n  return content.length === 0\n}\n\nasync function checkDir(sourceDir: string) {\n  try {\n    const stats = await fs.stat(sourceDir)\n    if (!stats.isDirectory()) {\n      throw new Error(`Directory ${sourceDir} is not a directory`)\n    }\n  } catch (err) {\n    const error = err.code === 'ENOENT' ? new Error(`Directory \"${sourceDir}\" does not exist`) : err\n\n    throw error\n  }\n\n  try {\n    await fs.stat(path.join(sourceDir, 'index.html'))\n  } catch (err) {\n    const error =\n      err.code === 'ENOENT'\n        ? new Error(\n            [\n              `\"${sourceDir}/index.html\" does not exist -`,\n              '[SOURCE_DIR] must be a directory containing',\n              'a Sanity studio built using \"sanity build\"',\n            ].join(' '),\n          )\n        : err\n\n    throw error\n  }\n}\n\nasync function validateHostname(value: string, client: SanityClient): Promise<boolean | string> {\n  const projectId = client.config().projectId\n  const uri = `/projects/${projectId}`\n  const studioHost = value || ''\n\n  // Check that it matches allowed character range\n  if (!/^[a-z0-9_-]+$/i.test(studioHost)) {\n    return 'Hostname can contain only A-Z, 0-9, _ and -'\n  }\n\n  // Check that the hostname is not already taken\n  try {\n    await client.request({uri, method: 'PATCH', body: {studioHost}})\n    return true\n  } catch (error) {\n    if (error?.response?.body?.message) {\n      return error.response.body.message\n    }\n    throw error\n  }\n}\n"],"names":["deployStudio","args","context","apiClient","workDir","chalk","output","prompt","flags","build","extOptions","destFolder","argsWithoutOptions","sourceDir","path","resolve","process","cwd","default","join","Error","relativeOutput","relative","concat","isEmpty","dirIsEmptyOrNonExistent","shouldProceed","single","type","message","print","client","requireUser","requireProject","spinner","start","project","projects","getById","config","projectId","studioHostname","studioHost","succeed","filter","inp","replace","validate","name","validateHostname","shouldBuild","buildArgs","Boolean","didCompile","buildSanityStudio","basePath","checkDir","err","fail","parentDir","dirname","base","basename","tarball","tar","pack","entries","pipe","zlib","createGzip","response","request","method","url","body","maxRedirects","cyan","location","stats","fs","stat","isDirectory","code","content","readdir","length","error","value","_a","_b","uri","test"],"mappings":"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"}