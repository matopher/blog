'use strict';

var fs = require('fs');
var path = require('path');
var rxjs = require('rxjs');
var sanity = require('sanity');
var mockBrowserEnvironment = require('./mockBrowserEnvironment-Bpx7ZdVR.js');
function _interopDefaultCompat(e) {
  return e && typeof e === 'object' && 'default' in e ? e : {
    default: e
  };
}
var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
var path__default = /*#__PURE__*/_interopDefaultCompat(path);
const candidates = ["sanity.config.js", "sanity.config.jsx", "sanity.config.ts", "sanity.config.tsx"];
function getStudioConfig(_ref) {
  let {
    basePath,
    configPath: cfgPath
  } = _ref;
  let cleanup;
  try {
    cleanup = mockBrowserEnvironment.mockBrowserEnvironment(basePath);
    let configPath = cfgPath;
    if (configPath && !fs__default.default.existsSync(configPath)) {
      throw new Error('Failed to find config at "'.concat(cfgPath, '"'));
    } else if (!configPath) {
      configPath = candidates.map(candidate => path__default.default.join(basePath, candidate)).find(candidate => fs__default.default.existsSync(candidate));
    }
    if (!configPath) {
      throw new Error('Failed to resolve sanity.config.(js|ts) for base path "'.concat(basePath, '"'));
    }
    let config;
    try {
      const mod = require(configPath);
      config = mod.__esModule && mod.default ? mod.default : mod;
    } catch (err) {
      const message = 'Failed to load configuration file "'.concat(configPath, '":\n').concat(err.message);
      throw Object.assign(err, {
        message
      });
    }
    if (!config) throw new Error("Configuration did not export expected config shape");
    const normalized = Array.isArray(config) ? config : [{
      ...config,
      name: config.name || "default",
      basePath: config.basePath || "/"
    }];
    return normalized;
  } finally {
    cleanup == null ? void 0 : cleanup();
  }
}
async function getStudioWorkspaces(options) {
  let cleanup;
  try {
    cleanup = mockBrowserEnvironment.mockBrowserEnvironment(options.basePath);
    const config = getStudioConfig(options);
    const workspaces = await rxjs.firstValueFrom(sanity.resolveConfig(config));
    if (!workspaces) throw new Error("Failed to resolve configuration");
    return workspaces;
  } finally {
    cleanup == null ? void 0 : cleanup();
  }
}
exports.getStudioConfig = getStudioConfig;
exports.getStudioWorkspaces = getStudioWorkspaces;
//# sourceMappingURL=getStudioWorkspaces-BP-leiyc.js.map
