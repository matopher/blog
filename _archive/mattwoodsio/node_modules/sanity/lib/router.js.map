{"version":3,"file":"router.js","sources":["../src/router/RouterContext.ts","../src/router/useRouter.ts","../src/router/useLink.ts","../src/router/useIntentLink.ts","../src/router/IntentLink.tsx","../src/router/Link.tsx","../src/router/_parseRoute.ts","../src/router/utils/arrayify.ts","../src/router/_findMatchingRoutes.ts","../src/router/encodeURIComponentExcept.ts","../src/router/utils/debug.ts","../src/router/_resolvePathFromState.ts","../src/router/utils/parseScopedParams.ts","../src/router/_resolveStateFromPath.ts","../src/router/utils/base64url.ts","../src/router/utils/jsonParamsEncoding.ts","../src/router/utils/paramsEncoding.ts","../src/router/route.ts","../src/router/RouterProvider.tsx","../src/router/RouteScope.tsx","../src/router/useStateLink.ts","../src/router/StateLink.tsx","../src/router/useRouterState.ts","../src/router/withRouter.tsx"],"sourcesContent":["import {createContext} from 'react'\n\nimport {type RouterContextValue} from './types'\n\n/**\n * @internal\n */\nexport const RouterContext = createContext<RouterContextValue | null>(null)\n","import {useContext} from 'react'\n\nimport {RouterContext} from './RouterContext'\nimport {type RouterContextValue} from './types'\n\n/**\n * Returns the router context value.\n * @public\n *\n * @returns The router context value.\n *  {@link RouterContextValue}\n * @throws An error if the router context value is missing.\n *\n * @example\n * ```tsx\n * const router = useRouter()\n * ```\n */\nexport function useRouter(): RouterContextValue {\n  const router = useContext(RouterContext)\n\n  if (!router) {\n    throw new Error('Router: missing context value')\n  }\n\n  return router\n}\n","import {useCallback} from 'react'\n\nimport {useRouter} from './useRouter'\n\nfunction isLeftClickEvent(event: React.MouseEvent) {\n  return event.button === 0\n}\n\nfunction isModifiedEvent(event: React.MouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey)\n}\n\n/**\n * @public\n */\nexport interface UseLinkOptions {\n  /**\n   * The URL that the link should navigate to.\n   */\n  href?: string\n\n  /**\n   * The event handler function that should be called when the link is clicked.\n   */\n  onClick?: React.MouseEventHandler<HTMLElement>\n\n  /**\n   * Whether the link should replace the current URL in the browser history.\n   */\n  replace?: boolean\n\n  /**\n   * The target window or frame that the linked document will open in.\n   */\n  target?: string\n}\n\n/**\n * Returns an object with an `onClick` function that can be used as a click handler for a link.\n *\n * @public\n *\n * @param options - An object containing the properties for the link.\n *  See {@link UseLinkOptions}\n *\n * @returns An object with an `onClick` function.\n *\n * @example\n * ```tsx\n * const linkProps = useLink({\n *  href: 'https://www.sanity.io',\n *  target: '_blank'\n * })\n *\n * <a {...linkProps}>Link</a>\n * ```\n */\nexport function useLink(options: UseLinkOptions): {onClick: React.MouseEventHandler<HTMLElement>} {\n  const {onClick: onClickProp, href, target, replace = false} = options\n  const {navigateUrl} = useRouter()\n\n  const onClick = useCallback(\n    (event: React.MouseEvent<HTMLElement>): void => {\n      if (event.isDefaultPrevented()) {\n        return\n      }\n\n      if (!href) return\n\n      if (onClickProp) {\n        onClickProp(event)\n      }\n\n      if (isModifiedEvent(event) || !isLeftClickEvent(event)) {\n        return\n      }\n\n      // If target prop is set (e.g. to \"_blank\") let browser handle link.\n      if (target) {\n        return\n      }\n\n      event.preventDefault()\n\n      navigateUrl({path: href, replace})\n    },\n    [href, navigateUrl, onClickProp, replace, target],\n  )\n\n  return {onClick: onClick}\n}\n","import {useMemo} from 'react'\n\nimport {type IntentParameters} from './types'\nimport {useLink} from './useLink'\nimport {useRouter} from './useRouter'\n\n/**\n * @public\n */\nexport interface UseIntentLinkOptions {\n  /**\n   * The name of the intent to trigger.\n   */\n  intent: string\n\n  /**\n   * An optional click event handler.\n   */\n  onClick?: React.MouseEventHandler<HTMLElement>\n\n  /**\n   * Optional parameters to pass to the intent. See {@link IntentParameters}\n   */\n  params?: IntentParameters\n\n  /**\n   * Whether to replace the current URL in the browser history.\n   */\n  replace?: boolean\n\n  /**\n   * The target window or frame to open the link in.\n   */\n  target?: string\n}\n\n/**\n *\n * Returns props for an anchor element that will trigger an intent when clicked.\n *\n * @example\n * ```tsx\n * const {onClick, href} = useIntentLink({\n *   intent: 'edit',\n *   params: {id: 'foo'}\n * })\n *\n * <a href={href} onClick={onClick}>Link to \"foo\" editor</a>\n * ```\n *\n * @public\n *\n * @param options - Options to use for the link\n *  {@link UseIntentLinkOptions}\n *\n * @returns - An object with `onClick` and `href` props to use for the link\n */\nexport function useIntentLink(options: UseIntentLinkOptions): {\n  onClick: React.MouseEventHandler<HTMLElement>\n  href: string\n} {\n  const {intent, onClick: onClickProp, params, replace, target} = options\n  const {resolveIntentLink} = useRouter()\n  const href = useMemo(() => resolveIntentLink(intent, params), [intent, params, resolveIntentLink])\n  const {onClick} = useLink({href, onClick: onClickProp, replace, target})\n\n  return {onClick, href}\n}\n","import type * as React from 'react'\nimport {type ForwardedRef, forwardRef} from 'react'\n\nimport {type IntentParameters} from './types'\nimport {useIntentLink} from './useIntentLink'\n\n/**\n * Props for the {@link IntentLink} component.\n *\n * @public\n */\nexport interface IntentLinkProps {\n  /**\n   * The name of the intent.\n   */\n  intent: string\n\n  /**\n   * The parameters to include in the intent.\n   * {@link IntentParameters}\n   */\n  params?: IntentParameters\n\n  /**\n   * Whether to replace the current URL in the browser history instead of adding a new entry.\n   */\n  replace?: boolean\n}\n\n/**\n * @public\n *\n * @param props - Props to pass to `IntentLink` component.\n *  See {@link IntentLinkProps}\n *\n * @example\n * ```tsx\n * function MyComponent() {\n *  return <IntentLink intent=\"edit\" params={{id: 'abc123'}}>Edit</IntentLink>\n * }\n * ```\n */\nexport const IntentLink = forwardRef(function IntentLink(\n  props: IntentLinkProps & React.HTMLProps<HTMLAnchorElement>,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {intent, params, target, ...restProps} = props\n  const {onClick, href} = useIntentLink({\n    intent,\n    params,\n    target,\n    onClick: props.onClick,\n  })\n\n  return <a {...restProps} href={href} onClick={onClick} ref={ref} target={target} />\n})\n","import type * as React from 'react'\nimport {forwardRef} from 'react'\n\nimport {useLink} from './useLink'\n\n/**\n * Props for the {@link Link} component.\n *\n * @public\n */\nexport interface LinkProps {\n  /**\n   * Whether to replace the current URL in the browser history instead of adding a new entry.\n   */\n  replace?: boolean\n}\n\n/**\n * A component that creates an HTML anchor element.\n *\n * @public\n *\n * @param props - Props to pass to the `Link` component.\n *  See {@link LinkProps}\n *\n * @example\n * ```tsx\n * function MyComponent() {\n *   return (\n *    <Link href=\"https://www.sanity.io\" target=\"_blank\" replace>\n *      Go to Sanity\n *    </Link>\n *   )\n * }\n * ```\n */\nexport const Link = forwardRef(function Link(\n  props: LinkProps & React.HTMLProps<HTMLAnchorElement>,\n  ref: React.ForwardedRef<HTMLAnchorElement>,\n) {\n  const {onClick: onClickProp, href, target, replace, ...restProps} = props\n  const {onClick} = useLink({onClick: onClickProp, href, target, replace})\n\n  return <a {...restProps} onClick={onClick} href={href} target={target} ref={ref} />\n})\n","import {type Route, type RouteSegment} from './types'\n\nconst VALID_PARAM_SEGMENT = /^[a-zA-Z0-9_-]+$/\n\nfunction createSegment(segment: string): RouteSegment | null {\n  if (!segment) {\n    return null\n  }\n\n  if (segment.startsWith(':')) {\n    const paramName = segment.substring(1)\n\n    if (!VALID_PARAM_SEGMENT.test(paramName)) {\n      const addendum = segment.includes('*')\n        ? ' Splats are not supported. Consider using child routes instead'\n        : ''\n      // eslint-disable-next-line no-console\n      console.error(\n        new Error(`Warning: Param segments \"${segment}\" includes invalid characters.${addendum}`),\n      )\n    }\n\n    return {type: 'param', name: paramName}\n  }\n\n  return {type: 'dir', name: segment}\n}\n\n/** @internal */\nexport function _parseRoute(route: string): Route {\n  const [pathname] = route.split('?')\n\n  const segments = pathname.split('/').map(createSegment).filter(Boolean) as RouteSegment[]\n\n  return {\n    raw: route,\n    segments: segments,\n  }\n}\n","export function arrayify<T>(val: Array<T> | T): Array<T> {\n  if (Array.isArray(val)) {\n    return val\n  }\n\n  return val ? [val] : []\n}\n","import {difference, intersection, isPlainObject, pick} from 'lodash'\n\nimport {\n  type InternalSearchParam,\n  type MatchError,\n  type MatchOk,\n  type MatchResult,\n  type RouterNode,\n  type RouterState,\n} from './types'\nimport {arrayify} from './utils/arrayify'\n\nfunction isRecord(value: unknown): value is Record<string, unknown> {\n  return isPlainObject(value)\n}\n\nfunction createMatchError(\n  node: RouterNode,\n  missingKeys: string[],\n  unmappableStateKeys: string[],\n): MatchError {\n  return {type: 'error', node, missingKeys, unmappableStateKeys}\n}\n\nfunction createMatchOk(\n  node: RouterNode,\n  matchedState: Record<string, string>,\n  searchParams: InternalSearchParam[],\n  child?: MatchOk | undefined,\n): MatchOk {\n  return {type: 'ok', node, matchedState, searchParams, child}\n}\n\n/** @internal */\nexport function _findMatchingRoutes(node: RouterNode, _state?: RouterState): MatchResult {\n  if (!_state) {\n    return createMatchOk(node, {}, [])\n  }\n\n  const scopedState = node.scope ? (_state[node.scope] as RouterState) : _state\n\n  const {_searchParams: searchParams = [], ...state} = scopedState || {}\n\n  const requiredParams = node.route.segments\n    .filter((seg) => seg.type === 'param')\n    .map((seg) => seg.name)\n\n  const stateKeys = isRecord(state) ? Object.keys(state) : []\n\n  // These are params found in both the state and the route definition\n  const consumedParams = intersection(stateKeys, requiredParams)\n\n  // these are params found in the route definition but not in the state, can't map them to a route\n  const missingParams = difference(requiredParams, consumedParams)\n\n  // these are params found in the state but not in the route definition\n  const remainingParams = difference(stateKeys, consumedParams)\n\n  if (missingParams.length > 0) {\n    return createMatchError(node, missingParams, [])\n  }\n\n  const scopedParams = searchParams.map(([key, value]): InternalSearchParam => [[key], value])\n\n  const consumedState = pick(state, consumedParams) as Record<string, string>\n\n  if (remainingParams.length === 0) {\n    return createMatchOk(node, consumedState, scopedParams)\n  }\n\n  const children = arrayify(\n    (typeof node.children === 'function'\n      ? node.children(isRecord(state) ? state : {})\n      : node.children) || [],\n  )\n\n  if (remainingParams.length > 0 && children.length === 0) {\n    // our state includes extra keys that's not consumed by child routes\n    return createMatchError(node, [], remainingParams)\n  }\n\n  const remainingState = pick(state, remainingParams)\n\n  const childResult = children.map((childNode) => _findMatchingRoutes(childNode, remainingState))\n\n  // Look for a matching route\n  const found = childResult.find((res): res is MatchOk => res.type === 'ok')\n  return found\n    ? createMatchOk(node, consumedState, scopedParams, found)\n    : createMatchError(node, [], remainingParams)\n}\n","/**\n * Like encodeURIComponent, but supports a custom set of unescaped characters.\n * @param uriComponent - A value representing an unencoded URI component.\n * @param unescaped - a string containing characters to not escape\n */\nexport function encodeURIComponentExcept(\n  uriComponent: string | number | boolean,\n  unescaped: string,\n): string {\n  const chars = [...String(uriComponent)]\n  let res = ''\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    if (unescaped.includes(char)) {\n      res += char\n    } else {\n      res += encodeURIComponent(char)\n    }\n  }\n  return res\n}\n","import Debug from 'debug'\n\nexport const debug = Debug('state-router')\n","import {_findMatchingRoutes} from './_findMatchingRoutes'\nimport {encodeURIComponentExcept} from './encodeURIComponentExcept'\nimport {type InternalSearchParam, type MatchOk, type RouterNode, type RouterState} from './types'\nimport {debug} from './utils/debug'\n\n/** @internal */\nexport function _resolvePathFromState(node: RouterNode, _state: RouterState): string {\n  debug('Resolving path from state %o', _state)\n\n  const match = _findMatchingRoutes(node, _state)\n  if (match.type === 'error') {\n    const unmappable = match.unmappableStateKeys\n    if (unmappable.length > 0) {\n      throw new Error(\n        `Unable to find matching route for state. Could not map the following state key${\n          unmappable.length == 1 ? '' : 's'\n        } to a valid url: ${unmappable.map(quote).join(', ')}`,\n      )\n    }\n    const missingKeys = match.missingKeys\n    throw new Error(\n      `Unable to find matching route for state. State object is missing the following key${\n        missingKeys.length == 1 ? '' : 's'\n      } defined in route: ${missingKeys.map(quote).join(', ')}`,\n    )\n  }\n\n  const {path, searchParams} = pathFromMatchResult(match)\n\n  const search = searchParams.length > 0 ? encodeParams(searchParams) : ''\n\n  return `/${path.join('/')}${search ? `?${search}` : ''}`\n}\n\nfunction bracketify(value: string): string {\n  return `[${value}]`\n}\n\nfunction encodeParams(params: InternalSearchParam[]): string {\n  return params\n    .flatMap(([key, value]) => {\n      if (value === undefined) {\n        return []\n      }\n      return [encodeSearchParamKey(serializeScopedPath(key)), encodeSearchParamValue(value)].join(\n        '=',\n      )\n    })\n    .join('&')\n}\n\nfunction serializeScopedPath(scopedPath: string[]): string {\n  const [head, ...tail] = scopedPath\n\n  return tail.length > 0 ? [head, ...tail.map(bracketify)].join('') : head\n}\n\nfunction encodeSearchParamValue(value: string): string {\n  return encodeURIComponentExcept(value, '/')\n}\n\nfunction encodeSearchParamKey(value: string): string {\n  return encodeURIComponentExcept(value, '[]')\n}\n\nfunction pathFromMatchResult(match: MatchOk): {\n  path: string[]\n  searchParams: InternalSearchParam[]\n} {\n  const matchedState = match.matchedState\n\n  const base = match.node.route.segments.map((segment) => {\n    if (segment.type === 'dir') {\n      return segment.name\n    }\n\n    const transform = match.node.transform && match.node.transform[segment.name]\n\n    return transform\n      ? transform.toPath(matchedState[segment.name] as any)\n      : matchedState[segment.name]\n  })\n\n  const childMatch = match.child ? pathFromMatchResult(match.child) : undefined\n\n  const searchParams = childMatch?.searchParams\n    ? [...match.searchParams, ...childMatch.searchParams]\n    : match.searchParams\n\n  return {\n    searchParams: addNodeScope(match.node, searchParams),\n    path: [...(base || []), ...(childMatch?.path || [])],\n  }\n}\n\nfunction addNodeScope(\n  node: RouterNode,\n  searchParams: InternalSearchParam[],\n): InternalSearchParam[] {\n  const scope = node.scope\n  return scope && !node.__unsafe_disableScopedSearchParams\n    ? searchParams.map(([namespaces, value]) => [[scope, ...namespaces], value])\n    : searchParams\n}\n\nfunction quote(value: string): string {\n  return `\"${value}\"`\n}\n","import {type InternalSearchParam} from '../types'\n\nexport function parseScopedParams(params: [key: string, value: string][]): InternalSearchParam[] {\n  return params.map(([key, value]) => [parse(key), value])\n}\n\nconst OPEN = 1\nconst CLOSED = 0\n\nfunction parse(str: string) {\n  const result = []\n  let i = 0\n  let state = CLOSED\n  while (i < str.length) {\n    const nextBracketIdx = str.indexOf('[', i)\n    if (nextBracketIdx === -1) {\n      result.push(str.slice(i, str.length))\n      break\n    }\n    if (state === OPEN) {\n      throw new Error('Nested brackets not supported')\n    }\n    state = OPEN\n    if (nextBracketIdx > i) {\n      result.push(str.slice(i, nextBracketIdx))\n      i = nextBracketIdx\n    }\n\n    const nextClosing = str.indexOf(']', nextBracketIdx)\n    if (nextClosing === -1) {\n      if (state === OPEN) {\n        throw new Error('Unclosed bracket')\n      }\n      break\n    }\n    state = CLOSED\n    result.push(str.slice(i + 1, nextClosing))\n    i = nextClosing + 1\n  }\n  return result\n}\n","import {\n  type InternalSearchParam,\n  type RouterNode,\n  type RouterState,\n  type SearchParam,\n} from './types'\nimport {arrayify} from './utils/arrayify'\nimport {debug} from './utils/debug'\nimport {parseScopedParams} from './utils/parseScopedParams'\n\nfunction matchPath(\n  node: RouterNode,\n  path: string,\n  searchParams: InternalSearchParam[],\n): RouterState | null {\n  const parts = path.split('/').filter(Boolean)\n  const segmentsLength = node.route.segments.length\n\n  if (parts.length < segmentsLength) {\n    return null\n  }\n\n  const state: RouterState = {}\n  const isMatching = node.route.segments.every((segment, i) => {\n    if (segment.type === 'dir') {\n      return segment.name === parts[i]\n    }\n\n    const transform = node.transform && node.transform[segment.name]\n\n    state[segment.name] = transform ? transform.toState(parts[i]) : parts[i]\n\n    return true\n  })\n\n  if (!isMatching) {\n    return null\n  }\n\n  const rest = parts.slice(segmentsLength)\n\n  let childState: RouterState | null = null\n\n  const children =\n    typeof node.children === 'function' ? arrayify(node.children(state)) : node.children\n\n  const unscopedParams = removeScope(node.scope, searchParams)\n\n  children.some((childNode) => {\n    if (childNode) {\n      const childParams = childNode.scope\n        ? unscopedParams.filter(([namespaces]) => childNode.scope === namespaces[0])\n        : unscopedParams\n\n      childState = matchPath(childNode, rest.join('/'), childParams)\n      return childState\n    }\n    return undefined\n  })\n\n  if (rest.length > 0 && !childState) {\n    return null\n  }\n\n  const selfParams = unscopedParams.flatMap(([namespace, value]): SearchParam[] => {\n    return namespace.length === 1 ? [[namespace[0], value]] : []\n  })\n\n  const mergedState: RouterState = {\n    ...state,\n    ...(childState || {}),\n    ...(selfParams.length > 0 ? {_searchParams: selfParams} : {}),\n  }\n\n  return node.scope ? {[node.scope]: mergedState} : mergedState\n}\n\n/**\n * @internal\n */\nexport function _resolveStateFromPath(node: RouterNode, path: string): Record<string, any> | null {\n  debug('resolving state from path %s', path)\n\n  const [pathname, search] = path.split('?')\n  const urlSearchParams = Array.from(new URLSearchParams(search).entries())\n\n  const pathMatch = matchPath(node, pathname, parseScopedParams(urlSearchParams))\n\n  debug('resolved: %o', pathMatch || null)\n\n  return pathMatch || null\n}\n\nfunction removeScope(\n  scope: string | undefined,\n  searchParams: InternalSearchParam[],\n): InternalSearchParam[] {\n  return scope\n    ? searchParams.map(([namespaces, value]) => [\n        namespaces[0] === scope ? namespaces.slice(1) : namespaces,\n        value,\n      ])\n    : searchParams\n}\n","/**\n * `atob()` and `btoa()` do not support Unicode characters outside of the Latin1 range,\n * but we obviously want to support the full range of Unicode characters in our router.\n *\n * Additionally, we would prefer not to use characters like `+` and `=` in URLs, as they\n * have specific meanings there and may be misinterpreted. Thus, this uses base64url instead\n * of the more common base64.\n */\n\n/**\n * Encodes a string as base64url\n *\n * @param str - String to encode\n * @returns Encoded string\n * @internal\n */\nexport function encodeBase64Url(str: string): string {\n  return encodeBase64(str).replace(/\\//g, '_').replace(/\\+/g, '-').replace(/[=]+$/, '')\n}\n\n/**\n * Decodes a base64url-encoded string\n *\n * @param str - String to decode\n * @returns Decoded string\n * @internal\n */\nexport function decodeBase64Url(str: string): string {\n  return decodeBase64(str.replace(/-/g, '+').replace(/_/g, '/'))\n}\n\nfunction percentToByte(p: string) {\n  return String.fromCharCode(parseInt(p.slice(1), 16))\n}\n\nfunction encodeBase64(str: string): string {\n  return btoa(encodeURIComponent(str).replace(/%[0-9A-F]{2}/g, percentToByte))\n}\n\nfunction byteToPercent(b: string) {\n  return `%${`00${b.charCodeAt(0).toString(16)}`.slice(-2)}`\n}\n\nfunction decodeBase64(str: string): string {\n  return decodeURIComponent(Array.from(atob(str), byteToPercent).join(''))\n}\n","import {decodeBase64Url, encodeBase64Url} from './base64url'\n\n/**\n * Decode a path segment containing JSON parameters\n *\n * @param pathSegment - The path segment to decode\n * @returns The decoded parameters\n * @internal\n * @hidden\n */\nexport function decodeJsonParams(pathSegment = ''): Record<string, unknown> {\n  const segment = decodeURIComponent(pathSegment)\n\n  if (!segment) {\n    return {}\n  }\n\n  // Because of high-unicode characters (eg outside of the latin1 range), we prefer base64url\n  // since it also removes characters we'd rather not put in our URLs (eg '=' and '/')\n  try {\n    return JSON.parse(decodeBase64Url(segment))\n  } catch (err) {\n    // Fall-through: previously we used plain base64 encoding instead of base64url\n  }\n\n  try {\n    return JSON.parse(atob(segment))\n  } catch (err) {\n    // Fall-through: before _that_, we used plain URI encoding\n  }\n\n  try {\n    return JSON.parse(segment)\n  } catch (err) {\n    console.warn('Failed to parse JSON parameters')\n  }\n\n  return {}\n}\n\n/**\n * Encodes a set of parameters as a path segment, using base64url\n *\n * @param params - Paramters to encode\n * @returns The encoded parameters as a path segment\n * @internal\n * @hidden\n */\nexport function encodeJsonParams(params?: Record<string, unknown>): string {\n  return params ? encodeBase64Url(JSON.stringify(params)) : ''\n}\n","export function decodeParams(pathSegment: string): Record<string, string> {\n  return pathSegment.split(';').reduce<Record<string, string>>((params, pair) => {\n    const [key, value] = pair.split('=')\n\n    params[decodeURIComponent(key)] = decodeURIComponent(value)\n\n    return params\n  }, {})\n}\n\nexport function encodeParams(params: Record<string, string | undefined | null>): string {\n  return Object.entries(params)\n    .filter(([, value]) => value !== undefined && value !== null)\n    .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value as string)}`)\n    .join(';')\n}\n","import {_parseRoute} from './_parseRoute'\nimport {_resolvePathFromState} from './_resolvePathFromState'\nimport {_resolveStateFromPath} from './_resolveStateFromPath'\nimport {type RouteChildren, type Router, type RouteTransform} from './types'\nimport {decodeJsonParams, encodeJsonParams} from './utils/jsonParamsEncoding'\nimport {decodeParams, encodeParams} from './utils/paramsEncoding'\n\n/**\n * @public\n */\nexport interface RouteNodeOptions {\n  /**\n   * The path of the route node.\n   */\n  path?: string\n  /**\n   * The children of the route node. See {@link RouteChildren}\n   */\n  children?: RouteChildren\n  /**\n   * The transforms to apply to the route node. See {@link RouteTransform}\n   */\n  transform?: {\n    [key: string]: RouteTransform<any>\n  }\n  /**\n   * The scope of the route node.\n   */\n  scope?: string\n\n  /**\n   * Optionally disable scoping of search params\n   * Scoped search params will be represented as scope[param]=value in the url\n   * Disabling this will still scope search params based on any parent scope unless the parent scope also has disabled search params scoping\n   * Caution: enabling this can cause conflicts with multiple plugins defining search params with the same name\n   */\n  __unsafe_disableScopedSearchParams?: boolean\n}\n\n/**\n * Interface for the {@link route} object.\n *\n * @public\n */\nexport interface RouteObject {\n  /**\n   * Creates a new router.\n   * Returns {@link Router}\n   * See {@link RouteNodeOptions} and {@link RouteChildren}\n   */\n  create: (\n    routeOrOpts: RouteNodeOptions | string,\n    childrenOrOpts?: RouteNodeOptions | RouteChildren | null,\n    children?: Router | RouteChildren,\n  ) => Router\n\n  /**\n   * Creates a new router for handling intents.\n   * Returns {@link Router}\n   */\n  intents: (base: string) => Router\n\n  /**\n   * Creates a new router scope.\n   * Returns {@link Router}\n   */\n  scope(\n    scopeName: string,\n    routeOrOpts: RouteNodeOptions | string,\n    childrenOrOpts?: RouteNodeOptions | RouteChildren | null,\n    children?: Router | RouteChildren,\n  ): Router\n}\n\n/**\n * An object containing functions for creating routers and router scopes.\n * See {@link RouteObject}\n *\n * @public\n *\n * @example\n * ```ts\n * const router = route.create({\n *   path: \"/foo\",\n *   children: [\n *     route.create({\n *       path: \"/bar\",\n *       children: [\n *         route.create({\n *           path: \"/:baz\",\n *           transform: {\n *             baz: {\n *               toState: (id) => ({ id }),\n *               toPath: (state) => state.id,\n *             },\n *           },\n *         }),\n *       ],\n *     }),\n *   ],\n * });\n * ```\n */\nexport const route: RouteObject = {\n  create: (routeOrOpts, childrenOrOpts, children) =>\n    _createNode(normalizeArgs(routeOrOpts, childrenOrOpts, children)),\n  intents: (base: string) => {\n    const basePath = normalize(base).join('/')\n\n    return route.create(`${basePath}/:intent`, [\n      route.create(\n        ':params',\n        {\n          transform: {\n            params: {\n              toState: decodeParams,\n              toPath: encodeParams,\n            },\n          },\n        },\n        [\n          route.create(':payload', {\n            transform: {\n              payload: {\n                toState: decodeJsonParams,\n                toPath: encodeJsonParams,\n              },\n            },\n          }),\n        ],\n      ),\n    ])\n  },\n  scope(\n    scopeName: string,\n    routeOrOpts: RouteNodeOptions | string,\n    childrenOrOpts?: RouteNodeOptions | RouteChildren | null,\n    children?: Router | RouteChildren,\n  ) {\n    const options = normalizeArgs(routeOrOpts, childrenOrOpts, children)\n\n    return _createNode({\n      ...options,\n      scope: scopeName,\n    })\n  },\n}\n\nfunction normalizeChildren(children: any): RouteChildren {\n  if (Array.isArray(children) || typeof children === 'function') {\n    return children\n  }\n  return children ? [children] : []\n}\n\nfunction isRoute(val?: RouteNodeOptions | Router | RouteChildren) {\n  return val && '_isRoute' in val\n}\n\nfunction normalizeArgs(...args: any[]): RouteNodeOptions\nfunction normalizeArgs(\n  path: string | RouteNodeOptions,\n  childrenOrOpts?: RouteNodeOptions | Router | RouteChildren,\n  children?: Router | RouteChildren,\n): RouteNodeOptions {\n  if (typeof path === 'object') {\n    return path\n  }\n\n  if (\n    Array.isArray(childrenOrOpts) ||\n    typeof childrenOrOpts === 'function' ||\n    isRoute(childrenOrOpts)\n  ) {\n    return {path, children: normalizeChildren(childrenOrOpts)}\n  }\n\n  if (children) {\n    return {path, ...childrenOrOpts, children: normalizeChildren(children)}\n  }\n\n  return {path, ...childrenOrOpts}\n}\n\nfunction normalize(...paths: string[]) {\n  return paths.reduce<string[]>((acc, path) => acc.concat(path.split('/')), []).filter(Boolean)\n}\n\nconst EMPTY_STATE = {}\n\nfunction isRoot(pathname: string): boolean {\n  // it is the root if every segment is an empty string\n  return pathname.split('/').every((segment) => !segment)\n}\n\n/**\n * @internal\n * @param options - Route node options\n */\nexport function _createNode(options: RouteNodeOptions): Router {\n  // eslint-disable-next-line camelcase\n  const {path, scope, transform, children, __unsafe_disableScopedSearchParams} = options\n\n  if (!path) {\n    throw new TypeError('Missing path')\n  }\n\n  const parsedRoute = _parseRoute(path)\n\n  return {\n    _isRoute: true, // todo: make a Router class instead\n    scope,\n    // eslint-disable-next-line camelcase\n    __unsafe_disableScopedSearchParams,\n    route: parsedRoute,\n    children: children || [],\n    transform,\n    encode(state) {\n      return _resolvePathFromState(this, state)\n    },\n    decode(_path) {\n      return _resolveStateFromPath(this, _path)\n    },\n    isRoot: isRoot,\n    isNotFound(pathname: string): boolean {\n      return this.decode(pathname) === null\n    },\n    getBasePath(): string {\n      return this.encode(EMPTY_STATE)\n    },\n    getRedirectBase(pathname: string): string | null {\n      if (isRoot(pathname)) {\n        const basePath = this.getBasePath()\n        // Check if basepath is something different than given\n        if (pathname !== basePath) {\n          return basePath\n        }\n      }\n      return null\n    },\n  }\n}\n","import type * as React from 'react'\nimport {useCallback, useMemo} from 'react'\n\nimport {RouterContext} from './RouterContext'\nimport {\n  type IntentParameters,\n  type NavigateOptions,\n  type Router,\n  type RouterContextValue,\n  type RouterState,\n} from './types'\n\n/**\n * The props for the {@link RouterProvider} component.\n *\n * @public\n */\nexport interface RouterProviderProps {\n  /**\n   * A function that is called when the user navigates to a new path.\n   * Takes an object containing the path to navigate to and an optional `replace` flag.\n   */\n  onNavigate: (opts: {path: string; replace?: boolean}) => void\n  /**\n   * The router object that is used to handle navigation. See {@link Router}\n   */\n  router: Router\n  /**\n   * The current state of the router. See {@link RouterState}\n   */\n  state: RouterState\n  /**\n   * The child elements to render.\n   */\n  children: React.ReactNode\n}\n\n/**\n * @example\n * ```tsx\n * import {\n *   NavigateOptions,\n *   route,\n *   RouterProvider,\n *   RouterState\n * } from 'sanity'\n * import {useCallback, useMemo} from 'react'\n *\n * function Root() {\n *   const router = useMemo(() => route.create('/'), [])\n *\n *   const [state, setState] = useState<RouterState>({})\n *\n *   const handleNavigate = useCallback((\n *     path: string,\n *     options?: NavigateOptions\n *   ) => {\n *     console.log('navigate', path, options)\n *\n *     setState(router.decode(path))\n *   }, [router])\n *\n *   return (\n *     <RouterProvider\n *       onNavigate={handleNavigate}\n *       router={router}\n *       state={state}\n *     >\n *       <div>This is a routed application</div>\n *     </RouterProvider>\n *   )\n * }\n * ```\n *\n * @param props - The component props.\n *  {@link RouterProviderProps}\n *\n * @public\n */\nexport function RouterProvider(props: RouterProviderProps): React.ReactElement {\n  const {onNavigate, router: routerProp, state} = props\n\n  const resolveIntentLink = useCallback(\n    (intentName: string, parameters?: IntentParameters): string => {\n      const [params, payload] = Array.isArray(parameters) ? parameters : [parameters]\n      return routerProp.encode({intent: intentName, params, payload})\n    },\n    [routerProp],\n  )\n\n  const resolvePathFromState = useCallback(\n    (nextState: Record<string, unknown>): string => {\n      return routerProp.encode(nextState)\n    },\n    [routerProp],\n  )\n\n  const navigate = useCallback(\n    (nextState: Record<string, unknown>, options: NavigateOptions = {}) => {\n      onNavigate({path: resolvePathFromState(nextState), replace: options.replace})\n    },\n    [onNavigate, resolvePathFromState],\n  )\n\n  const navigateIntent = useCallback(\n    (intentName: string, params?: IntentParameters, options: NavigateOptions = {}) => {\n      onNavigate({path: resolveIntentLink(intentName, params), replace: options.replace})\n    },\n    [onNavigate, resolveIntentLink],\n  )\n\n  const router: RouterContextValue = useMemo(\n    () => ({\n      navigate,\n      navigateIntent,\n      navigateUrl: onNavigate,\n      resolveIntentLink,\n      resolvePathFromState,\n      state,\n    }),\n    [navigate, navigateIntent, onNavigate, resolveIntentLink, resolvePathFromState, state],\n  )\n\n  return <RouterContext.Provider value={router}>{props.children}</RouterContext.Provider>\n}\n","/* eslint-disable camelcase */\n\nimport type * as React from 'react'\nimport {useCallback, useMemo, useRef} from 'react'\n\nimport {RouterContext} from './RouterContext'\nimport {type RouterContextValue, type RouterState} from './types'\nimport {useRouter} from './useRouter'\n\nfunction addScope(\n  routerState: Record<string, any>,\n  scope: string,\n  scopedState: Record<string, any>,\n) {\n  return (\n    scopedState && {\n      ...routerState,\n      [scope]: scopedState,\n    }\n  )\n}\n\n/**\n * Props for the {@link RouteScope} component.\n *\n * @public\n */\nexport interface RouteScopeProps {\n  /**\n   * The scope for the nested routes.\n   */\n  scope: string\n\n  /**\n   * Optionally disable scoping of search params\n   * Scoped search params will be represented as scope[param]=value in the url\n   * Disabling this will still scope search params based on any parent scope unless the parent scope also has disabled search params scoping\n   * Caution: enabling this can cause conflicts with multiple plugins defining search params with the same name\n   */\n  __unsafe_disableScopedSearchParams?: boolean\n  /**\n   * The content to display inside the route scope.\n   */\n  children: React.ReactNode\n}\n\n/**\n * A component that wraps a scoped router context, so that calls to\n * `useRouter()`, `useRouterState()`, and usage of `<StateLink />`\n * will be prefixed with the scope segment.\n *\n * @public\n *\n * @param props - Props to pass `RouteScope` component.\n *  See {@link RouteScopeProps}\n *\n * @example\n * ```tsx\n * function MyComponent() {\n *  return (\n *    <RouteScope scope=\"foo\">\n *      <StateLink state={{bar: 'baz'}}>Link</StateLink>\n *    </RouteScope>\n *  )\n * }\n * ```\n */\nexport function RouteScope(props: RouteScopeProps): React.ReactElement {\n  const {children, scope, __unsafe_disableScopedSearchParams} = props\n  const parentRouter = useRouter()\n  const {resolvePathFromState: parent_resolvePathFromState, navigate: parent_navigate} =\n    parentRouter\n\n  const parentStateRef = useRef(parentRouter.state)\n\n  parentStateRef.current = parentRouter.state\n\n  const resolveNextParentState = useCallback(\n    (_nextState: RouterState) => {\n      const {_searchParams, ...nextState} = _nextState\n      const nextParentState = addScope(parentStateRef.current, scope, nextState)\n      if (__unsafe_disableScopedSearchParams) {\n        // Move search params to parent scope\n        nextParentState._searchParams = _searchParams\n      } else {\n        nextParentState[scope]._searchParams = _searchParams\n      }\n      return nextParentState\n    },\n    [scope, __unsafe_disableScopedSearchParams],\n  )\n\n  const resolvePathFromState = useCallback(\n    (nextState: RouterState) => parent_resolvePathFromState(resolveNextParentState(nextState)),\n    [parent_resolvePathFromState, resolveNextParentState],\n  )\n\n  const navigate = useCallback(\n    (nextState: RouterState) => parent_navigate(resolveNextParentState(nextState)),\n    [parent_navigate, resolveNextParentState],\n  )\n\n  const childRouter: RouterContextValue = useMemo(() => {\n    const parentState = parentRouter.state\n    const childState = {...(parentState[scope] || {})} as RouterState\n    if (__unsafe_disableScopedSearchParams) {\n      childState._searchParams = parentState._searchParams\n    }\n    return {\n      ...parentRouter,\n      navigate,\n      resolvePathFromState,\n      state: childState,\n    }\n  }, [scope, parentRouter, navigate, resolvePathFromState, __unsafe_disableScopedSearchParams])\n\n  return <RouterContext.Provider value={childRouter}>{children}</RouterContext.Provider>\n}\n","import type * as React from 'react'\nimport {useMemo} from 'react'\n\nimport {useLink} from './useLink'\nimport {useRouter} from './useRouter'\n\nconst EMPTY_STATE = {}\n\n/**\n * @public\n */\nexport interface UseStateLinkOptions {\n  /**\n   * The click event handler for the link.\n   */\n  onClick?: React.MouseEventHandler<HTMLElement>\n  /**\n   * Whether to replace the current history entry instead of adding a new one.\n   */\n  replace?: boolean\n  /**\n   * The state object to update when the link is clicked.\n   */\n  state?: Record<string, unknown>\n  /**\n   * The target window or frame to open the linked document in.\n   */\n  target?: string\n  /**\n   * Whether to navigate to the index page of the linked document.\n   */\n  toIndex?: boolean\n}\n\n/**\n * @public\n *\n * @param options - Options to use for the link\n *  {@link UseStateLinkOptions}\n *\n * @returns - An object with `onClick` and `href` props to use for the link\n *\n * @example\n * ```tsx\n * const {onClick, href} = useStateLink({state: {foo: 'bar'}})\n * ```\n */\nexport function useStateLink(options: UseStateLinkOptions): {\n  onClick: React.MouseEventHandler<HTMLElement>\n  href: string\n} {\n  const {onClick: onClickProp, replace, state, target, toIndex = false} = options\n\n  if (state && toIndex) {\n    throw new Error('Passing both `state` and `toIndex={true}` as props to StateLink is invalid')\n  }\n\n  if (!state && !toIndex) {\n    // eslint-disable-next-line no-console\n    console.error(\n      new Error(\n        'No state passed to StateLink. If you want to link to an empty state, its better to use the the `toIndex` property',\n      ),\n    )\n  }\n\n  const {resolvePathFromState} = useRouter()\n\n  const href = useMemo(\n    () => resolvePathFromState(toIndex ? EMPTY_STATE : state || EMPTY_STATE),\n    [resolvePathFromState, state, toIndex],\n  )\n\n  const {onClick} = useLink({href, onClick: onClickProp, replace, target})\n\n  return {onClick, href}\n}\n","import type * as React from 'react'\nimport {forwardRef} from 'react'\n\nimport {useStateLink} from './useStateLink'\n\n/**\n * Props for the {@link StateLink} component.\n *\n * @public\n */\nexport interface StateLinkProps {\n  /**\n   * Whether to replace the current history entry instead of adding a new one.\n   */\n  replace?: boolean\n  /**\n   * The state to associate with the link.\n   */\n  state?: Record<string, unknown>\n  /**\n   * Whether to navigate to the index page of the app.\n   */\n  toIndex?: boolean\n}\n\n/**\n * A component that creates a link that updates the URL state.\n *\n * @remarks\n * This component uses the {@link useStateLink} hook\n * to create a link that updates the URL state.\n *\n * @param props - Props to pass to the `StateLink` component.\n *  See {@link StateLinkProps}.\n *\n * @public\n *\n * @example\n * ```tsx\n * function MyComponent() {\n *  return <StateLink state={{foo: 'bar'}}>Link</StateLink>\n * }\n * ```\n */\nexport const StateLink = forwardRef(function StateLink(\n  props: StateLinkProps & Omit<React.HTMLProps<HTMLAnchorElement>, 'href'>,\n  ref: React.ForwardedRef<HTMLAnchorElement>,\n) {\n  const {onClick: onClickProp, replace, state, target, toIndex = false, ...restProps} = props\n  const {onClick, href} = useStateLink({\n    onClick: onClickProp,\n    replace,\n    state,\n    target,\n    toIndex,\n  })\n\n  return <a {...restProps} href={href} onClick={onClick} ref={ref} />\n})\n","import {identity} from 'lodash'\nimport {useMemo} from 'react'\n\nimport {type RouterState} from './types'\nimport {useRouter} from './useRouter'\n\n/**\n * @public\n *\n * @param selector - A selector function that receives the router state and returns a value. See {@link RouterState}\n *\n * @returns The value returned by the selector function or RouterState. See {@link RouterState}\n *\n * @example\n * ```tsx\n * const {activeTool} = useRouterState(state => state.tool)\n * ```\n */\nexport function useRouterState<R = RouterState>(selector: (routerState: RouterState) => R): R\n\n/**\n * @public\n *\n * @returns The router state. See {@link RouterState}\n *\n * @example\n * ```tsx\n * const routerState = useRouterState()\n * ```\n */\nexport function useRouterState(): RouterState\n\n/**\n * @public\n */\nexport function useRouterState(\n  selector: (routerState: RouterState) => unknown = identity,\n): unknown {\n  const {state} = useRouter()\n  return useMemo(() => selector(state), [selector, state])\n}\n","import type * as React from 'react'\nimport {type ComponentType, type FunctionComponent} from 'react'\n\nimport {type RouterContextValue} from './types'\nimport {useRouter} from './useRouter'\n\n/**\n * A higher-order component that injects the `router` object from the `useRouter` hook\n * into the props of the wrapped component.\n *\n * @internal\n * @deprecated - Use the `useRouter` hook instead.\n *\n * @param Component - The component to wrap.\n *\n * @returns The wrapped component.\n *\n * @example\n * ```tsx\n * function MyComponent(props) {\n *  return <div>{props.router.state.myParam}</div>\n * }\n *\n * export default withRouter(MyComponent)\n * ```\n */\nexport function withRouter<Props extends {router: RouterContextValue}>(\n  Component: ComponentType<Props>,\n): FunctionComponent<Omit<Props, 'router'>> {\n  function WithRouter(props: Omit<Props, 'router'>) {\n    const router = useRouter()\n\n    return <Component {...(props as Props)} router={router} />\n  }\n\n  WithRouter.displayName = `withRouter(${Component.displayName || Component.name})`\n\n  return WithRouter\n}\n\n/**\n * @internal\n * @deprecated - Use the `useRouter` hook instead.\n */\nexport interface WithRouterProps {\n  /**\n   * The `router` object from the `useRouter` hook.\n   *  {@link RouterContextValue}\n   */\n  router: RouterContextValue\n  /**\n   * A function that renders the wrapped component with the `router` object as a parameter.\n   */\n  children: (router: RouterContextValue) => React.ReactElement\n}\n\n/**\n * A higher-order component that injects the router object into its child component.\n *\n * @internal\n * @deprecated - Use the `useRouter` hook instead.\n *\n * @returns The rendered component.\n *\n * @example\n * ```tsx\n * function MyComponent(props: {router: Router}) {\n *   const {location} = props.router\n *   const {pathname} = location\n *   return <p>The current path is: {pathname}</p>\n * }\n *\n * function App() {\n *   return (\n *     <Router>\n *       <WithRouter>\n *         {router => <MyComponent router={router} />}\n *       </WithRouter>\n *     </Router>\n *   )\n * }\n * ```\n */\nexport const WithRouter = withRouter((props: WithRouterProps) => props.children(props.router))\n"],"names":["RouterContext","createContext","useRouter","router","useContext","Error","isLeftClickEvent","event","button","isModifiedEvent","metaKey","altKey","ctrlKey","shiftKey","useLink","options","onClick","onClickProp","href","target","replace","navigateUrl","useCallback","isDefaultPrevented","preventDefault","path","useIntentLink","intent","params","resolveIntentLink","useMemo","IntentLink","forwardRef","props","ref","restProps","Link","VALID_PARAM_SEGMENT","createSegment","segment","startsWith","paramName","substring","test","addendum","includes","console","error","concat","type","name","_parseRoute","route","pathname","split","segments","map","filter","Boolean","raw","arrayify","val","Array","isArray","isRecord","value","isPlainObject","createMatchError","node","missingKeys","unmappableStateKeys","createMatchOk","matchedState","searchParams","child","_findMatchingRoutes","_state","scopedState","scope","_searchParams","state","requiredParams","seg","stateKeys","Object","keys","consumedParams","intersection","missingParams","difference","remainingParams","length","scopedParams","_ref","key","consumedState","pick","children","remainingState","childResult","childNode","found","find","res","encodeURIComponentExcept","uriComponent","unescaped","chars","String","i","char","encodeURIComponent","debug","Debug","_resolvePathFromState","match","unmappable","quote","join","pathFromMatchResult","search","encodeParams","bracketify","flatMap","_ref2","encodeSearchParamKey","serializeScopedPath","encodeSearchParamValue","scopedPath","head","tail","base","transform","toPath","childMatch","addNodeScope","__unsafe_disableScopedSearchParams","_ref3","namespaces","parseScopedParams","_ref4","parse","OPEN","CLOSED","str","result","nextBracketIdx","indexOf","push","slice","nextClosing","matchPath","parts","segmentsLength","isMatching","every","toState","rest","childState","unscopedParams","removeScope","some","childParams","_ref5","selfParams","_ref6","namespace","mergedState","_resolveStateFromPath","urlSearchParams","from","URLSearchParams","entries","pathMatch","_ref7","encodeBase64Url","encodeBase64","decodeBase64Url","decodeBase64","percentToByte","p","fromCharCode","parseInt","btoa","byteToPercent","b","charCodeAt","toString","decodeURIComponent","atob","decodeJsonParams","pathSegment","JSON","err","warn","encodeJsonParams","stringify","decodeParams","reduce","pair","_ref8","_ref9","create","routeOrOpts","childrenOrOpts","_createNode","normalizeArgs","intents","basePath","normalize","payload","scopeName","normalizeChildren","isRoute","_len","arguments","paths","_key","acc","EMPTY_STATE","isRoot","TypeError","parsedRoute","_isRoute","encode","decode","_path","isNotFound","getBasePath","getRedirectBase","RouterProvider","onNavigate","routerProp","intentName","parameters","resolvePathFromState","nextState","navigate","undefined","navigateIntent","Provider","addScope","routerState","RouteScope","parentRouter","parent_resolvePathFromState","parent_navigate","parentStateRef","useRef","current","resolveNextParentState","_nextState","nextParentState","childRouter","parentState","useStateLink","toIndex","StateLink","useRouterState","selector","identity","withRouter","Component","WithRouter","jsx","displayName"],"mappings":"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"}