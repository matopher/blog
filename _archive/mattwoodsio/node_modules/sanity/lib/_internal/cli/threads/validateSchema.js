'use strict';

var _internal = require('@sanity/schema/_internal');
var sanity = require('sanity');
var worker_threads = require('worker_threads');
var getStudioWorkspaces = require('../../../_chunks/getStudioWorkspaces-BP-leiyc.js');
var mockBrowserEnvironment = require('../../../_chunks/mockBrowserEnvironment-Bpx7ZdVR.js');
var _a;
const {
  workDir,
  workspace: workspaceName,
  level = "warning"
} = worker_threads.workerData;
if (worker_threads.isMainThread || !worker_threads.parentPort) {
  throw new Error("This module must be run as a worker thread");
}
const cleanup = mockBrowserEnvironment.mockBrowserEnvironment(workDir);
try {
  const workspaces = getStudioWorkspaces.getStudioConfig({
    basePath: workDir
  });
  if (!workspaces.length) {
    throw new Error("Configuration did not return any workspaces.");
  }
  let workspace;
  if (workspaceName) {
    workspace = workspaces.find(w => w.name === workspaceName);
    if (!workspace) {
      throw new Error("Could not find any workspaces with name `".concat(workspaceName, "`"));
    }
  } else {
    if (workspaces.length !== 1) {
      throw new Error("Multiple workspaces found. Please specify which workspace to use with '--workspace'.");
    }
    workspace = workspaces[0];
  }
  const schemaTypes = sanity.resolveSchemaTypes({
    config: workspace,
    context: {
      dataset: workspace.dataset,
      projectId: workspace.projectId
    }
  });
  const validation = _internal.groupProblems(_internal.validateSchema(schemaTypes).getTypes());
  const result = {
    validation: validation.map(group => ({
      ...group,
      problems: group.problems.filter(problem => level === "error" ? problem.severity === "error" : true)
    })).filter(group => group.problems.length)
  };
  (_a = worker_threads.parentPort) == null ? void 0 : _a.postMessage(result);
} finally {
  cleanup();
}
//# sourceMappingURL=validateSchema.js.map
