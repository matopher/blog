{"version":3,"file":"getGraphQLAPIs.js","sources":["../../../../src/_internal/cli/threads/getGraphQLAPIs.ts"],"sourcesContent":["import {type CliV3CommandContext, type GraphQLAPIConfig} from '@sanity/cli'\nimport {type Schema} from '@sanity/types'\nimport {isPlainObject} from 'lodash'\nimport oneline from 'oneline'\nimport {type Workspace} from 'sanity'\nimport {isMainThread, type MessagePort, parentPort, workerData} from 'worker_threads'\n\nimport {type SchemaDefinitionish, type TypeResolvedGraphQLAPI} from '../actions/graphql/types'\nimport {getStudioWorkspaces} from '../util/getStudioWorkspaces'\n\nif (isMainThread || !parentPort) {\n  throw new Error('This module must be run as a worker thread')\n}\n\ngetGraphQLAPIsForked(parentPort)\n\nasync function getGraphQLAPIsForked(parent: MessagePort): Promise<void> {\n  const {cliConfig, cliConfigPath, workDir} = workerData\n  const resolved = await resolveGraphQLApis({cliConfig, cliConfigPath, workDir})\n  parent.postMessage(resolved)\n}\n\nasync function resolveGraphQLApis({\n  cliConfig,\n  cliConfigPath,\n  workDir,\n}: Pick<CliV3CommandContext, 'cliConfig' | 'cliConfigPath' | 'workDir'>): Promise<\n  TypeResolvedGraphQLAPI[]\n> {\n  const workspaces = await getStudioWorkspaces({basePath: workDir})\n  const numSources = workspaces.reduce(\n    (count, workspace) => count + workspace.unstable_sources.length,\n    0,\n  )\n  const multiSource = numSources > 1\n  const multiWorkspace = workspaces.length > 1\n  const hasGraphQLConfig = Boolean(cliConfig?.graphql)\n\n  if (workspaces.length === 0) {\n    throw new Error('No studio configuration found')\n  }\n\n  if (numSources === 0) {\n    throw new Error('No sources (project ID / dataset) configured')\n  }\n\n  // We can only automatically configure if there is a single workspace + source in play\n  if ((multiWorkspace || multiSource) && !hasGraphQLConfig) {\n    throw new Error(oneline`\n      Multiple workspaces/sources configured.\n      You must define an array of GraphQL APIs in ${cliConfigPath || 'sanity.cli.js'}\n      and specify which workspace/source to use.\n    `)\n  }\n\n  // No config is defined, but we have a single workspace + source, so use that\n  if (!hasGraphQLConfig) {\n    const {projectId, dataset, schema} = workspaces[0].unstable_sources[0]\n    return [{schemaTypes: getStrippedSchemaTypes(schema), projectId, dataset}]\n  }\n\n  // Explicity defined config\n  const apiDefs = validateCliConfig(cliConfig?.graphql || [])\n  return resolveGraphQLAPIsFromConfig(apiDefs, workspaces)\n}\n\nfunction resolveGraphQLAPIsFromConfig(\n  apiDefs: GraphQLAPIConfig[],\n  workspaces: Workspace[],\n): TypeResolvedGraphQLAPI[] {\n  const resolvedApis: TypeResolvedGraphQLAPI[] = []\n\n  for (const apiDef of apiDefs) {\n    const {workspace: workspaceName, source: sourceName} = apiDef\n    if (!workspaceName && workspaces.length > 1) {\n      throw new Error(\n        'Must define `workspace` name in GraphQL API config when multiple workspaces are defined',\n      )\n    }\n\n    // If we only have a single workspace defined, we can assume that is the intended one,\n    // even if no `workspace` is defined for the GraphQL API\n    const workspace =\n      !workspaceName && workspaces.length === 1\n        ? workspaces[0]\n        : workspaces.find((space) => space.name === (workspaceName || 'default'))\n\n    if (!workspace) {\n      throw new Error(`Workspace \"${workspaceName || 'default'}\" not found`)\n    }\n\n    // If we only have a single source defined, we can assume that is the intended one,\n    // even if no `source` is defined for the GraphQL API\n    const source =\n      !sourceName && workspace.unstable_sources.length === 1\n        ? workspace.unstable_sources[0]\n        : workspace.unstable_sources.find((src) => src.name === (sourceName || 'default'))\n\n    if (!source) {\n      throw new Error(\n        `Source \"${sourceName || 'default'}\" not found in workspace \"${\n          workspaceName || 'default'\n        }\"`,\n      )\n    }\n\n    resolvedApis.push({\n      ...apiDef,\n      dataset: source.dataset,\n      projectId: source.projectId,\n      schemaTypes: getStrippedSchemaTypes(source.schema),\n    })\n  }\n\n  return resolvedApis\n}\n\nfunction validateCliConfig(\n  config: GraphQLAPIConfig[],\n  configPath = 'sanity.cli.js',\n): GraphQLAPIConfig[] {\n  if (!Array.isArray(config)) {\n    throw new Error(`\"graphql\" key in \"${configPath}\" must be an array if defined`)\n  }\n\n  if (config.length === 0) {\n    throw new Error(`No GraphQL APIs defined in \"${configPath}\"`)\n  }\n\n  return config\n}\n\nfunction getStrippedSchemaTypes(schema: Schema): SchemaDefinitionish[] {\n  const schemaDef = schema._original || {types: []}\n  return schemaDef.types.map((type) => stripType(type))\n}\n\nfunction stripType(input: unknown): SchemaDefinitionish {\n  return strip(input) as SchemaDefinitionish\n}\n\nfunction strip(input: unknown): unknown {\n  if (Array.isArray(input)) {\n    return input.map((item) => strip(item)).filter((item) => typeof item !== 'undefined')\n  }\n\n  if (isPlainishObject(input)) {\n    return Object.keys(input).reduce(\n      (stripped, key) => {\n        stripped[key] = strip(input[key])\n        return stripped\n      },\n      {} as Record<string, unknown>,\n    )\n  }\n\n  return isBasicType(input) ? input : undefined\n}\n\nfunction isPlainishObject(input: unknown): input is Record<string, unknown> {\n  return isPlainObject(input)\n}\n\nfunction isBasicType(input: unknown): boolean {\n  const type = typeof input\n  if (type === 'boolean' || type === 'number' || type === 'string') {\n    return true\n  }\n\n  if (type !== 'object') {\n    return false\n  }\n\n  return Array.isArray(input) || input === null || isPlainishObject(input)\n}\n"],"names":["_a","isMainThread","parentPort","Error","getGraphQLAPIsForked","parent","cliConfig","cliConfigPath","workDir","workerData","resolved","resolveGraphQLApis","postMessage","_ref","workspaces","getStudioWorkspaces","basePath","numSources","reduce","count","workspace","unstable_sources","length","multiSource","multiWorkspace","hasGraphQLConfig","Boolean","graphql","oneline","__template","projectId","dataset","schema","schemaTypes","getStrippedSchemaTypes","apiDefs","validateCliConfig","resolveGraphQLAPIsFromConfig","resolvedApis","apiDef","workspaceName","source","sourceName","find","space","name","concat","src","push","config","configPath","arguments","undefined","Array","isArray","schemaDef","_original","types","map","type","stripType","input","strip","item","filter","isPlainishObject","Object","keys","stripped","key","isBasicType","isPlainObject"],"mappings":"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"}