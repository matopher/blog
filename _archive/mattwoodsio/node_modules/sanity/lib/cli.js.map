{"version":3,"file":"cli.js","sources":["../src/_internal/cli/server/getStudioEnvironmentVariables.ts"],"sourcesContent":["/* eslint-disable no-process-env */\nimport {loadEnv} from '@sanity/cli'\n\nconst envPrefix = 'SANITY_STUDIO_'\n\n/**\n * The params for the `getStudioEnvironmentVariables` function that gets Studio focused environment variables.\n *\n * @public\n */\nexport interface StudioEnvVariablesOptions {\n  /**\n   * When specified adds a prefix to the environment variable keys,\n   * eg: `getStudioEnvironmentVariables({prefix: 'process.env.'})`\n   */\n  prefix?: string\n  /**\n   * When specified includes environment variables from dotenv files (`.env`), in the same way the studio does.\n   * A `mode` must be specified, usually `development`\n   * or `production`, which will load the corresponding `.env.development` or `.env.production`.\n   * To specify where to look for the dotenv files, specify `options.envFile.envDir`.\n   */\n  envFile?: {mode: string; envDir?: string} | false\n  /**\n   * When specified, JSON-encodes the values, which is handy if you want to pass\n   * this to a bundlers hardcoded defines, such as Vite's `define` or Webpack's `DefinePlugin`.\n   */\n  jsonEncode?: boolean\n}\n\n/**\n * Get environment variables prefixed with SANITY_STUDIO_, as an object.\n *\n * @param options - Options for the environment variable loading\n *  {@link StudioEnvVariablesOptions}\n * @returns Object of studio environment variables\n *\n * @example\n * ```tsx\n * getStudioEnvironmentVariables({prefix: 'process.env.', jsonEncode: true})\n * ```\n *\n * @public\n */\nexport function getStudioEnvironmentVariables(\n  options: StudioEnvVariablesOptions = {},\n): Record<string, string> {\n  const {prefix = '', envFile = false, jsonEncode = false} = options\n  const fullEnv = envFile\n    ? {...process.env, ...loadEnv(envFile.mode, envFile.envDir || process.cwd(), [envPrefix])}\n    : process.env\n\n  const studioEnv: Record<string, string> = {}\n  for (const key in fullEnv) {\n    if (key.startsWith(envPrefix)) {\n      studioEnv[`${prefix}${key}`] = jsonEncode\n        ? JSON.stringify(fullEnv[key] || '')\n        : fullEnv[key] || ''\n    }\n  }\n  return studioEnv\n}\n"],"names":["envPrefix","getStudioEnvironmentVariables","options","arguments","length","undefined","prefix","envFile","jsonEncode","fullEnv","process","env","loadEnv","mode","envDir","cwd","studioEnv","key","startsWith","concat","JSON","stringify"],"mappings":";;;;;;AAGA,MAAMA,SAAY,GAAA,gBAAA;AAyCF,SAAAC,6BAAAA,CAAA,EAEU;EAAA,IADxBC,OAAqC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAA,EACb;EACxB,MAAM;IAACG,MAAS,GAAA,EAAA;IAAIC,UAAU,KAAO;IAAAC,UAAA,GAAa;EAAS,CAAA,GAAAN,OAAA;EACrD,MAAAO,OAAA,GAAUF,UACZ;IAAC,GAAGG,QAAQC,GAAK;IAAA,GAAGC,GAAAA,CAAAA,QAAQL,OAAQ,CAAAM,IAAA,EAAMN,QAAQO,MAAU,IAAAJ,OAAA,CAAQK,KAAO,EAAA,CAACf,SAAS,CAAC;MACtFU,OAAQ,CAAAC,GAAA;EAEZ,MAAMK,YAAoC,CAAA,CAAC;EAC3C,KAAA,MAAWC,OAAOR,OAAS,EAAA;IACrB,IAAAQ,GAAA,CAAIC,UAAW,CAAAlB,SAAS,CAAG,EAAA;MAC7BgB,SAAA,CAAU,EAAG,CAAAG,MAAA,CAAAb,MAAA,CAAA,CAASa,MAAK,CAAAF,GAAA,CAAA,CAAA,GAAIT,aAC3BY,IAAK,CAAAC,SAAA,CAAUZ,OAAQ,CAAAQ,GAAG,CAAK,IAAA,EAAE,CACjC,GAAAR,OAAA,CAAQQ,GAAG,CAAK,IAAA,EAAA;IACtB;EACF;EACO,OAAAD,SAAA;AACT;;;;;;;;;;;;;;;;;;;"}