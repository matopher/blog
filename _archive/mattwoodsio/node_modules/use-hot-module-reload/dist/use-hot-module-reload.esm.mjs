// src/use-hot-module-reload.esm.ts
import { useEffect } from "react";
var isModule = (() => {
  try {
    return typeof import.meta !== "undefined";
  } catch (err) {
    return false;
  }
})();
var hasHMR = () => {
  try {
    return Boolean(isModule && (import.meta.hot || import.meta.webpackHot));
  } catch (err) {
    return false;
  }
};
function useHotModuleReload(callback) {
  if (!hasHMR) {
    return void 0;
  }
  return typeof import.meta.webpackHot === "undefined" ? useViteHotModuleReload(callback) : useWebpackHotModuleReload(callback);
}
function useWebpackHotModuleReload(callback) {
  useEffect(() => {
    if (import.meta.webpackHot) {
      const statusHandler = (status) => status === "idle" ? callback() : void 0;
      import.meta.webpackHot.addStatusHandler(statusHandler);
      return () => {
        var _a;
        return (_a = import.meta.webpackHot) == null ? void 0 : _a.removeStatusHandler(statusHandler);
      };
    }
    return void 0;
  }, [callback]);
}
function useViteHotModuleReload(callback) {
  useEffect(() => {
    if (import.meta.hot) {
      const disposers = /* @__PURE__ */ new Set();
      import.meta.hot.on("vite:beforeUpdate", () => {
        let flushTimeout;
        let hasSeenScheduledUpdate = window.__vite_plugin_react_timeout > 0;
        const refreshProber = setInterval(() => {
          const now = window.__vite_plugin_react_timeout;
          if (hasSeenScheduledUpdate && now === 0) {
            complete();
          } else if (!hasSeenScheduledUpdate && now > 0) {
            hasSeenScheduledUpdate = true;
          }
        }, 10);
        const fallbackTimeout = setTimeout(complete, 1e3, "fallback");
        function clear() {
          clearInterval(refreshProber);
          clearTimeout(fallbackTimeout);
          clearTimeout(flushTimeout);
        }
        function complete() {
          clear();
          flushTimeout = setTimeout(callback, 50);
        }
        disposers.add(clear);
      });
      return () => {
        disposers.forEach((disposer) => disposer());
        disposers.clear();
      };
    }
    return void 0;
  }, [callback]);
}
export {
  useHotModuleReload
};
//# sourceMappingURL=use-hot-module-reload.esm.mjs.map