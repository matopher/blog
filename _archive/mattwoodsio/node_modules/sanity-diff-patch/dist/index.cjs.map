{"version":3,"file":"index.cjs","sources":["../src/paths.ts","../src/diffError.ts","../src/validate.ts","../src/diffPatch.ts"],"sourcesContent":["import type {KeyedSanityObject} from './diffPatch.js'\n\n/**\n * A segment of a path\n *\n * @public\n */\nexport type PathSegment =\n  | string // Property\n  | number // Array index\n  | {_key: string} // Array `_key` lookup\n  | [number | '', number | ''] // From/to array index\n\n/**\n * An array of path segments representing a path in a document\n *\n * @public\n */\nexport type Path = PathSegment[]\n\n/**\n * Converts an array path to a string path\n *\n * @param path - The array path to convert\n * @returns A stringified path\n * @internal\n */\nexport function pathToString(path: Path): string {\n  return path.reduce((target: string, segment: PathSegment, i: number) => {\n    if (Array.isArray(segment)) {\n      return `${target}[${segment.join(':')}]`\n    }\n\n    if (isKeyedObject(segment)) {\n      return `${target}[_key==\"${segment._key}\"]`\n    }\n\n    if (typeof segment === 'number') {\n      return `${target}[${segment}]`\n    } else if (typeof segment === 'string' && /^\\d+$/.test(segment)) {\n      return `${target}[\"${segment}\"]`\n    }\n\n    if (typeof segment === 'string') {\n      const separator = i === 0 ? '' : '.'\n      return `${target}${separator}${segment}`\n    }\n\n    throw new Error(`Unsupported path segment \"${segment}\"`)\n  }, '')\n}\n\nfunction isKeyedObject(obj: any): obj is KeyedSanityObject {\n  return typeof obj === 'object' && typeof obj._key === 'string'\n}\n","import {type Path, pathToString} from './paths.js'\n\n/**\n * Represents an error that occurred during a diff process.\n * Contains `path`, `value` and `serializedPath` properties,\n * which is helpful for debugging and showing friendly messages.\n *\n * @public\n */\nexport class DiffError extends Error {\n  public path: Path\n  public value: unknown\n  public serializedPath: string\n\n  constructor(message: string, path: Path, value?: unknown) {\n    const serializedPath = pathToString(path)\n    super(`${message} (at '${serializedPath}')`)\n\n    this.path = path\n    this.serializedPath = serializedPath\n    this.value = value\n  }\n}\n","import {DiffError} from './diffError.js'\nimport type {Path} from './paths.js'\n\nconst idPattern = /^[a-z0-9][a-z0-9_.-]+$/i\nconst propPattern = /^[a-zA-Z_][a-zA-Z0-9_]*$/\nconst propStartPattern = /^[a-z_]/i\n\n/**\n * Validate the given document/subtree for Sanity compatibility\n *\n * @param item - The document or subtree to validate\n * @param path - The path to the current item, for error reporting\n * @returns True if valid, throws otherwise\n * @internal\n */\nexport function validateDocument(item: unknown, path: Path = []): boolean {\n  if (Array.isArray(item)) {\n    return item.every((child, i) => {\n      if (Array.isArray(child)) {\n        throw new DiffError('Multi-dimensional arrays not supported', path.concat(i))\n      }\n\n      return validateDocument(child, path.concat(i))\n    })\n  }\n\n  if (typeof item === 'object' && item !== null) {\n    const obj = item as {[key: string]: any}\n    return Object.keys(obj).every(\n      (key) => validateProperty(key, obj[key], path) && validateDocument(obj[key], path.concat(key))\n    )\n  }\n\n  return true\n}\n\n/**\n * Validate a property for Sanity compatibility\n *\n * @param property - The property to valide\n * @param value - The value of the property\n * @param path - The path of the property, for error reporting\n * @returns The property name, if valid\n * @internal\n */\nexport function validateProperty(property: string, value: unknown, path: Path): string {\n  if (!propStartPattern.test(property)) {\n    throw new DiffError('Keys must start with a letter (a-z)', path.concat(property), value)\n  }\n\n  if (!propPattern.test(property)) {\n    throw new DiffError(\n      'Keys can only contain letters, numbers and underscores',\n      path.concat(property),\n      value\n    )\n  }\n\n  if (property === '_key' || property === '_ref' || property === '_type') {\n    if (typeof value !== 'string') {\n      throw new DiffError('Keys must be strings', path.concat(property), value)\n    }\n\n    if (!idPattern.test(value)) {\n      throw new DiffError('Invalid key - use less exotic characters', path.concat(property), value)\n    }\n  }\n\n  return property\n}\n","import {cleanupEfficiency, makeDiff, makePatches, stringifyPatches} from '@sanity/diff-match-patch'\nimport {DiffError} from './diffError.js'\nimport {type Path, pathToString} from './paths.js'\nimport {validateProperty} from './validate.js'\nimport {\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n  type InsertAfterPatch,\n  type DiffMatchPatch,\n  type SanityInsertPatch,\n  type SanityPatch,\n  type SanitySetPatch,\n  type SanityUnsetPatch,\n  type SanityDiffMatchPatch,\n  type SanityPatchMutation,\n} from './patches.js'\n\nconst ignoredKeys = ['_id', '_type', '_createdAt', '_updatedAt', '_rev']\n\ntype PrimitiveValue = string | number | boolean | null | undefined\n\n/**\n * An object (record) that has a `_key` property\n *\n * @internal\n */\nexport interface KeyedSanityObject {\n  [key: string]: unknown\n  _key: string\n}\n\n/**\n * An object (record) that _may_ have a `_key` property\n *\n * @internal\n */\nexport type SanityObject = KeyedSanityObject | Partial<KeyedSanityObject>\n\n/**\n * Represents a partial Sanity document (eg a \"stub\").\n *\n * @public\n */\nexport interface DocumentStub {\n  _id?: string\n  _type?: string\n  _rev?: string\n  _createdAt?: string\n  _updatedAt?: string\n  [key: string]: unknown\n}\n\n/**\n * Options for the diff-match-patch algorithm.\n *\n * @public\n */\nexport interface DiffMatchPatchOptions {\n  /**\n   * Whether or not to use diff-match-patch at all\n   *\n   * @defaultValue `true`\n   */\n  enabled: boolean\n\n  /**\n   * Threshold at which to start using diff-match-patch instead of a regular `set` patch.\n   *\n   * @defaultValue `30`\n   */\n  lengthThresholdAbsolute: number\n\n  /**\n   * Only use generated diff-match-patch if the patch length is less than or equal to\n   * (targetString * relative). Example: A 100 character target with a relative factor\n   * of 1.2 will allow a 120 character diff-match-patch. If larger than this number,\n   * it will fall back to a regular `set` patch.\n   *\n   * @defaultValue `1.2`\n   */\n  lengthThresholdRelative: number\n}\n\n/**\n * Options for the patch generator\n *\n * @public\n */\nexport interface PatchOptions {\n  /**\n   * Document ID to apply the patch to.\n   *\n   * @defaultValue `undefined` - tries to extract `_id` from passed document\n   */\n  id?: string\n\n  /**\n   * Base path to apply the patch to - useful if diffing sub-branches of a document.\n   *\n   * @defaultValue `[]` - eg root of the document\n   */\n  basePath?: Path\n\n  /**\n   * Only apply the patch if the document revision matches this value.\n   * If the property is the boolean value `true`, it will attempt to extract\n   * the revision from the document `_rev` property.\n   *\n   * @defaultValue `undefined` (do not apply revision check)\n   */\n  ifRevisionID?: string | true\n\n  /**\n   * Whether or not to hide warnings during the diff process.\n   *\n   * @defaultValue `false`\n   */\n  hideWarnings?: boolean\n\n  /**\n   * Options for the diff-match-patch algorithm.\n   */\n  diffMatchPatch?: Partial<DiffMatchPatchOptions>\n}\n\n/**\n * Options for diff generation, where all DMP properties are required\n *\n * @public\n */\nexport type DiffOptions = PatchOptions & {diffMatchPatch: Required<DiffMatchPatchOptions>}\n\nconst defaultOptions = {\n  hideWarnings: false,\n  diffMatchPatch: {\n    enabled: true,\n\n    // Only use diff-match-patch if target string is longer than this threshold\n    lengthThresholdAbsolute: 30,\n\n    // Only use generated diff-match-patch if the patch length is less than or equal to\n    // (targetString * relative). Example: A 100 character target with a relative factor\n    // of 1.2 will allow a 120 character diff-match-patch. If larger than this number,\n    // it will fall back to a regular `set` patch.\n    lengthThresholdRelative: 1.2,\n  },\n} satisfies DiffOptions\n\n/**\n * Merges the default options with the passed in options.\n *\n * @param options - Options to merge with the defaults\n * @returns Merged options\n */\nfunction mergeOptions(options: PatchOptions): DiffOptions {\n  return {\n    ...defaultOptions,\n    ...options,\n    diffMatchPatch: {...defaultOptions.diffMatchPatch, ...(options.diffMatchPatch || {})},\n  }\n}\n\n/**\n * Generates an array of mutations for Sanity, based on the differences between\n * the two passed documents/trees.\n *\n * @param itemA - The first document/tree to compare\n * @param itemB - The second document/tree to compare\n * @param opts - Options for the diff generation\n * @returns Array of mutations\n * @public\n */\nexport function diffPatch(\n  itemA: DocumentStub,\n  itemB: DocumentStub,\n  opts?: PatchOptions\n): SanityPatchMutation[] {\n  const options = mergeOptions(opts || {})\n  const id = options.id || (itemA._id === itemB._id && itemA._id)\n  const revisionLocked = options.ifRevisionID\n  const ifRevisionID = typeof revisionLocked === 'boolean' ? itemA._rev : revisionLocked\n  const basePath = options.basePath || []\n  if (!id) {\n    throw new Error(\n      '_id on itemA and itemB not present or differs, specify document id the mutations should be applied to'\n    )\n  }\n\n  if (revisionLocked === true && !ifRevisionID) {\n    throw new Error(\n      '`ifRevisionID` is set to `true`, but no `_rev` was passed in item A. Either explicitly set `ifRevisionID` to a revision, or pass `_rev` as part of item A.'\n    )\n  }\n\n  if (basePath.length === 0 && itemA._type !== itemB._type) {\n    throw new Error(`_type is immutable and cannot be changed (${itemA._type} => ${itemB._type})`)\n  }\n\n  const operations = diffItem(itemA, itemB, options, basePath, [])\n  return serializePatches(operations, {id, ifRevisionID: revisionLocked ? ifRevisionID : undefined})\n}\n\n/**\n * Diffs two items and returns an array of patches.\n * Note that this is different from `diffPatch`, which generates _mutations_.\n *\n * @param itemA - The first item to compare\n * @param itemB - The second item to compare\n * @param opts - Options for the diff generation\n * @param path - Path to the current item\n * @param patches - Array of patches to append the results to. Note that this is MUTATED.\n * @returns Array of patches\n * @public\n */\nexport function diffItem(\n  itemA: unknown,\n  itemB: unknown,\n  opts: DiffOptions = defaultOptions,\n  path: Path = [],\n  patches: Patch[] = []\n): Patch[] {\n  if (itemA === itemB) {\n    return patches\n  }\n\n  const aType = Array.isArray(itemA) ? 'array' : typeof itemA\n  const bType = Array.isArray(itemB) ? 'array' : typeof itemB\n\n  const aIsUndefined = aType === 'undefined'\n  const bIsUndefined = bType === 'undefined'\n\n  if (aIsUndefined && !bIsUndefined) {\n    patches.push({op: 'set', path, value: itemB})\n    return patches\n  }\n\n  if (!aIsUndefined && bIsUndefined) {\n    patches.push({op: 'unset', path})\n    return patches\n  }\n\n  const options = mergeOptions(opts)\n  const dataType = aIsUndefined ? bType : aType\n  const isContainer = dataType === 'object' || dataType === 'array'\n  if (!isContainer) {\n    return diffPrimitive(itemA as PrimitiveValue, itemB as PrimitiveValue, options, path, patches)\n  }\n\n  if (aType !== bType) {\n    // Array => Object / Object => Array\n    patches.push({op: 'set', path, value: itemB})\n    return patches\n  }\n\n  return dataType === 'array'\n    ? diffArray(itemA as unknown[], itemB as unknown[], options, path, patches)\n    : diffObject(itemA as object, itemB as object, options, path, patches)\n}\n\nfunction diffObject(\n  itemA: SanityObject,\n  itemB: SanityObject,\n  options: DiffOptions,\n  path: Path,\n  patches: Patch[]\n) {\n  const atRoot = path.length === 0\n  const aKeys = Object.keys(itemA)\n    .filter(atRoot ? isNotIgnoredKey : yes)\n    .map((key) => validateProperty(key, itemA[key], path))\n\n  const aKeysLength = aKeys.length\n  const bKeys = Object.keys(itemB)\n    .filter(atRoot ? isNotIgnoredKey : yes)\n    .map((key) => validateProperty(key, itemB[key], path))\n\n  const bKeysLength = bKeys.length\n\n  // Check for deleted items\n  for (let i = 0; i < aKeysLength; i++) {\n    const key = aKeys[i]\n    if (!(key in itemB)) {\n      patches.push({op: 'unset', path: path.concat(key)})\n    }\n  }\n\n  // Check for changed items\n  for (let i = 0; i < bKeysLength; i++) {\n    const key = bKeys[i]\n    diffItem(itemA[key], itemB[key], options, path.concat([key]), patches)\n  }\n\n  return patches\n}\n\nfunction diffArray(\n  itemA: unknown[],\n  itemB: unknown[],\n  options: DiffOptions,\n  path: Path,\n  patches: Patch[]\n) {\n  // Check for new items\n  if (itemB.length > itemA.length) {\n    patches.push({\n      op: 'insert',\n      after: path.concat([-1]),\n      items: itemB.slice(itemA.length).map((item, i) => nullifyUndefined(item, path, i, options)),\n    })\n  }\n\n  // Check for deleted items\n  if (itemB.length < itemA.length) {\n    const isSingle = itemA.length - itemB.length === 1\n    const unsetItems = itemA.slice(itemB.length)\n\n    // If we're revision locked, we can safely unset ranges (eg 5:<end-of-array>).\n    // Also, if we don't have unique array keys, we can't use any better approach\n    // than array indexes. If we _do_ have unique array keys, we'll want to unset\n    // by key, as this is safer in a realtime, collaborative setting\n    if (isRevisionLocked(options) || !isUniquelyKeyed(unsetItems)) {\n      patches.push({\n        op: 'unset',\n        path: path.concat([isSingle ? itemB.length : [itemB.length, '']]),\n      })\n    } else {\n      patches.push(\n        ...unsetItems.map(\n          (item): UnsetPatch => ({op: 'unset', path: path.concat({_key: item._key})})\n        )\n      )\n    }\n  }\n\n  // Check for illegal array contents\n  for (let i = 0; i < itemB.length; i++) {\n    if (Array.isArray(itemB[i])) {\n      throw new DiffError('Multi-dimensional arrays not supported', path.concat(i), itemB[i])\n    }\n  }\n\n  const overlapping = Math.min(itemA.length, itemB.length)\n  const segmentA = itemA.slice(0, overlapping)\n  const segmentB = itemB.slice(0, overlapping)\n\n  return isUniquelyKeyed(segmentA) && isUniquelyKeyed(segmentB)\n    ? diffArrayByKey(segmentA, segmentB, options, path, patches)\n    : diffArrayByIndex(segmentA, segmentB, options, path, patches)\n}\n\nfunction diffArrayByIndex(\n  itemA: unknown[],\n  itemB: unknown[],\n  options: DiffOptions,\n  path: Path,\n  patches: Patch[]\n) {\n  for (let i = 0; i < itemA.length; i++) {\n    diffItem(\n      itemA[i],\n      nullifyUndefined(itemB[i], path, i, options),\n      options,\n      path.concat(i),\n      patches\n    )\n  }\n\n  return patches\n}\n\nfunction diffArrayByKey(\n  itemA: KeyedSanityObject[],\n  itemB: KeyedSanityObject[],\n  options: DiffOptions,\n  path: Path,\n  patches: Patch[]\n) {\n  const keyedA = indexByKey(itemA)\n  const keyedB = indexByKey(itemB)\n\n  // There's a bunch of hard/semi-hard problems related to using keys\n  // Unless we have the exact same order, just use indexes for now\n  if (!arrayIsEqual(keyedA.keys, keyedB.keys)) {\n    return diffArrayByIndex(itemA, itemB, options, path, patches)\n  }\n\n  for (let i = 0; i < keyedB.keys.length; i++) {\n    const key = keyedB.keys[i]\n    const valueA = keyedA.index[key]\n    const valueB = nullifyUndefined(keyedB.index[key], path, i, options)\n    diffItem(valueA, valueB, options, path.concat({_key: key}), patches)\n  }\n\n  return patches\n}\n\nfunction getDiffMatchPatch(\n  itemA: PrimitiveValue,\n  itemB: PrimitiveValue,\n  options: DiffOptions,\n  path: Path\n): DiffMatchPatch | undefined {\n  const {enabled, lengthThresholdRelative, lengthThresholdAbsolute} = options.diffMatchPatch\n  const segment = path[path.length - 1]\n  if (\n    !enabled ||\n    // Don't use for anything but strings\n    typeof itemA !== 'string' ||\n    typeof itemB !== 'string' ||\n    // Don't use for `_key`, `_ref` etc\n    (typeof segment === 'string' && segment[0] === '_') ||\n    // Don't use on short strings\n    itemB.length < lengthThresholdAbsolute\n  ) {\n    return undefined\n  }\n\n  let strPatch = ''\n  try {\n    const patch = makeDiff(itemA, itemB)\n    const diff = cleanupEfficiency(patch)\n    strPatch = stringifyPatches(makePatches(diff))\n  } catch (err) {\n    // Fall back to using regular set patch\n    return undefined\n  }\n\n  // Don't use patch if it's longer than allowed relative threshold.\n  // Allow a 120 character patch for a 100 character string,\n  // but don't allow a 800 character patch for a 500 character value.\n  //console.log('%s:\\n patch is %d, string is %d', itemB, strPatch.length, itemB.length)\n  return strPatch.length > itemB.length * lengthThresholdRelative\n    ? undefined\n    : {op: 'diffMatchPatch', path, value: strPatch}\n}\n\nfunction diffPrimitive(\n  itemA: PrimitiveValue,\n  itemB: PrimitiveValue,\n  options: DiffOptions,\n  path: Path,\n  patches: Patch[]\n): Patch[] {\n  const dmp = getDiffMatchPatch(itemA, itemB, options, path)\n\n  patches.push(\n    dmp || {\n      op: 'set',\n      path,\n      value: itemB,\n    }\n  )\n\n  return patches\n}\n\nfunction isNotIgnoredKey(key: string) {\n  return ignoredKeys.indexOf(key) === -1\n}\n\nfunction serializePatches(\n  patches: Patch[],\n  options: {id: string; ifRevisionID?: string}\n): SanityPatchMutation[] {\n  if (patches.length === 0) {\n    return []\n  }\n\n  const {id, ifRevisionID} = options\n  const set = patches.filter((patch): patch is SetPatch => patch.op === 'set')\n  const unset = patches.filter((patch): patch is UnsetPatch => patch.op === 'unset')\n  const insert = patches.filter((patch): patch is InsertAfterPatch => patch.op === 'insert')\n  const dmp = patches.filter((patch): patch is DiffMatchPatch => patch.op === 'diffMatchPatch')\n\n  const withSet =\n    set.length > 0 &&\n    set.reduce(\n      (patch: SanitySetPatch, item: SetPatch) => {\n        const path = pathToString(item.path)\n        patch.set[path] = item.value\n        return patch\n      },\n      {id, set: {}}\n    )\n\n  const withUnset =\n    unset.length > 0 &&\n    unset.reduce(\n      (patch: SanityUnsetPatch, item: UnsetPatch) => {\n        const path = pathToString(item.path)\n        patch.unset.push(path)\n        return patch\n      },\n      {id, unset: []}\n    )\n\n  const withInsert = insert.reduce((acc: SanityInsertPatch[], item: InsertAfterPatch) => {\n    const after = pathToString(item.after)\n    return acc.concat({id, insert: {after, items: item.items}})\n  }, [])\n\n  const withDmp =\n    dmp.length > 0 &&\n    dmp.reduce(\n      (patch: SanityDiffMatchPatch, item: DiffMatchPatch) => {\n        const path = pathToString(item.path)\n        patch.diffMatchPatch[path] = item.value\n        return patch\n      },\n      {id, diffMatchPatch: {}}\n    )\n\n  const patchSet: SanityPatch[] = [withSet, withUnset, withDmp, ...withInsert].filter(\n    (item): item is SanityPatch => item !== false\n  )\n\n  return patchSet.map((patch, i) => ({\n    patch: ifRevisionID && i === 0 ? {...patch, ifRevisionID} : patch,\n  }))\n}\n\nfunction isUniquelyKeyed(arr: unknown[]): arr is KeyedSanityObject[] {\n  const keys = []\n\n  for (let i = 0; i < arr.length; i++) {\n    const key = getKey(arr[i])\n    if (!key || keys.indexOf(key) !== -1) {\n      return false\n    }\n\n    keys.push(key)\n  }\n\n  return true\n}\n\nfunction getKey(obj: unknown) {\n  return typeof obj === 'object' && obj !== null && (obj as KeyedSanityObject)._key\n}\n\nfunction indexByKey(arr: KeyedSanityObject[]) {\n  return arr.reduce(\n    (acc, item) => {\n      acc.keys.push(item._key)\n      acc.index[item._key] = item\n      return acc\n    },\n    {keys: [] as string[], index: {} as {[key: string]: KeyedSanityObject}}\n  )\n}\n\nfunction arrayIsEqual(itemA: unknown[], itemB: unknown[]) {\n  return itemA.length === itemB.length && itemA.every((item, i) => itemB[i] === item)\n}\n\nfunction nullifyUndefined(item: unknown, path: Path, index: number, options: PatchOptions) {\n  if (typeof item !== 'undefined') {\n    return item\n  }\n\n  if (!options.hideWarnings) {\n    const serializedPath = pathToString(path.concat(index))\n    console.warn(`undefined value in array converted to null (at '${serializedPath}')`)\n  }\n\n  return null\n}\n\nfunction isRevisionLocked(options: PatchOptions): boolean {\n  return Boolean(options.ifRevisionID)\n}\n\nfunction yes(_: unknown) {\n  return true\n}\n"],"names":["pathToString","path","reduce","target","segment","i","Array","isArray","concat","join","isKeyedObject","_key","test","separator","Error","obj","DiffError","constructor","message","value","serializedPath","idPattern","propPattern","propStartPattern","validateProperty","property","ignoredKeys","defaultOptions","hideWarnings","diffMatchPatch","enabled","lengthThresholdAbsolute","lengthThresholdRelative","mergeOptions","options","diffPatch","itemA","itemB","opts","id","_id","revisionLocked","ifRevisionID","_rev","basePath","length","_type","operations","diffItem","serializePatches","arguments","undefined","patches","aType","bType","aIsUndefined","bIsUndefined","push","op","dataType","isContainer","diffPrimitive","diffArray","diffObject","atRoot","aKeys","Object","keys","filter","isNotIgnoredKey","yes","map","key","aKeysLength","bKeys","bKeysLength","after","items","slice","item","nullifyUndefined","isSingle","unsetItems","isRevisionLocked","isUniquelyKeyed","overlapping","Math","min","segmentA","segmentB","diffArrayByKey","diffArrayByIndex","keyedA","indexByKey","keyedB","arrayIsEqual","valueA","index","valueB","getDiffMatchPatch","strPatch","patch","makeDiff","diff","cleanupEfficiency","stringifyPatches","makePatches","err","dmp","indexOf","set","unset","insert","withSet","withUnset","withInsert","acc","withDmp","patchSet","arr","getKey","every","console","warn","Boolean","_"],"mappings":"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"}