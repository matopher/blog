{"version":3,"file":"stringify-Fw2FifQ5.cjs","sources":["../../src/path/utils/predicates.ts","../../src/path/parser/stringify.ts"],"sourcesContent":["import type {KeyedPathElement, Path, PathElement} from '../types'\n\nexport function startsWith(parentPath: Path, path: Path): boolean {\n  return (\n    parentPath.length <= path.length &&\n    parentPath.every((segment, i) => isElementEqual(segment, path[i]))\n  )\n}\n\nexport function isEqual(path: Path, otherPath: Path): boolean {\n  return (\n    path.length === otherPath.length &&\n    path.every((segment, i) => isElementEqual(segment, otherPath[i]))\n  )\n}\n\nexport function isElementEqual(\n  segmentA: PathElement,\n  segmentB: PathElement,\n): boolean {\n  if (isKeyElement(segmentA) && isKeyElement(segmentB)) {\n    return segmentA._key === segmentB._key\n  }\n\n  if (isIndexElement(segmentA)) {\n    return Number(segmentA) === Number(segmentB)\n  }\n\n  return segmentA === segmentB\n}\n\nexport function isKeyElement(\n  segment: PathElement,\n): segment is KeyedPathElement {\n  return typeof (segment as any)?._key === 'string'\n}\nexport function isIndexElement(segment: PathElement): segment is number {\n  return typeof segment === 'number'\n}\n\nexport function isKeyedElement(\n  element: PathElement,\n): element is KeyedPathElement {\n  return (\n    typeof element === 'object' &&\n    '_key' in element &&\n    typeof element._key === 'string'\n  )\n}\nexport function isArrayElement(\n  element: PathElement,\n): element is KeyedPathElement | number {\n  return typeof element === 'number' || isKeyedElement(element)\n}\n\nexport function isPropertyElement(element: PathElement): element is string {\n  return typeof element === 'string'\n}\n","import {isKeyedElement} from '../utils/predicates'\nimport type {Path, PathElement} from '../types'\n\nconst IS_DOTTABLE = /^[a-z_$]+/\n\nfunction stringifySegment(segment: PathElement, hasLeading: boolean): string {\n  if (Array.isArray(segment)) {\n    return `[${segment[0]}:${segment[1] || ''}]`\n  }\n  const type = typeof segment\n\n  const isNumber = type === 'number'\n\n  if (isNumber) {\n    return `[${segment}]`\n  }\n\n  if (isKeyedElement(segment)) {\n    return `[_key==${JSON.stringify(segment._key)}]`\n  }\n\n  if (typeof segment === 'string' && IS_DOTTABLE.test(segment)) {\n    return hasLeading ? segment : `.${segment}`\n  }\n\n  return `['${segment}']`\n}\n\nexport function stringify(pathArray: Path): string {\n  return pathArray\n    .map((segment, i) => stringifySegment(segment, i === 0))\n    .join('')\n}\n"],"names":["startsWith","parentPath","path","length","every","segment","i","isElementEqual","isEqual","otherPath","segmentA","segmentB","isKeyElement","_key","isIndexElement","Number","isKeyedElement","element","isArrayElement","isPropertyElement","IS_DOTTABLE","stringifySegment","hasLeading","Array","isArray","concat","type","isNumber","JSON","stringify","test","pathArray","map","join"],"mappings":";;AAEgB,SAAAA,UAAAA,CAAWC,YAAkBC,IAAqB,EAAA;EAChE,OACED,UAAW,CAAAE,MAAA,IAAUD,IAAK,CAAAC,MAAA,IAC1BF,WAAWG,KAAM,CAAA,CAACC,OAAS,EAAAC,CAAA,KAAMC,cAAe,CAAAF,OAAA,EAASH,IAAK,CAAAI,CAAC,CAAC,CAAC,CAAA;AAErE;AAEgB,SAAAE,OAAAA,CAAQN,MAAYO,SAA0B,EAAA;EAC5D,OACEP,IAAK,CAAAC,MAAA,KAAWM,SAAU,CAAAN,MAAA,IAC1BD,KAAKE,KAAM,CAAA,CAACC,OAAS,EAAAC,CAAA,KAAMC,cAAe,CAAAF,OAAA,EAASI,SAAU,CAAAH,CAAC,CAAC,CAAC,CAAA;AAEpE;AAEgB,SAAAC,cAAAA,CACdG,UACAC,QACS,EAAA;EACT,IAAIC,YAAa,CAAAF,QAAQ,CAAK,IAAAE,YAAA,CAAaD,QAAQ,CAAG,EAAA;IAC7C,OAAAD,QAAA,CAASG,SAASF,QAAS,CAAAE,IAAA;EACpC;EAEI,IAAAC,cAAA,CAAeJ,QAAQ,CAAG,EAAA;IAC5B,OAAOK,MAAO,CAAAL,QAAQ,CAAM,KAAAK,MAAA,CAAOJ,QAAQ,CAAA;EAC7C;EAEA,OAAOD,QAAa,KAAAC,QAAA;AACtB;AAEO,SAASC,aACdP,OAC6B,EAAA;EACtB,OAAA,QAAQA,mCAAiBQ,IAAS,CAAA,KAAA,QAAA;AAC3C;AACO,SAASC,eAAeT,OAAyC,EAAA;EACtE,OAAO,OAAOA,OAAY,KAAA,QAAA;AAC5B;AAEO,SAASW,eACdC,OAC6B,EAAA;EAC7B,OACE,OAAOA,OAAY,KAAA,QAAA,IACnB,UAAUA,OACV,IAAA,OAAOA,QAAQJ,IAAS,KAAA,QAAA;AAE5B;AACO,SAASK,eACdD,OACsC,EAAA;EACtC,OAAO,OAAOA,OAAA,KAAY,QAAY,IAAAD,cAAA,CAAeC,OAAO,CAAA;AAC9D;AAEO,SAASE,kBAAkBF,OAAyC,EAAA;EACzE,OAAO,OAAOA,OAAY,KAAA,QAAA;AAC5B;ACtDA,MAAMG,WAAc,GAAA,WAAA;AAEpB,SAASC,gBAAAA,CAAiBhB,SAAsBiB,UAA6B,EAAA;EACvE,IAAAC,KAAA,CAAMC,OAAQ,CAAAnB,OAAO,CAAG,EAAA;IACnB,OAAA,GAAA,CAAIoB,eAAQ,CAAC,CAAA,EAAC,KAAIA,MAAQ,CAAApB,OAAA,CAAA,CAAC,KAAK,EAAE,EAAA,GAAA,CAAA;EAC3C;EACA,MAAMqB,OAAO,OAAOrB,OAAA;EAEpB,MAAMsB,WAAWD,IAAS,KAAA,QAAA;EAE1B,IAAIC,QAAU,EAAA;IACZ,OAAO,IAAIF,MAAO,CAAApB,OAAA,EAAA,GAAA,CAAA;EACpB;EAEI,IAAAW,cAAA,CAAeX,OAAO,CAAG,EAAA;IAC3B,OAAO,SAAU,CAAAoB,MAAA,CAAAG,IAAA,CAAKC,SAAU,CAAAxB,OAAA,CAAQQ,IAAI,CAAC,EAAA,GAAA,CAAA;EAC/C;EAEA,IAAI,OAAOR,OAAY,KAAA,QAAA,IAAYe,WAAY,CAAAU,IAAA,CAAKzB,OAAO,CAAG,EAAA;IACrD,OAAAiB,UAAA,GAAajB,UAAU,GAAI,CAAAoB,MAAA,CAAApB,OAAA,CAAA;EACpC;EAEA,OAAO,KAAKoB,MAAO,CAAApB,OAAA,EAAA,IAAA,CAAA;AACrB;AAEO,SAASwB,UAAUE,SAAyB,EAAA;EACjD,OAAOA,SACJ,CAAAC,GAAA,CAAI,CAAC3B,OAAA,EAASC,CAAM,KAAAe,gBAAA,CAAiBhB,OAAS,EAAAC,CAAA,KAAM,CAAC,CAAC,CACtD,CAAA2B,IAAA,CAAK,EAAE,CAAA;AACZ;;;;;;;;;"}