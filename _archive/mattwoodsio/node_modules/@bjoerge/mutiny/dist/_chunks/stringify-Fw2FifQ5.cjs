'use strict';

function startsWith(parentPath, path) {
  return parentPath.length <= path.length && parentPath.every((segment, i) => isElementEqual(segment, path[i]));
}
function isEqual(path, otherPath) {
  return path.length === otherPath.length && path.every((segment, i) => isElementEqual(segment, otherPath[i]));
}
function isElementEqual(segmentA, segmentB) {
  if (isKeyElement(segmentA) && isKeyElement(segmentB)) {
    return segmentA._key === segmentB._key;
  }
  if (isIndexElement(segmentA)) {
    return Number(segmentA) === Number(segmentB);
  }
  return segmentA === segmentB;
}
function isKeyElement(segment) {
  return typeof (segment == null ? void 0 : segment._key) === "string";
}
function isIndexElement(segment) {
  return typeof segment === "number";
}
function isKeyedElement(element) {
  return typeof element === "object" && "_key" in element && typeof element._key === "string";
}
function isArrayElement(element) {
  return typeof element === "number" || isKeyedElement(element);
}
function isPropertyElement(element) {
  return typeof element === "string";
}
const IS_DOTTABLE = /^[a-z_$]+/;
function stringifySegment(segment, hasLeading) {
  if (Array.isArray(segment)) {
    return "[".concat(segment[0], ":").concat(segment[1] || "", "]");
  }
  const type = typeof segment;
  const isNumber = type === "number";
  if (isNumber) {
    return "[".concat(segment, "]");
  }
  if (isKeyedElement(segment)) {
    return "[_key==".concat(JSON.stringify(segment._key), "]");
  }
  if (typeof segment === "string" && IS_DOTTABLE.test(segment)) {
    return hasLeading ? segment : ".".concat(segment);
  }
  return "['".concat(segment, "']");
}
function stringify(pathArray) {
  return pathArray.map((segment, i) => stringifySegment(segment, i === 0)).join("");
}
exports.isArrayElement = isArrayElement;
exports.isElementEqual = isElementEqual;
exports.isEqual = isEqual;
exports.isIndexElement = isIndexElement;
exports.isKeyElement = isKeyElement;
exports.isKeyedElement = isKeyedElement;
exports.isPropertyElement = isPropertyElement;
exports.startsWith = startsWith;
exports.stringify = stringify;
//# sourceMappingURL=stringify-Fw2FifQ5.cjs.map
