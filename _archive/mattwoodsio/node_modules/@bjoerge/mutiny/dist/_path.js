import { isArrayElement, isKeyedElement } from './_chunks/stringify-2_qfPACh.js';
export { isElementEqual, isEqual, isIndexElement, isKeyElement, isPropertyElement, startsWith, stringify } from './_chunks/stringify-2_qfPACh.js';
import { parse } from './_chunks/parse-g6_rgqvy.js';
function getAtPath(path, value) {
  if (path.length === 0) {
    return value;
  }
  let current = value;
  for (const head of path) {
    if (isArrayElement(head)) {
      if (!Array.isArray(current)) {
        return void 0;
      }
      if (isKeyedElement(head)) {
        current = current.find(item => item._key === head._key);
        continue;
      }
      current = current[head];
      continue;
    }
    current = current[head];
  }
  return current;
}
function normalize(path) {
  return typeof path === "string" ? parse(path) : path;
}
export { getAtPath, isArrayElement, isKeyedElement, normalize, parse };
//# sourceMappingURL=_path.js.map
