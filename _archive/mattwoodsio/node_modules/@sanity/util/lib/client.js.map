{"version":3,"file":"client.js","sources":["../src/client/concurrency-limiter/createClientConcurrencyLimiter.ts"],"sourcesContent":["import {type ObservableSanityClient, type SanityClient} from '@sanity/client'\nimport {finalize, from, switchMap} from 'rxjs'\n\nimport {ConcurrencyLimiter} from '../../concurrency-limiter'\n\n/**\n * Decorates a sanity client to limit the concurrency of `client.fetch`\n * requests. Keeps the concurrency limit state and returns wrapped clients with\n * that same state if the `clone` `config` or `withConfig` methods are called.\n */\nexport function createClientConcurrencyLimiter(\n  maxConcurrency: number,\n): (input: SanityClient) => SanityClient {\n  const limiter = new ConcurrencyLimiter(maxConcurrency)\n\n  function wrapClient(client: SanityClient): SanityClient {\n    return new Proxy(client, {\n      get: (target, property) => {\n        switch (property) {\n          case 'fetch': {\n            return async (...args: Parameters<SanityClient['fetch']>) => {\n              await limiter.ready()\n              try {\n                // note we want to await before we return so the finally block\n                // will run after the promise has been fulfilled or rejected\n                return await target.fetch(...args)\n              } finally {\n                limiter.release()\n              }\n            }\n          }\n          case 'clone': {\n            return (...args: Parameters<SanityClient['clone']>) => {\n              return wrapClient(target.clone(...args))\n            }\n          }\n          case 'config': {\n            return (...args: Parameters<SanityClient['config']>) => {\n              const result = target.config(...args)\n\n              // if there is a config, it returns a client so we need to wrap again\n              if (args[0]) return wrapClient(result)\n              return result\n            }\n          }\n          case 'withConfig': {\n            return (...args: Parameters<SanityClient['withConfig']>) => {\n              return wrapClient(target.withConfig(...args))\n            }\n          }\n          case 'observable': {\n            return wrapObservableClient(target.observable)\n          }\n          default: {\n            return target[property as keyof SanityClient]\n          }\n        }\n      },\n    })\n  }\n\n  function wrapObservableClient(\n    observableSanityClient: ObservableSanityClient,\n  ): ObservableSanityClient {\n    return new Proxy(observableSanityClient, {\n      get: (target, property) => {\n        switch (property) {\n          case 'fetch': {\n            return (...args: Parameters<ObservableSanityClient['fetch']>) =>\n              from(limiter.ready()).pipe(\n                switchMap(() => target.fetch(...args)),\n                finalize(() => limiter.release()),\n              )\n          }\n          case 'clone': {\n            return (...args: Parameters<ObservableSanityClient['clone']>) => {\n              return wrapObservableClient(target.clone(...args))\n            }\n          }\n          case 'config': {\n            return (...args: Parameters<ObservableSanityClient['config']>) => {\n              const result = target.config(...args)\n\n              // if there is a config, it returns a client so we need to wrap again\n              if (args[0]) return wrapObservableClient(result)\n              return result\n            }\n          }\n          case 'withConfig': {\n            return (...args: Parameters<ObservableSanityClient['withConfig']>) => {\n              return wrapObservableClient(target.withConfig(...args))\n            }\n          }\n          default: {\n            return target[property as keyof ObservableSanityClient]\n          }\n        }\n      },\n    })\n  }\n\n  return wrapClient\n}\n"],"names":["createClientConcurrencyLimiter","maxConcurrency","limiter","ConcurrencyLimiter","wrapClient","client","Proxy","get","target","property","ready","fetch","arguments","release","clone","result","config","length","undefined","withConfig","wrapObservableClient","observable","observableSanityClient","_len","args","Array","_key","from","pipe","switchMap","finalize"],"mappings":"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"}