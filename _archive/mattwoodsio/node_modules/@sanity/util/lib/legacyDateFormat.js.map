{"version":3,"file":"legacyDateFormat.js","sources":["../src/legacyDateFormat.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-shadow */\nimport moment from 'moment'\n\nexport const DEFAULT_DATE_FORMAT = 'YYYY-MM-DD'\nexport const DEFAULT_TIME_FORMAT = 'HH:mm'\n\nexport type ParseResult = {isValid: boolean; date?: Date; error?: string} & (\n  | {isValid: true; date: Date}\n  | {isValid: false; error?: string}\n)\n\n// todo: find a way to get rid of moment there.\n// note: the format comes from peoples schema types, so we need to deprecate it for a while and\n// find a way to tell people that they need to change it\nexport function format(input: Date, format: string, useUTC = false) {\n  if (useUTC) return moment.utc(input).format(format)\n\n  return moment(input).format(format)\n}\n\nexport function parse(dateString: string, format: string): ParseResult {\n  const parsed = moment(dateString, format, true)\n  if (parsed.isValid()) {\n    return {isValid: true, date: parsed.toDate()}\n  }\n  return {isValid: false, error: `Invalid date. Must be on the format \"${format}\"`}\n}\n"],"names":["DEFAULT_DATE_FORMAT","DEFAULT_TIME_FORMAT","format","input","useUTC","arguments","length","undefined","moment","utc","default","parse","dateString","parsed","isValid","date","toDate","error","concat"],"mappings":";;;;;;;;;;;;AAGO,MAAMA,mBAAsB,GAAA,YAAA;AAC5B,MAAMC,mBAAsB,GAAA,OAAA;AAU5B,SAASC,MAAOA,CAAAC,KAAA,EAAaD,OAAgB,EAAgB;EAAA,IAAhBE,MAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAS,KAAO;EAC9D,IAAAD,MAAA,EAAQ,OAAOI,eAAAA,CAAAA,OAAO,CAAAC,GAAA,CAAIN,KAAK,CAAA,CAAED,OAAOA,OAAM,CAAA;EAElD,OAAOM,eAAO,CAAAE,OAAA,CAAAP,KAAK,CAAE,CAAAD,MAAA,CAAOA,OAAM,CAAA;AACpC;AAEgB,SAAAS,KAAAA,CAAMC,YAAoBV,OAA6B,EAAA;EACrE,MAAMW,MAAS,GAAAL,eAAA,CAAAE,OAAA,CAAOE,UAAYV,EAAAA,OAAAA,EAAQ,IAAI,CAAA;EAC1C,IAAAW,MAAA,CAAOC,SAAW,EAAA;IACpB,OAAO;MAACA,OAAS,EAAA,IAAA;MAAMC,IAAM,EAAAF,MAAA,CAAOG;KAAQ;EAC9C;EACA,OAAO;IAACF,OAAS,EAAA,KAAA;IAAOG,OAAO,uCAAwC,CAAAC,MAAA,CAAAhB,SAAM,GAAG;GAAA;AAClF;;;;"}