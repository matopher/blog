{"version":3,"file":"sanity-plugin-debug-secrets.js","sources":["../src/sanityPluginDebugSecrets/debugUrlSecrets.tsx","../src/sanityPluginDebugSecrets/index.ts"],"sourcesContent":["import { CheckmarkCircleIcon, CloseCircleIcon, LockIcon } from '@sanity/icons'\nimport { defineType } from 'sanity'\n\nimport { schemaType, SECRET_TTL } from '../constants'\n\nexport const debugUrlSecretsType = defineType({\n  type: 'document',\n  icon: LockIcon,\n  name: schemaType,\n  title: '@sanity/preview-url-secret',\n  readOnly: true,\n  fields: [\n    {\n      type: 'string',\n      name: 'secret',\n      title: 'Secret',\n    },\n    {\n      type: 'string',\n      name: 'source',\n      title: 'Source Tool',\n    },\n    {\n      type: 'string',\n      name: 'studioUrl',\n      title: 'Studio URL',\n    },\n    {\n      type: 'string',\n      name: 'userId',\n      title: 'Sanity User ID',\n    },\n  ],\n  preview: {\n    select: {\n      source: 'source',\n      studioUrl: 'studioUrl',\n      updatedAt: '_updatedAt',\n    },\n    prepare(data) {\n      const url = data.studioUrl\n        ? new URL(data.studioUrl, location.origin)\n        : undefined\n      const updatedAt = new Date(data.updatedAt).getTime()\n      const expiresAt = new Date(updatedAt + 1000 * SECRET_TTL)\n      const expired = expiresAt < new Date()\n      const icon = expired ? CloseCircleIcon : CheckmarkCircleIcon\n      return {\n        title: url ? `${url.host}${url.pathname}` : data.source,\n        subtitle: expired\n          ? 'Expired'\n          : `Expires in ${Math.round(\n              (expiresAt.getTime() - Date.now()) / (1000 * 60),\n            )} minutes`,\n        media: icon,\n      }\n    },\n  },\n})\n","import { definePlugin } from 'sanity'\n\nimport { schemaType } from '../constants'\nimport { debugUrlSecretsType } from './debugUrlSecrets'\n\nexport const debugSecrets = definePlugin<void>(() => {\n  return {\n    name: 'sanity-plugin-debug-secrets',\n    schema: {\n      types: [debugUrlSecretsType],\n    },\n    document: {\n      actions: (prev, context) => {\n        if (context.schemaType !== schemaType) {\n          return prev\n        }\n        return prev.filter(({ action }) => action === 'delete')\n      },\n      inspectors: (prev, context) => {\n        if (context.documentType !== schemaType) {\n          return prev\n        }\n        return []\n      },\n      unstable_fieldActions: (prev, context) => {\n        if (context.schemaType.name !== schemaType) {\n          return prev\n        }\n        return []\n      },\n    },\n  }\n})\n"],"names":["debugUrlSecretsType","defineType","type","icon","LockIcon","name","schemaType","title","readOnly","fields","preview","select","source","studioUrl","updatedAt","prepare","data","url","URL","location","origin","Date","getTime","expiresAt","SECRET_TTL","expired","CloseCircleIcon","CheckmarkCircleIcon","host","pathname","subtitle","Math","round","now","media","debugSecrets","definePlugin","schema","types","document","actions","prev","context","filter","action","inspectors","documentType","unstable_fieldActions"],"mappings":"+LAKO,MAAMA,EAAsBC,EAAW,CAC5CC,KAAM,WACNC,KAAMC,EACNC,KAAMC,EACNC,MAAO,6BACPC,UAAU,EACVC,OAAQ,CACN,CACEP,KAAM,SACNG,KAAM,SACNE,MAAO,UAET,CACEL,KAAM,SACNG,KAAM,SACNE,MAAO,eAET,CACEL,KAAM,SACNG,KAAM,YACNE,MAAO,cAET,CACEL,KAAM,SACNG,KAAM,SACNE,MAAO,mBAGXG,QAAS,CACPC,OAAQ,CACNC,OAAQ,SACRC,UAAW,YACXC,UAAW,cAEb,OAAAC,CAAQC,GACN,MAAMC,EAAMD,EAAKH,UACb,IAAIK,IAAIF,EAAKH,UAAWM,SAASC,aACjC,EACEN,EAAY,IAAIO,KAAKL,EAAKF,WAAWQ,UACrCC,EAAY,IAAIF,KAAKP,EAAY,IAAOU,GACxCC,EAAUF,EAAgB,IAAAF,KAC1BlB,EAAOsB,EAAUC,EAAkBC,EAClC,MAAA,CACLpB,MAAOU,EAAM,GAAGA,EAAIW,OAAOX,EAAIY,WAAab,EAAKJ,OACjDkB,SAAUL,EACN,UACA,cAAcM,KAAKC,OAChBT,EAAUD,UAAYD,KAAKY,sBAElCC,MAAO/B,EAEX,KCnDSgC,EAAeC,GAAmB,KACtC,CACL/B,KAAM,8BACNgC,OAAQ,CACNC,MAAO,CAACtC,IAEVuC,SAAU,CACRC,QAAS,CAACC,EAAMC,IACVA,EAAQpC,aAAeA,EAClBmC,EAEFA,EAAKE,QAAO,EAAGC,YAAwB,WAAXA,IAErCC,WAAY,CAACJ,EAAMC,IACbA,EAAQI,eAAiBxC,EACpBmC,EAEF,GAETM,sBAAuB,CAACN,EAAMC,IACxBA,EAAQpC,WAAWD,OAASC,EACvBmC,EAEF"}