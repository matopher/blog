{"version":3,"file":"create-secret.js","sources":["../src/generateSecret.ts","../src/createPreviewSecret.ts"],"sourcesContent":["/** @internal */\nexport function generateUrlSecret(): string {\n  // Try using WebCrypto if available\n  if (typeof crypto !== 'undefined') {\n    // Generate a random array of 16 bytes\n    const array = new Uint8Array(16)\n    crypto.getRandomValues(array)\n\n    // Convert the array to a URL-safe string\n    let key = ''\n    for (let i = 0; i < array.length; i++) {\n      // Convert each byte to a 2-digit hexadecimal number\n      key += array[i].toString(16).padStart(2, '0')\n    }\n\n    // Replace '+' and '/' from base64url to '-' and '_'\n    key = btoa(key).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/[=]+$/, '')\n\n    return key\n  }\n  // If not fallback to Math.random\n  return Math.random().toString(36).slice(2)\n}\n","import type { SanityClient } from '@sanity/client'\nimport { uuid } from '@sanity/uuid'\n\nimport {\n  apiVersion,\n  deleteExpiredSecretsQuery,\n  schemaIdPrefix,\n  schemaType,\n  SECRET_TTL,\n  tag,\n} from './constants'\nimport { generateUrlSecret } from './generateSecret'\nimport { SanityClientLike } from './types'\n\n/** @internal */\nexport async function createPreviewSecret(\n  _client: SanityClient,\n  source: string,\n  studioUrl: string,\n  userId?: string,\n  id = uuid(),\n): Promise<{ secret: string; expiresAt: Date }> {\n  const client = _client.withConfig({ apiVersion })\n\n  try {\n    const expiresAt = new Date(Date.now() + 1000 * SECRET_TTL)\n    const _id = `${schemaIdPrefix}.${id}`\n    const newSecret = generateUrlSecret()\n    const patch = client\n      .patch(_id)\n      .set({ secret: newSecret, source, studioUrl, userId })\n    await client\n      .transaction()\n      .createOrReplace({ _id, _type: schemaType })\n      .patch(patch)\n      .commit({ tag })\n\n    return { secret: newSecret, expiresAt }\n  } finally {\n    // Garbage collect expired secrets\n    await client.delete({ query: deleteExpiredSecretsQuery })\n  }\n}\n\nexport type { SanityClientLike }\n"],"names":["uuid","apiVersion","SECRET_TTL","schemaIdPrefix","schemaType","tag","deleteExpiredSecretsQuery","async","createPreviewSecret","_client","source","studioUrl","userId","id","client","withConfig","expiresAt","Date","now","_id","newSecret","crypto","array","Uint8Array","getRandomValues","key","i","length","toString","padStart","btoa","replace","Math","random","slice","generateUrlSecret","patch","set","secret","transaction","createOrReplace","_type","commit","delete","query"],"mappings":"eACOA,MAAA,2BAAAC,OAAAC,OAAAC,OAAAC,OAAAC,OAAAC,MAAA,yBCcPC,eAAsBC,EACpBC,EACAC,EACAC,EACAC,EACAC,EAAKb,KAEL,MAAMc,EAASL,EAAQM,WAAW,CAAEd,eAEhC,IACF,MAAMe,EAAY,IAAIC,KAAKA,KAAKC,MAAQ,IAAOhB,GACzCiB,EAAM,GAAGhB,KAAkBU,IAC3BO,ED1BH,WAED,UAAOC,OAAW,IAAa,CAE3B,MAAAC,EAAQ,IAAIC,WAAW,IAC7BF,OAAOG,gBAAgBF,GAGvB,IAAIG,EAAM,GACV,IAAA,IAASC,EAAI,EAAGA,EAAIJ,EAAMK,OAAQD,IAEzBD,GAAAH,EAAMI,GAAGE,SAAS,IAAIC,SAAS,EAAG,KAI3C,OAAAJ,EAAMK,KAAKL,GAAKM,QAAQ,MAAO,KAAKA,QAAQ,MAAO,KAAKA,QAAQ,QAAS,IAElEN,CACT,CAEA,OAAOO,KAAKC,SAASL,SAAS,IAAIM,MAAM,EAC1C,CCKsBC,GACZC,EAAQtB,EACXsB,MAAMjB,GACNkB,IAAI,CAAEC,OAAQlB,EAAWV,SAAQC,YAAWC,WACzC,aAAAE,EACHyB,cACAC,gBAAgB,CAAErB,MAAKsB,MAAOrC,IAC9BgC,MAAMA,GACNM,OAAO,CAAErC,QAEL,CAAEiC,OAAQlB,EAAWJ,YAAU,CACtC,cAEMF,EAAO6B,OAAO,CAAEC,MAAOtC,GAC/B,CACF"}