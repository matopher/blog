/**
 * @alpha
 */
export declare interface PreviewUrlValidateUrlResult {
  isValid: boolean
  /**
   * If the URL is valid, and there's a parameter for what preview path to redirect to, it will be here
   */
  redirectTo?: string
  /**
   * If the URL is valid, and the studior URL is known and valid, then its origin will be here
   */
  studioOrigin?: string
}

/**
 * A subset type that's compatible with most SanityClient typings,
 * this makes it easier to use this package in libraries that may use `import type { SanityClient } from 'sanity'`
 * as well as those that use `import type { SanityClient } from '@sanity/client'`
 * @internal
 */
export declare type SanityClientLike = {
  config(): {
    token?: string
  }
  withConfig(config: {
    apiVersion?: string
    useCdn?: boolean
    perspective?: 'published'
    resultSourceMap?: boolean
  }): SanityClientLike
  fetch<
    R,
    Q = {
      [key: string]: any
    },
  >(
    query: string,
    params: Q,
    options: {
      tag?: string
    },
  ): Promise<R>
}

/** @internal */
export declare const urlSearchParamPreviewPathname = 'sanity-preview-pathname'

/** @internal */
export declare const urlSearchParamPreviewSecret = 'sanity-preview-secret'

/**
 * @public
 */
export declare function validatePreviewUrl(
  _client: SanityClientLike,
  previewUrl: string,
  /**
   * @deprecated - this option is automatically determined based on the environment
   */
  disableCacheNoStore?: boolean,
): Promise<PreviewUrlValidateUrlResult>

export {}
