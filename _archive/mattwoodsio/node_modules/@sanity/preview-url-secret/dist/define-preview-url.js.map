{"version":3,"file":"define-preview-url.js","sources":["../src/definePreviewUrl.ts"],"sourcesContent":["import {\n  urlSearchParamPreviewPathname,\n  urlSearchParamPreviewSecret,\n} from './constants'\nimport type {\n  PreviewUrlResolver,\n  PreviewUrlResolverContext,\n  PreviewUrlResolverOptions,\n} from './types'\n\n/**\n * @internal\n */\nexport function definePreviewUrl<SanityClientType>(\n  options: PreviewUrlResolverOptions,\n): PreviewUrlResolver<SanityClientType> {\n  const {\n    draftMode,\n    previewMode,\n    origin = typeof location === 'undefined'\n      ? 'https://localhost'\n      : location.origin,\n  } = options\n  const enableUrl = previewMode?.enable || draftMode?.enable\n  let { preview = '/' } = options\n  const productionUrl = new URL(preview, origin)\n  const enablePreviewModeUrl = enableUrl\n    ? new URL(enableUrl, origin)\n    : undefined\n\n  return async (context): Promise<string> => {\n    try {\n      if (context.previewSearchParam) {\n        const restoredUrl = new URL(context.previewSearchParam, productionUrl)\n        if (restoredUrl.origin === productionUrl.origin) {\n          preview = `${restoredUrl.pathname}${restoredUrl.search}`\n        }\n      } else if (context.referrer) {\n        const referrerUrl = new URL(context.referrer)\n        if (referrerUrl.origin === productionUrl.origin) {\n          preview = `${referrerUrl.pathname}${referrerUrl.search}`\n        }\n      }\n    } catch {\n      // ignore\n    }\n    // Prevent infinite recursion\n    if (\n      typeof location !== 'undefined' &&\n      location.origin === productionUrl.origin &&\n      context.studioBasePath &&\n      (preview.startsWith(`${context.studioBasePath}/`) ||\n        preview === context.studioBasePath)\n    ) {\n      preview = options.preview || '/'\n    }\n    const previewUrl = new URL(preview, productionUrl)\n    if (enablePreviewModeUrl) {\n      const enablePreviewModeRequestUrl = new URL(enablePreviewModeUrl)\n      const { searchParams } = enablePreviewModeRequestUrl\n      searchParams.set(urlSearchParamPreviewSecret, context.previewUrlSecret)\n      if (previewUrl.pathname !== enablePreviewModeRequestUrl.pathname) {\n        searchParams.set(\n          urlSearchParamPreviewPathname,\n          `${previewUrl.pathname}${previewUrl.search}`,\n        )\n      }\n\n      return enablePreviewModeRequestUrl.toString()\n    }\n    return previewUrl.toString()\n  }\n}\n\nexport type {\n  PreviewUrlResolver,\n  PreviewUrlResolverContext,\n  PreviewUrlResolverOptions,\n}\n"],"names":["definePreviewUrl","options","draftMode","previewMode","origin","location","enableUrl","enable","preview","productionUrl","URL","enablePreviewModeUrl","async","context","previewSearchParam","restoredUrl","pathname","search","referrer","referrerUrl","studioBasePath","startsWith","previewUrl","enablePreviewModeRequestUrl","searchParams","set","urlSearchParamPreviewSecret","previewUrlSecret","urlSearchParamPreviewPathname","toString"],"mappings":"kDAaO,SAASA,EACdC,GAEM,MAAAC,UACJA,EAAAC,YACAA,EAAAC,OACAA,UAAgBC,SAAa,IACzB,oBACAA,SAASD,SACXH,EACEK,GAAY,MAAAH,OAAA,EAAAA,EAAaI,UAAqB,MAAXL,OAAW,EAAAA,EAAAK,QAChD,IAAAC,QAAEA,EAAU,KAAQP,EACxB,MAAMQ,EAAgB,IAAIC,IAAIF,EAASJ,GACjCO,EAAuBL,EACzB,IAAII,IAAIJ,EAAWF,QACnB,EAEJ,OAAOQ,MAAOC,IACR,IACF,GAAIA,EAAQC,mBAAoB,CAC9B,MAAMC,EAAc,IAAIL,IAAIG,EAAQC,mBAAoBL,GACxCM,EAAAX,SAAWK,EAAcL,SACvCI,EAAU,GAAGO,EAAYC,WAAWD,EAAYE,SAAM,MAAA,GAE/CJ,EAAQK,SAAU,CAC3B,MAAMC,EAAc,IAAIT,IAAIG,EAAQK,UACpBC,EAAAf,SAAWK,EAAcL,SACvCI,EAAU,GAAGW,EAAYH,WAAWG,EAAYF,SAEpD,CAAA,CACM,MAER,QAGSZ,SAAa,KACpBA,SAASD,SAAWK,EAAcL,QAClCS,EAAQO,iBACPZ,EAAQa,WAAW,GAAGR,EAAQO,oBAC7BZ,IAAYK,EAAQO,kBAEtBZ,EAAUP,EAAQO,SAAW,KAE/B,MAAMc,EAAa,IAAIZ,IAAIF,EAASC,GACpC,GAAIE,EAAsB,CACxB,MAAMY,EAA8B,IAAIb,IAAIC,IACtCa,aAAEA,GAAiBD,EACZ,OAAAC,EAAAC,IAAIC,EAA6Bb,EAAQc,kBAClDL,EAAWN,WAAaO,EAA4BP,UACtDQ,EAAaC,IACXG,EACA,GAAGN,EAAWN,WAAWM,EAAWL,UAIjCM,EAA4BM,UACrC,CACA,OAAOP,EAAWO,WAEtB"}