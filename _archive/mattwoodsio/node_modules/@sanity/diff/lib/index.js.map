{"version":3,"file":"index.js","sources":["../src/helpers.ts","../src/calculate/lcs.ts","../src/calculate/diffArray.ts","../src/calculate/diffObject.ts","../src/calculate/diffSimple.ts","../src/calculate/diffString.ts","../src/calculate/diffTypeChange.ts","../src/calculate/diffInput.ts","../src/inputWrappers/array.ts","../src/inputWrappers/basic.ts","../src/inputWrappers/object.ts","../src/inputWrappers/string.ts","../src/inputWrappers/index.ts"],"sourcesContent":["export function replaceProperty<P, V extends P[K], K extends keyof P>(\n  parent: P,\n  prop: K,\n  value: V,\n): V {\n  delete parent[prop]\n  parent[prop] = value\n  return value\n}\n","/*\n * Longest common subsequence implementation, for diffing arrays\n * Reference: http://en.wikipedia.org/wiki/Longest_common_subsequence_problem\n */\n\ntype NumberArray = number[]\ntype LengthMatrix = NumberArray[]\ntype Subsequence<E> = {\n  sequence: E[]\n  prevIndices: number[]\n  nextIndices: number[]\n}\n\nexport function getLongestCommonSubsequence<E>(previous: E[], next: E[]): Subsequence<E> {\n  const matrix = getLengthMatrix(previous, next)\n  const result = backtrack(matrix, previous, next)\n  return result\n}\n\nfunction getLengthMatrix<E>(previous: E[], next: E[]): LengthMatrix {\n  const len1 = previous.length\n  const len2 = next.length\n  let x = 0\n  let y = 0\n\n  // initialize empty matrix of len1+1 x len2+1\n  const matrix: LengthMatrix = new Array(len1 + 1)\n  for (x = 0; x < len1 + 1; x++) {\n    matrix[x] = [len2 + 1]\n    for (y = 0; y < len2 + 1; y++) {\n      matrix[x][y] = 0\n    }\n  }\n\n  // save sequence lengths for each coordinate\n  for (x = 1; x < len1 + 1; x++) {\n    for (y = 1; y < len2 + 1; y++) {\n      if (previous[x - 1] === next[y - 1]) {\n        matrix[x][y] = matrix[x - 1][y - 1] + 1\n      } else {\n        matrix[x][y] = Math.max(matrix[x - 1][y], matrix[x][y - 1])\n      }\n    }\n  }\n\n  return matrix\n}\n\nfunction backtrack<E>(matrix: LengthMatrix, previous: E[], next: E[]): Subsequence<E> {\n  let prevIndex = previous.length\n  let nextIndex = next.length\n  const subsequence: Subsequence<E> = {\n    sequence: [],\n    prevIndices: [],\n    nextIndices: [],\n  }\n\n  while (prevIndex !== 0 && nextIndex !== 0) {\n    const areEqual = previous[prevIndex - 1] === next[nextIndex - 1]\n    if (areEqual) {\n      subsequence.sequence.unshift(previous[prevIndex - 1])\n      subsequence.prevIndices.unshift(prevIndex - 1)\n      subsequence.nextIndices.unshift(nextIndex - 1)\n      --prevIndex\n      --nextIndex\n    } else {\n      const valueAtMatrixAbove = matrix[prevIndex][nextIndex - 1]\n      const valueAtMatrixLeft = matrix[prevIndex - 1][nextIndex]\n      if (valueAtMatrixAbove > valueAtMatrixLeft) {\n        --nextIndex\n      } else {\n        --prevIndex\n      }\n    }\n  }\n  return subsequence\n}\n","import {replaceProperty} from '../helpers'\nimport {type ArrayDiff, type ArrayInput, type DiffOptions, type ItemDiff} from '../types'\nimport {addedInput, diffInput, removedInput} from './diffInput'\nimport {getLongestCommonSubsequence} from './lcs'\n\nexport function diffArray<A>(\n  fromInput: ArrayInput<A>,\n  toInput: ArrayInput<A>,\n  options: DiffOptions,\n): ArrayDiff<A> {\n  if (fromInput === toInput) {\n    const fromValue = fromInput.value\n    const toValue = toInput.value\n\n    return {\n      type: 'array',\n      action: 'unchanged',\n      isChanged: false,\n      fromValue,\n      toValue,\n      get items(): ItemDiff<A>[] {\n        const items = diffExactByPosition(fromInput, toInput, options)\n        if (!items) throw new Error('invariant broken: equivalent input, but diff detected')\n        return replaceProperty(this, 'items', items)\n      },\n    }\n  }\n\n  // The key-ed approach should handle most cases (_key'ed objects, primitives):\n  const keyedA = indexByKey(fromInput)\n  const keyedB = indexByKey(toInput)\n\n  if (keyedA && keyedB) {\n    return diffArrayByKey(fromInput, keyedA, toInput, keyedB, options)\n  }\n\n  // Check if they are 100% equivalent:\n  const items = diffExactByPosition(fromInput, toInput, options)\n  if (items) return buildArrayDiff(fromInput, toInput, items, false)\n\n  // Otherwise we create a diff where we model it as removing the from-items and adding the to-items.\n  return diffArrayByReinsert(fromInput, toInput, options)\n}\n\nfunction buildArrayDiff<A>(\n  fromInput: ArrayInput<A>,\n  toInput: ArrayInput<A>,\n  items: ItemDiff<A>[],\n  isChanged: boolean,\n): ArrayDiff<A> {\n  const fromValue = fromInput.value\n  const toValue = toInput.value\n\n  return isChanged\n    ? {\n        type: 'array',\n        action: 'changed',\n        isChanged: true,\n        fromValue,\n        toValue,\n        items,\n        annotation: toInput.annotation,\n      }\n    : {\n        type: 'array',\n        action: 'unchanged',\n        isChanged: false,\n        fromValue,\n        toValue,\n        items,\n      }\n}\n\n/**\n * Diffes the two arrays by position. Returns an `items` array if they are unchanged, or undefined\n * if there are any changes anywhere.\n */\nfunction diffExactByPosition<A>(\n  fromInput: ArrayInput<A>,\n  toInput: ArrayInput<A>,\n  options: DiffOptions,\n): ItemDiff<A>[] | undefined {\n  if (fromInput.length !== toInput.length) {\n    return undefined\n  }\n\n  const items: ItemDiff<A>[] = []\n\n  for (let idx = 0; idx < fromInput.length; idx++) {\n    const diff = diffInput(fromInput.at(idx), toInput.at(idx), options)\n    if (diff.isChanged) {\n      return undefined\n    }\n\n    items.push({\n      fromIndex: idx,\n      toIndex: idx,\n      hasMoved: false,\n      diff,\n      annotation: toInput.annotationAt(idx),\n    })\n  }\n\n  return items\n}\n\nfunction diffArrayByReinsert<A>(\n  fromInput: ArrayInput<A>,\n  toInput: ArrayInput<A>,\n  options: DiffOptions,\n): ArrayDiff<A> {\n  const items: ItemDiff<A>[] = []\n\n  for (let idx = 0; idx < toInput.length; idx++) {\n    const input = toInput.at(idx)\n\n    items.push({\n      fromIndex: undefined,\n      toIndex: idx,\n      hasMoved: false,\n      diff: addedInput(input, undefined, options),\n      annotation: input.annotation,\n    })\n  }\n\n  for (let idx = 0; idx < fromInput.length; idx++) {\n    const input = fromInput.at(idx)\n\n    items.push({\n      fromIndex: idx,\n      toIndex: undefined,\n      hasMoved: false,\n      diff: removedInput(input, undefined, options),\n      annotation: input.annotation,\n    })\n  }\n\n  return buildArrayDiff(fromInput, toInput, items, true)\n}\n\ntype Key = string | number | boolean\n\n/**\n * Diff an array when all the elements have _key in the same position.\n */\nfunction diffArrayByKey<A>(\n  fromArray: ArrayInput<A>,\n  fromKeyIndex: KeyIndex,\n  toArray: ArrayInput<A>,\n  toKeyIndex: KeyIndex,\n  options: DiffOptions,\n): ArrayDiff<A> {\n  const items: ItemDiff<A>[] = []\n  let isChanged = false\n\n  function diffCommon(key: Key, fromIndex: number, toIndex: number, hasMoved: boolean) {\n    deletePositionInIndex(fromKeyIndex.index, key, fromIndex)\n    deletePositionInIndex(toKeyIndex.index, key, toIndex)\n\n    const fromInput = fromArray.at(fromIndex)\n    const toInput = toArray.at(toIndex)\n\n    const diff = diffInput(fromInput, toInput)\n    items.push({\n      fromIndex,\n      toIndex,\n      hasMoved,\n      diff,\n      annotation: toArray.annotationAt(toIndex),\n    })\n\n    if (diff.isChanged || fromIndex !== toIndex) {\n      isChanged = true\n    }\n  }\n\n  const lcs = getLongestCommonSubsequence(fromKeyIndex.keys, toKeyIndex.keys)\n\n  for (let fromIndex = 0; fromIndex < fromKeyIndex.keys.length; fromIndex++) {\n    const key = fromKeyIndex.keys[fromIndex]\n\n    const subsequenceIdx = lcs.prevIndices.indexOf(fromIndex)\n    if (subsequenceIdx !== -1) {\n      // Part of the common subsequence => hasMoved:false\n      diffCommon(key, fromIndex, lcs.nextIndices[subsequenceIdx], false)\n      continue\n    }\n\n    // Not a part of the subsequence. Try to find another item which has the same key\n    // and also is not part of the common subsequence.\n    const toIndexes = toKeyIndex.index.get(key)\n    const toIndex = toIndexes && toIndexes.find((idx) => !lcs.nextIndices.includes(idx))\n    if (toIndex !== undefined) {\n      diffCommon(key, fromIndex, toIndex, true)\n      continue\n    }\n\n    const input = fromArray.at(fromIndex)\n\n    items.push({\n      fromIndex,\n      toIndex: undefined,\n      hasMoved: false,\n      diff: removedInput(input, undefined, options),\n      annotation: fromArray.annotationAt(fromIndex),\n    })\n\n    isChanged = true\n  }\n\n  // The remaining data in toKeyIndex are the new elements which has been added\n  for (const positions of toKeyIndex.index.values()) {\n    for (const toIndex of positions) {\n      const input = toArray.at(toIndex)\n      items.push({\n        fromIndex: undefined,\n        toIndex,\n        hasMoved: false,\n        diff: addedInput(input, undefined, options),\n        annotation: toArray.annotationAt(toIndex),\n      })\n    }\n\n    isChanged = true\n  }\n\n  items.sort(compareItemDiff)\n\n  return buildArrayDiff(fromArray, toArray, items, isChanged)\n}\n\nfunction compareItemDiff<A>(a: ItemDiff<A>, b: ItemDiff<A>): number {\n  if (a.toIndex !== undefined && b.toIndex !== undefined) {\n    return a.toIndex - b.toIndex\n  }\n\n  if (a.fromIndex !== undefined && b.fromIndex !== undefined) {\n    return a.fromIndex - b.fromIndex\n  }\n\n  if (a.fromIndex !== undefined && b.toIndex !== undefined) {\n    // A was removed and B was added. Prefer to sort removals last.\n    return -1\n  }\n\n  if (a.toIndex !== undefined && b.fromIndex !== undefined) {\n    // A was added and B was removed. Prefer to sort removals last.\n    return 1\n  }\n\n  throw new Error('invalid item diff comparison')\n}\n\nfunction deletePositionInIndex(index: Map<Key, number[]>, key: Key, pos: number) {\n  const positions = index.get(key)!\n  deleteArrayValue(positions, pos)\n  if (positions.length === 0) {\n    index.delete(key)\n  }\n}\n\nfunction deleteArrayValue<E>(arr: E[], value: E) {\n  const idx = arr.indexOf(value)\n  if (idx === -1) throw new Error('value not found')\n  arr.splice(idx, 1)\n}\n\ntype KeyIndex = {\n  keys: Key[]\n  index: Map<Key, number[]>\n}\n\n/**\n * Indexes the array by a key. This handles cases where the items are:\n *\n * - Objects with _key\n * - Strings\n * - Numbers\n */\nfunction indexByKey<A>(arr: ArrayInput<A>): KeyIndex | undefined {\n  const index = new Map<Key, number[]>()\n  const keys: Key[] = []\n  const length = arr.length\n\n  for (let i = 0; i < length; i++) {\n    const item = arr.at(i)\n\n    let key: Key | null = null\n\n    switch (item.type) {\n      case 'string':\n        key = `s${item.value}`\n        break\n      case 'number':\n        key = item.value\n        break\n      case 'boolean':\n        key = item.value\n        break\n      case 'null':\n        key = 'n'\n        break\n      case 'object':\n        {\n          const keyField = item.get('_key')\n          if (keyField && keyField.type === 'string') {\n            key = `k${keyField.value}`\n\n            // We do not handle duplicate _key\n            if (index.has(key)) return undefined\n          }\n        }\n        break\n      default:\n    }\n\n    // No key => abort\n    if (key === null) return undefined\n\n    keys.push(key)\n    let positions = index.get(key)\n    if (!positions) {\n      positions = []\n      index.set(key, positions)\n    }\n    positions.push(i)\n  }\n\n  // All is good.\n  return {keys, index}\n}\n\nexport function removedArray<A>(\n  input: ArrayInput<A>,\n  toValue: null | undefined,\n  options: DiffOptions,\n): ArrayDiff<A> & {action: 'removed'} {\n  return {\n    type: 'array',\n    action: 'removed',\n    isChanged: true,\n    fromValue: input.value,\n    toValue,\n    annotation: input.annotation,\n\n    get items(): ArrayDiff<A>['items'] {\n      const items: ArrayDiff<A>['items'] = []\n      for (let i = 0; i < input.length; i++) {\n        const item = input.at(i)\n        items.push({\n          fromIndex: i,\n          toIndex: undefined,\n          hasMoved: false,\n          diff: removedInput(item, undefined, options),\n          annotation: input.annotationAt(i),\n        })\n      }\n\n      return replaceProperty(this, 'items', items)\n    },\n  }\n}\n\nexport function addedArray<A>(\n  input: ArrayInput<A>,\n  fromValue: null | undefined,\n  options: DiffOptions,\n): ArrayDiff<A> & {action: 'added'} {\n  return {\n    type: 'array',\n    action: 'added',\n    isChanged: true,\n    fromValue,\n    toValue: input.value,\n    annotation: input.annotation,\n\n    get items(): ArrayDiff<A>['items'] {\n      const items: ArrayDiff<A>['items'] = []\n      for (let i = 0; i < input.length; i++) {\n        const item = input.at(i)\n        items.push({\n          fromIndex: undefined,\n          toIndex: i,\n          hasMoved: false,\n          diff: addedInput(item, undefined, options),\n          annotation: input.annotationAt(i),\n        })\n      }\n\n      return replaceProperty(this, 'items', items)\n    },\n  }\n}\n","import {replaceProperty} from '../helpers'\nimport {type DiffOptions, type ObjectDiff, type ObjectInput} from '../types'\nimport {addedInput, diffInput, removedInput} from './diffInput'\n\nconst ignoredFields = new Set(['_id', '_type', '_createdAt', '_updatedAt', '_rev', '_weak'])\n\nexport function diffObject<A>(\n  fromInput: ObjectInput<A>,\n  toInput: ObjectInput<A>,\n  options: DiffOptions,\n): ObjectDiff<A> {\n  const fields: ObjectDiff<A>['fields'] = {}\n  let isChanged = false\n\n  for (const key of fromInput.keys) {\n    if (ignoredFields.has(key)) continue\n\n    const fromField = fromInput.get(key)!\n\n    const toField = toInput.get(key)\n    if (toField) {\n      const fieldDiff = diffInput(fromField, toField, options)\n      fields[key] = fieldDiff\n      if (fieldDiff.isChanged) isChanged = true\n    } else {\n      fields[key] = removedInput(fromField, undefined, options)\n      isChanged = true\n    }\n  }\n\n  for (const key of toInput.keys) {\n    if (ignoredFields.has(key)) continue\n\n    // Already handled above\n    if (fromInput.get(key)) continue\n\n    const toField = toInput.get(key)!\n    fields[key] = addedInput(toField, undefined, options)\n    isChanged = true\n  }\n\n  const fromValue = fromInput.value\n  const toValue = toInput.value\n\n  if (!isChanged) {\n    return {\n      type: 'object',\n      action: 'unchanged',\n      isChanged: false,\n      fromValue,\n      toValue,\n      fields,\n    }\n  }\n\n  return {\n    type: 'object',\n    action: 'changed',\n    isChanged: true,\n    fromValue,\n    toValue,\n    fields,\n    annotation: toInput.annotation,\n  }\n}\n\nexport function removedObject<A>(\n  input: ObjectInput<A>,\n  toValue: null | undefined,\n  options: DiffOptions,\n): ObjectDiff<A> & {action: 'removed'} {\n  return {\n    type: 'object',\n    action: 'removed',\n    isChanged: true,\n    fromValue: input.value,\n    toValue,\n    annotation: input.annotation,\n\n    get fields(): ObjectDiff<A>['fields'] {\n      const fields: ObjectDiff<A>['fields'] = {}\n      for (const key of input.keys) {\n        const value = input.get(key)!\n        fields[key] = removedInput(value, undefined, options)\n      }\n      return replaceProperty(this, 'fields', fields)\n    },\n  }\n}\n\nexport function addedObject<A>(\n  input: ObjectInput<A>,\n  fromValue: null | undefined,\n  options: DiffOptions,\n): ObjectDiff<A> & {action: 'added'} {\n  return {\n    type: 'object',\n    action: 'added',\n    isChanged: true,\n    fromValue,\n    toValue: input.value,\n    annotation: input.annotation,\n\n    get fields(): ObjectDiff<A>['fields'] {\n      const fields: ObjectDiff<A>['fields'] = {}\n      for (const key of input.keys) {\n        const value = input.get(key)!\n        fields[key] = addedInput(value, undefined, options)\n      }\n      return replaceProperty(this, 'fields', fields)\n    },\n  }\n}\n","import {\n  type BooleanDiff,\n  type BooleanInput,\n  type DiffOptions,\n  type NumberDiff,\n  type NumberInput,\n} from '../types'\n\nexport function diffNumber<A>(\n  fromInput: NumberInput<A>,\n  toInput: NumberInput<A>,\n  options: DiffOptions,\n): NumberDiff<A> {\n  const fromValue = fromInput.value\n  const toValue = toInput.value\n  const type = fromInput.type\n\n  if (fromValue === toValue)\n    return {\n      type,\n      action: 'unchanged',\n      fromValue,\n      toValue,\n      isChanged: false,\n    }\n\n  return {\n    type: fromInput.type,\n    action: 'changed',\n    isChanged: true,\n    fromValue: fromValue,\n    toValue: toValue,\n    annotation: toInput.annotation,\n  }\n}\n\nexport function diffBoolean<A>(\n  fromInput: BooleanInput<A>,\n  toInput: BooleanInput<A>,\n  options: DiffOptions,\n): BooleanDiff<A> {\n  const fromValue = fromInput.value\n  const toValue = toInput.value\n  const type = fromInput.type\n\n  if (fromValue === toValue)\n    return {\n      type,\n      action: 'unchanged',\n      fromValue,\n      toValue,\n      isChanged: false,\n    }\n\n  return {\n    type: fromInput.type,\n    action: 'changed',\n    isChanged: true,\n    fromValue: fromValue,\n    toValue: toValue,\n    annotation: toInput.annotation,\n  }\n}\n","import {\n  cleanupSemantic,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  makeDiff,\n} from '@sanity/diff-match-patch'\n\nimport {replaceProperty} from '../helpers'\nimport {type DiffOptions, type StringDiff, type StringDiffSegment, type StringInput} from '../types'\n\nexport function diffString<A>(\n  fromInput: StringInput<A>,\n  toInput: StringInput<A>,\n  options: DiffOptions,\n): StringDiff<A> {\n  const fromValue = fromInput.value\n  const toValue = toInput.value\n\n  if (fromValue === toValue) {\n    return {\n      type: 'string',\n      action: 'unchanged',\n      isChanged: false,\n      fromValue,\n      toValue,\n      segments: [{type: 'stringSegment', action: 'unchanged', text: fromValue}],\n    }\n  }\n\n  return {\n    type: 'string',\n    action: 'changed',\n    isChanged: true,\n    fromValue,\n    toValue,\n    annotation: toInput.annotation,\n\n    // Compute and memoize string segments only when accessed\n    get segments(): StringDiffSegment<A>[] {\n      const segments = buildSegments(fromInput, toInput)\n      return replaceProperty(this, 'segments', segments)\n    },\n  }\n}\n\nfunction buildSegments<A>(\n  fromInput: StringInput<A>,\n  toInput: StringInput<A>,\n): StringDiffSegment<A>[] {\n  const segments: StringDiffSegment<A>[] = []\n  const dmpDiffs = cleanupSemantic(makeDiff(fromInput.value, toInput.value))\n\n  let fromIdx = 0\n  let toIdx = 0\n\n  for (const [op, text] of dmpDiffs) {\n    switch (op) {\n      case DIFF_EQUAL:\n        segments.push({type: 'stringSegment', action: 'unchanged', text})\n        fromIdx += text.length\n        toIdx += text.length\n        break\n      case DIFF_DELETE:\n        for (const segment of fromInput.sliceAnnotation(fromIdx, fromIdx + text.length)) {\n          segments.push({\n            type: 'stringSegment',\n            action: 'removed',\n            text: segment.text,\n            annotation: segment.annotation,\n          })\n        }\n        fromIdx += text.length\n        break\n      case DIFF_INSERT:\n        for (const segment of toInput.sliceAnnotation(toIdx, toIdx + text.length)) {\n          segments.push({\n            type: 'stringSegment',\n            action: 'added',\n            text: segment.text,\n            annotation: segment.annotation,\n          })\n        }\n        toIdx += text.length\n        break\n      default:\n        throw new Error(`Unhandled diff-match-patch operation \"${op}\"`)\n    }\n  }\n\n  return segments\n}\n\nexport function removedString<A>(\n  input: StringInput<A>,\n  toValue: null | undefined,\n  options: DiffOptions,\n): StringDiff<A> & {action: 'removed'} {\n  return {\n    type: 'string',\n    action: 'removed',\n    isChanged: true,\n    fromValue: input.value,\n    toValue,\n    annotation: input.annotation,\n\n    get segments(): StringDiffSegment<A>[] {\n      const segments: StringDiffSegment<A>[] = input\n        .sliceAnnotation(0, input.value.length)\n        .map((segment) => ({type: 'stringSegment', action: 'removed', ...segment}))\n\n      return replaceProperty(this, 'segments', segments)\n    },\n  }\n}\n\nexport function addedString<A>(\n  input: StringInput<A>,\n  fromValue: null | undefined,\n  options: DiffOptions,\n): StringDiff<A> & {action: 'added'} {\n  return {\n    type: 'string',\n    action: 'added',\n    isChanged: true,\n    fromValue,\n    toValue: input.value,\n    annotation: input.annotation,\n\n    get segments(): StringDiffSegment<A>[] {\n      const segments: StringDiffSegment<A>[] = input\n        .sliceAnnotation(0, input.value.length)\n        .map((segment) => ({type: 'stringSegment', action: 'added', ...segment}))\n\n      return replaceProperty(this, 'segments', segments)\n    },\n  }\n}\n","import {type DiffOptions, type Input, type TypeChangeDiff} from '../types'\nimport {addedInput, removedInput} from './diffInput'\n\nexport function diffTypeChange<A>(\n  fromInput: Input<A>,\n  toInput: Input<A>,\n  options: DiffOptions,\n): TypeChangeDiff<A> {\n  return {\n    type: 'typeChange',\n    action: 'changed',\n    isChanged: true,\n\n    fromType: fromInput.type,\n    fromValue: fromInput.value,\n    fromDiff: removedInput(fromInput, undefined, options),\n\n    toType: toInput.type,\n    toValue: toInput.value,\n    toDiff: addedInput(toInput, undefined, options),\n\n    annotation: toInput.annotation,\n  }\n}\n","import {\n  type ArrayInput,\n  type BooleanInput,\n  type Diff,\n  type DiffOptions,\n  type Input,\n  type NumberInput,\n  type ObjectInput,\n  type StringInput,\n} from '../types'\nimport {addedArray, diffArray, removedArray} from './diffArray'\nimport {addedObject, diffObject, removedObject} from './diffObject'\nimport {diffBoolean, diffNumber} from './diffSimple'\nimport {addedString, diffString, removedString} from './diffString'\nimport {diffTypeChange} from './diffTypeChange'\n\n/**\n * Takes a `from` and `to` input and calulates a diff between the two\n *\n * @param fromInput - The source (`from`) input - use {@link wrap | the wrap() method} to generate an \"input\"\n * @param toInput - The destination (`to`) input - use {@link wrap | the wrap() method} to generate an \"input\"\n * @param options - Options for the diffing process - currently no options are defined\n * @returns A diff object representing the change\n * @public\n */\nexport function diffInput<A>(\n  fromInput: Input<A>,\n  toInput: Input<A>,\n  options: DiffOptions = {},\n): Diff<A> {\n  if (fromInput.type !== toInput.type) {\n    if (fromInput.type === 'null') {\n      return addedInput(toInput, null, options)\n    }\n\n    if (toInput.type === 'null') {\n      return removedInput(fromInput, null, options)\n    }\n\n    return diffTypeChange(fromInput, toInput, options)\n  }\n\n  return diffWithType(fromInput.type, fromInput, toInput, options)\n}\n\nfunction diffWithType<A>(\n  type: Input<A>['type'],\n  fromInput: Input<A>,\n  toInput: Input<A>,\n  options: DiffOptions,\n): Diff<A> {\n  switch (type) {\n    case 'null':\n      return {\n        type: 'null',\n        action: 'unchanged',\n        isChanged: false,\n        toValue: null,\n        fromValue: null,\n      }\n    case 'boolean':\n      return diffBoolean(fromInput as BooleanInput<A>, toInput as BooleanInput<A>, options)\n    case 'number':\n      return diffNumber(fromInput as NumberInput<A>, toInput as NumberInput<A>, options)\n    case 'string':\n      return diffString(fromInput as StringInput<A>, toInput as StringInput<A>, options)\n    case 'array':\n      return diffArray(fromInput as ArrayInput<A>, toInput as ArrayInput<A>, options)\n    case 'object':\n      return diffObject(fromInput as ObjectInput<A>, toInput as ObjectInput<A>, options)\n    default:\n      throw new Error(`Unhandled diff type \"${type}\"`)\n  }\n}\n\nexport function removedInput<A>(\n  input: Input<A>,\n  toValue: null | undefined,\n  options: DiffOptions,\n): Diff<A> & {action: 'removed'} {\n  switch (input.type) {\n    case 'null':\n      return {\n        type: 'null',\n        action: 'removed',\n        isChanged: true,\n        fromValue: null,\n        toValue,\n        annotation: input.annotation,\n      }\n    case 'boolean':\n      return {\n        type: 'boolean',\n        action: 'removed',\n        isChanged: true,\n        fromValue: input.value,\n        toValue,\n        annotation: input.annotation,\n      }\n    case 'number':\n      return {\n        type: 'number',\n        action: 'removed',\n        isChanged: true,\n        fromValue: input.value,\n        toValue,\n        annotation: input.annotation,\n      }\n    case 'string':\n      return removedString(input, toValue, options)\n    case 'array':\n      return removedArray(input, toValue, options)\n    case 'object':\n      return removedObject(input, toValue, options)\n    default:\n      throw new Error('Unhandled diff type')\n  }\n}\n\nexport function addedInput<A>(\n  input: Input<A>,\n  fromValue: null | undefined,\n  options: DiffOptions,\n): Diff<A> & {action: 'added'} {\n  switch (input.type) {\n    case 'null':\n      return {\n        type: 'null',\n        action: 'added',\n        isChanged: true,\n        fromValue,\n        toValue: null,\n        annotation: input.annotation,\n      }\n    case 'boolean':\n      return {\n        type: 'boolean',\n        action: 'added',\n        isChanged: true,\n        fromValue,\n        toValue: input.value,\n        annotation: input.annotation,\n      }\n    case 'number':\n      return {\n        type: 'number',\n        action: 'added',\n        isChanged: true,\n        fromValue,\n        toValue: input.value,\n        annotation: input.annotation,\n      }\n    case 'string':\n      return addedString(input, fromValue, options)\n    case 'array':\n      return addedArray(input, fromValue, options)\n    case 'object':\n      return addedObject(input, fromValue, options)\n    default:\n      throw new Error('Unhandled diff type')\n  }\n}\n","import {type ArrayInput, type Input} from '../types'\nimport {wrap} from './index'\n\nexport default class ArrayWrapper<A> implements ArrayInput<A> {\n  type = 'array' as const\n  length: number\n  value: unknown[]\n  annotation: A\n\n  private elements: Input<A>[] = []\n\n  constructor(value: unknown[], annotation: A) {\n    this.annotation = annotation\n    this.value = value\n    this.length = value.length\n  }\n\n  at(idx: number): Input<A> {\n    if (idx >= this.length) throw new Error('out of bounds')\n    const input = this.elements[idx]\n    if (input) {\n      return input\n    }\n\n    return (this.elements[idx] = wrap(this.value[idx], this.annotation))\n  }\n\n  annotationAt(): A {\n    return this.annotation\n  }\n}\n","type SimpleType = 'boolean' | 'number' | 'null'\n\nexport default class BasicWrapper<K extends SimpleType, V, A> {\n  type: K\n  value: V\n  annotation: A\n\n  constructor(type: K, value: V, annotation: A) {\n    this.type = type\n    this.value = value\n    this.annotation = annotation\n  }\n}\n","import {type Input, type ObjectInput} from '../types'\nimport {wrap} from './index'\n\nexport default class ObjectWrapper<A> implements ObjectInput<A> {\n  type = 'object' as const\n  value: Record<string, unknown>\n  keys: string[]\n  annotation: A\n\n  private fields: Record<string, Input<A>> = {}\n\n  constructor(value: Record<string, unknown>, annotation: A) {\n    this.value = value\n    this.annotation = annotation\n    this.keys = Object.keys(value)\n  }\n\n  get(key: string): Input<A> | undefined {\n    const input = this.fields[key]\n    if (input) {\n      return input\n    }\n\n    if (!this.value.hasOwnProperty(key)) {\n      return undefined\n    }\n\n    const raw = this.value[key]\n    return (this.fields[key] = wrap(raw, this.annotation))\n  }\n}\n","import {type StringInput} from '../types'\n\nexport default class StringWrapper<A> implements StringInput<A> {\n  type = 'string' as const\n  value: string\n  annotation: A\n\n  constructor(value: string, annotation: A) {\n    this.value = value\n    this.annotation = annotation\n  }\n\n  sliceAnnotation(start: number, end: number): {text: string; annotation: A}[] {\n    return [{text: this.value.slice(start, end), annotation: this.annotation}]\n  }\n}\n","import {type Input} from '../types'\nimport ArrayWrapper from './array'\nimport BasicWrapper from './basic'\nimport ObjectWrapper from './object'\nimport StringWrapper from './string'\n\n/**\n * Takes an input (any JSON-serializable value) and an annotation, and generates an input\n * object for it, to be used with {@link diffInput | the diffInput() method} and others.\n *\n * @param input - The value to wrap in an input object\n * @param annotation - Annotation attached to the input - will be bound to generated diffs\n * @returns A input object\n * @throws if `input` is not a JSON-serializable type\n * @public\n */\nexport function wrap<A>(input: unknown, annotation: A): Input<A> {\n  if (Array.isArray(input)) {\n    return new ArrayWrapper(input, annotation)\n  } else if (input === null) {\n    return new BasicWrapper('null', input, annotation)\n  }\n\n  const type = typeof input\n  switch (type) {\n    case 'number':\n      return new BasicWrapper(type, input as number, annotation)\n    case 'boolean':\n      return new BasicWrapper(type, input as boolean, annotation)\n    case 'object':\n      return new ObjectWrapper(input as Record<string, unknown>, annotation)\n    case 'string':\n      return new StringWrapper(input as string, annotation)\n    default:\n      throw new Error(`cannot wrap value of type: ${type}`)\n  }\n}\n"],"names":["replaceProperty","parent","prop","value","getLongestCommonSubsequence","previous","next","matrix","getLengthMatrix","result","backtrack","len1","length","len2","x","y","Array","Math","max","prevIndex","nextIndex","subsequence","sequence","prevIndices","nextIndices","areEqual","unshift","valueAtMatrixAbove","valueAtMatrixLeft","diffArray","fromInput","toInput","options","fromValue","toValue","type","action","isChanged","items","diffExactByPosition","Error","keyedA","indexByKey","keyedB","diffArrayByKey","buildArrayDiff","diffArrayByReinsert","annotation","idx","diff","diffInput","at","push","fromIndex","toIndex","hasMoved","annotationAt","input","addedInput","removedInput","fromArray","fromKeyIndex","toArray","toKeyIndex","diffCommon","key","deletePositionInIndex","index","lcs","keys","subsequenceIdx","indexOf","toIndexes","get","find","includes","positions","values","sort","compareItemDiff","a","b","pos","deleteArrayValue","delete","arr","splice","Map","i","item","concat","keyField","has","set","removedArray","addedArray","ignoredFields","Set","diffObject","fields","fromField","toField","fieldDiff","removedObject","addedObject","diffNumber","diffBoolean","diffString","segments","text","buildSegments","dmpDiffs","cleanupSemantic","makeDiff","fromIdx","toIdx","op","DIFF_EQUAL","DIFF_DELETE","segment","sliceAnnotation","DIFF_INSERT","removedString","map","addedString","diffTypeChange","fromType","fromDiff","toType","toDiff","arguments","undefined","diffWithType","ArrayWrapper","constructor","elements","wrap","BasicWrapper","ObjectWrapper","Object","hasOwnProperty","raw","StringWrapper","start","end","slice","isArray"],"mappings":"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"}