{"version":3,"file":"_internal.esm.js","sources":["../../src/legacy/actionUtils.ts","../../src/sanity/validation/createValidationResult.ts","../../src/sanity/groupProblems.ts","../../src/sanity/validation/utils/getDupes.ts","../../src/core/traverseSchema.ts","../../src/sanity/coreTypes.ts","../../src/sanity/traverseSchema.ts","../../src/sanity/validation/types/array.ts","../../src/sanity/validation/utils/isJSONTypeOf.ts","../../src/sanity/validation/types/block.ts","../../src/sanity/validation/utils/validateNonObjectFieldsProp.ts","../../src/sanity/validation/utils/validateTypeName.ts","../../src/sanity/validation/types/deprecated.ts","../../src/sanity/validation/types/common.ts","../../src/sanity/validation/types/crossDatasetReference.ts","../../src/sanity/validation/utils/isComponent.ts","../../src/sanity/validation/utils/validateComponent.ts","../../src/sanity/validation/types/object.ts","../../src/sanity/validation/types/document.ts","../../src/sanity/validation/types/file.ts","../../src/sanity/validation/types/image.ts","../../src/sanity/validation/types/reference.ts","../../src/sanity/validation/types/rootType.ts","../../src/sanity/validation/types/slug.ts","../../src/sanity/validateSchema.ts"],"sourcesContent":["import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {type SchemaType} from '@sanity/types'\nimport {difference} from 'lodash'\n\nconst ACTIONS_FLAG = '__experimental_actions'\n\nconst DEFAULT_ACTIONS = ['create', 'update', 'delete', 'publish']\nconst VALID_ACTIONS = DEFAULT_ACTIONS\n\n// todo: enable this when officially deprecating experimental actions\nconst DEPRECATE_EXPERIMENTAL_ACTIONS = false\n\nconst hasWarned = {}\nconst readActions = (schemaType: SchemaType): string[] => {\n  if (DEPRECATE_EXPERIMENTAL_ACTIONS && !(schemaType.name in hasWarned)) {\n    console.warn(`Heads up! Experimental actions is now deprecated and replaced by Document Actions. Read more about how to migrate on ${generateHelpUrl(\n      'experimental-actions-replaced-by-document-actions',\n    )}\".\n`)\n    hasWarned[schemaType.name] = true\n  }\n\n  return ACTIONS_FLAG in schemaType ? (schemaType[ACTIONS_FLAG] as string[]) : DEFAULT_ACTIONS\n}\n\nconst validateActions = (typeName: string, actions: string[]) => {\n  if (!Array.isArray(actions)) {\n    throw new Error(\n      `The value of <type>.${ACTIONS_FLAG} should be an array with any of the actions ${VALID_ACTIONS.join(\n        ', ',\n      )}`,\n    )\n  }\n\n  const invalid = difference(actions, VALID_ACTIONS)\n\n  if (invalid.length > 0) {\n    throw new Error(\n      `Invalid action${\n        invalid.length > 1 ? 's' : ''\n      } configured for schema type \"${typeName}\": ${invalid.join(\n        ', ',\n      )}. Valid actions are: ${VALID_ACTIONS.join(', ')}`,\n    )\n  }\n\n  return actions\n}\n\nexport const resolveEnabledActions = (schemaType: SchemaType): string[] =>\n  validateActions(schemaType.name, readActions(schemaType))\n\nexport const isActionEnabled = (schemaType: SchemaType, action: string): boolean =>\n  resolveEnabledActions(schemaType).includes(action)\n","import {type SchemaValidationResult} from '../typedefs'\n\n// Temporary solution to ensure we have a central registry over used helpIds\nexport const HELP_IDS = {\n  TYPE_INVALID: 'schema-type-invalid',\n  TYPE_IS_ESM_MODULE: 'schema-type-is-esm-module',\n  TYPE_NAME_RESERVED: 'schema-type-name-reserved',\n  TYPE_MISSING_NAME: 'schema-type-missing-name-or-type',\n  TYPE_MISSING_TYPE: 'schema-type-missing-name-or-type',\n  TYPE_TITLE_RECOMMENDED: 'schema-type-title-is-recommended',\n  TYPE_TITLE_INVALID: 'schema-type-title-is-recommended',\n  OBJECT_FIELDS_INVALID: 'schema-object-fields-invalid',\n  OBJECT_FIELD_NOT_UNIQUE: 'schema-object-fields-invalid',\n  OBJECT_FIELD_NAME_INVALID: 'schema-object-fields-invalid',\n  OBJECT_FIELD_DEFINITION_INVALID_TYPE: 'schema-object-fields-invalid',\n  ARRAY_PREDEFINED_CHOICES_INVALID: 'schema-predefined-choices-invalid',\n  ARRAY_OF_ARRAY: 'schema-array-of-array',\n  ARRAY_OF_INVALID: 'schema-array-of-invalid',\n  ARRAY_OF_NOT_UNIQUE: 'schema-array-of-invalid',\n  ARRAY_OF_TYPE_GLOBAL_TYPE_CONFLICT: 'schema-array-of-type-global-type-conflict',\n  ARRAY_OF_TYPE_BUILTIN_TYPE_CONFLICT: 'schema-array-of-type-builtin-type-conflict',\n  REFERENCE_TO_INVALID: 'schema-reference-to-invalid',\n  REFERENCE_TO_NOT_UNIQUE: 'schema-reference-to-invalid',\n  REFERENCE_INVALID_OPTIONS: 'schema-reference-invalid-options',\n  REFERENCE_INVALID_OPTIONS_LOCATION: 'schema-reference-options-nesting',\n  REFERENCE_INVALID_FILTER_PARAMS_COMBINATION: 'schema-reference-filter-params-combination',\n  SLUG_SLUGIFY_FN_RENAMED: 'slug-slugifyfn-renamed',\n  ASSET_METADATA_FIELD_INVALID: 'asset-metadata-field-invalid',\n  CROSS_DATASET_REFERENCE_INVALID: 'cross-dataset-reference-invalid',\n  DEPRECATED_BLOCKEDITOR_KEY: 'schema-deprecated-blockeditor-key',\n  STANDALONE_BLOCK_TYPE: 'schema-standalone-block-type',\n}\n\nfunction createValidationResult(\n  severity: SchemaValidationResult['severity'],\n  message: string,\n  helpId: string | null,\n): SchemaValidationResult {\n  if (helpId && !Object.keys(HELP_IDS).some((id) => HELP_IDS[id] === helpId)) {\n    throw new Error(\n      `Used the unknown helpId \"${helpId}\", please add it to the array in createValidationResult.js`,\n    )\n  }\n  return {\n    severity,\n    message,\n    helpId,\n  }\n}\n\nexport const error = (message: string, helpId?: string | null): SchemaValidationResult =>\n  createValidationResult('error', message, helpId)\n\nexport const warning = (message: string, helpId?: string | null): SchemaValidationResult =>\n  createValidationResult('warning', message, helpId)\n","import {\n  type SchemaType,\n  type SchemaTypeDefinition,\n  type SchemaValidationProblemGroup,\n} from '@sanity/types'\nimport {flatten, get} from 'lodash'\n\nimport {type ProblemPath, type ProblemPathPropertySegment, type TypeWithProblems} from './typedefs'\nimport {error} from './validation/createValidationResult'\n\n/**\n * @internal\n */\nexport function groupProblems(types: SchemaTypeDefinition[]): SchemaValidationProblemGroup[] {\n  return flatten<TypeWithProblems>(types.map((type) => getTypeProblems(type))).filter(\n    (type) => type.problems.length > 0,\n  )\n}\n\nfunction createTypeWithMembersProblemsAccessor(\n  memberPropertyName: string,\n  getMembers = (type: SchemaType) => get(type, memberPropertyName),\n) {\n  return function getProblems(type, parentPath: ProblemPath): TypeWithProblems[] {\n    const currentPath: ProblemPath = [\n      ...parentPath,\n      {kind: 'type', type: type.type, name: type.name},\n    ]\n\n    const members = getMembers(type) || []\n\n    const memberProblems: TypeWithProblems[][] = Array.isArray(members)\n      ? members.map((memberType) => {\n          const propertySegment: ProblemPathPropertySegment = {\n            kind: 'property',\n            name: memberPropertyName,\n          }\n          const memberPath: ProblemPath = [...currentPath, propertySegment]\n          return getTypeProblems(memberType, memberPath)\n        })\n      : [\n          [\n            {\n              path: currentPath,\n              problems: [error(`Member declaration (${memberPropertyName}) is not an array`)],\n            },\n          ],\n        ]\n\n    return [\n      {\n        path: currentPath,\n        problems: type._problems || [],\n      },\n      ...flatten(memberProblems),\n    ]\n  }\n}\n\nconst arrify = (val) => (Array.isArray(val) ? val : (typeof val === 'undefined' && []) || [val])\n\nconst getObjectProblems = createTypeWithMembersProblemsAccessor('fields')\nconst getImageProblems = createTypeWithMembersProblemsAccessor('fields')\nconst getFileProblems = createTypeWithMembersProblemsAccessor('fields')\nconst getArrayProblems = createTypeWithMembersProblemsAccessor('of')\nconst getReferenceProblems = createTypeWithMembersProblemsAccessor('to', (type) =>\n  'to' in type ? arrify(type.to) : [],\n)\nconst getBlockAnnotationProblems = createTypeWithMembersProblemsAccessor('marks.annotations')\nconst getBlockMemberProblems = createTypeWithMembersProblemsAccessor('of')\nconst getBlockProblems = (type, problems) => [\n  ...getBlockAnnotationProblems(type, problems),\n  ...getBlockMemberProblems(type, problems),\n]\n\nfunction getDefaultProblems(type, path = []): TypeWithProblems[] {\n  return [\n    {\n      path: [...path, {kind: 'type', type: type.type, name: type.name}],\n      problems: type._problems || [],\n    },\n  ]\n}\n\nfunction getTypeProblems(type: SchemaTypeDefinition, path = []): TypeWithProblems[] {\n  switch (type.type) {\n    case 'object': {\n      return getObjectProblems(type, path)\n    }\n    case 'document': {\n      return getObjectProblems(type, path)\n    }\n    case 'array': {\n      return getArrayProblems(type, path)\n    }\n    case 'reference': {\n      return getReferenceProblems(type, path)\n    }\n    case 'block': {\n      return getBlockProblems(type, path)\n    }\n    case 'image': {\n      return getImageProblems(type, path)\n    }\n    case 'file': {\n      return getFileProblems(type, path)\n    }\n    default: {\n      return getDefaultProblems(type, path)\n    }\n  }\n}\n","export function getDupes(array, selector = (v) => v) {\n  const dupes = array.reduce((acc, item) => {\n    const key = selector(item)\n    if (!acc[key]) {\n      acc[key] = []\n    }\n    acc[key].push(item)\n    return acc\n  }, {})\n\n  return Object.keys(dupes)\n    .map((key) => (dupes[key].length > 1 ? dupes[key] : null))\n    .filter(Boolean)\n}\n","import {flatten, uniq} from 'lodash'\n\nimport {getDupes} from '../sanity/validation/utils/getDupes'\n\ntype SchemaType = Record<string, any>\ntype SchemaTypeDef = Record<string, any>\n\ntype VisitContext = {\n  isRoot: boolean\n  isReserved: (typeName: string) => boolean\n  visit: Visitor\n  index: number\n  isDuplicate: (typeName: string) => boolean\n  getType: (typeName: string) => null | SchemaType\n  getTypeNames: () => Array<string>\n}\n\nexport type Visitor = (typeDef: SchemaTypeDef, arg1: VisitContext) => SchemaType\n\nconst NOOP_VISITOR: Visitor = (typeDef) => typeDef\n\nexport class UnknownType {\n  name: string\n\n  constructor(name: string) {\n    this.name = name\n  }\n}\n\nconst TYPE_TYPE = {name: 'type', type: null}\n\nconst FUTURE_RESERVED = ['any', 'time', 'date']\n\nexport function traverseSchema(\n  types: SchemaTypeDef[] = [],\n  coreTypes: SchemaTypeDef[] = [],\n  visitor: Visitor = NOOP_VISITOR,\n) {\n  const coreTypesRegistry = Object.create(null)\n  const registry = Object.create(null)\n\n  const coreTypeNames = coreTypes.map((typeDef) => typeDef.name)\n\n  const reservedTypeNames = FUTURE_RESERVED.concat(coreTypeNames)\n\n  const typeNames = types.map((typeDef) => typeDef && typeDef.name).filter(Boolean)\n\n  coreTypes.forEach((coreType) => {\n    coreTypesRegistry[coreType.name] = coreType\n  })\n\n  types.forEach((type, i) => {\n    // Allocate a placeholder for each type\n    registry[(type && type.name) || `__unnamed_${i}`] = {}\n  })\n\n  function getType(typeName) {\n    return typeName === 'type'\n      ? TYPE_TYPE\n      : coreTypesRegistry[typeName] || registry[typeName] || null\n  }\n\n  const duplicateNames = uniq(flatten(getDupes(typeNames)))\n\n  function isDuplicate(typeName) {\n    return duplicateNames.includes(typeName)\n  }\n  function getTypeNames() {\n    return typeNames.concat(coreTypeNames)\n  }\n  function isReserved(typeName) {\n    return typeName === 'type' || reservedTypeNames.includes(typeName)\n  }\n\n  const visitType = (isRoot) => (typeDef, index) => {\n    return visitor(typeDef, {\n      visit: visitType(false),\n      isRoot,\n      getType,\n      getTypeNames,\n      isReserved,\n      isDuplicate,\n      index,\n    })\n  }\n\n  coreTypes.forEach((coreTypeDef) => {\n    Object.assign(coreTypesRegistry[coreTypeDef.name], visitType(coreTypeDef))\n  })\n\n  types.forEach((typeDef, i) => {\n    Object.assign(\n      registry[(typeDef && typeDef.name) || `__unnamed_${i}`],\n      visitType(true)(typeDef, i),\n    )\n  })\n\n  return {\n    get(typeName: string) {\n      const res = registry[typeName] || coreTypesRegistry[typeName]\n      if (res) {\n        return res\n      }\n      throw new Error(`No such type: ${typeName}`)\n    },\n    has(typeName: string): boolean {\n      return typeName in registry || typeName in coreTypesRegistry\n    },\n    getTypeNames(): string[] {\n      return Object.keys(registry)\n    },\n    getTypes() {\n      return this.getTypeNames().map(this.get)\n    },\n    toJSON() {\n      return this.getTypes()\n    },\n  }\n}\n","const coreTypes = [\n  {name: 'array', jsonType: 'array', type: 'type'},\n  {name: 'block', jsonType: 'object', type: 'type'},\n  {name: 'boolean', jsonType: 'boolean', type: 'type'},\n  {name: 'datetime', jsonType: 'string', type: 'type'},\n  {name: 'date', jsonType: 'string', type: 'type'},\n  {name: 'document', jsonType: 'object', type: 'type'},\n  {name: 'email', jsonType: 'string', type: 'type'},\n  {name: 'file', jsonType: 'object', type: 'type'},\n  {name: 'geopoint', jsonType: 'object', type: 'type'},\n  {name: 'image', jsonType: 'object', type: 'type'},\n  {name: 'number', jsonType: 'number', type: 'type'},\n  {name: 'object', jsonType: 'object', type: 'type'},\n  {name: 'reference', jsonType: 'object', type: 'type'},\n  {name: 'crossDatasetReference', jsonType: 'object', type: 'type'},\n  {name: 'slug', jsonType: 'object', type: 'type'},\n  {name: 'span', jsonType: 'object', type: 'type'},\n  {name: 'string', jsonType: 'string', type: 'type'},\n  {name: 'telephone', jsonType: 'string', type: 'type'},\n  {name: 'text', jsonType: 'string', type: 'type'},\n  {name: 'url', jsonType: 'string', type: 'type'},\n] as const\n\nexport const coreTypeNames = coreTypes.map((t) => t.name)\nexport default coreTypes\n","import {traverseSchema, type Visitor} from '../core/traverseSchema'\nimport coreTypes from './coreTypes'\nimport {type _FIXME_} from './typedefs'\n\nexport function traverseSanitySchema(schemaTypes: _FIXME_[], visitor: Visitor) {\n  return traverseSchema(schemaTypes, coreTypes as _FIXME_, visitor)\n}\n","import humanizeList from 'humanize-list'\nimport {flatten, partition} from 'lodash'\n\nimport {coreTypeNames} from '../../coreTypes'\nimport {error, HELP_IDS, warning} from '../createValidationResult'\nimport {getDupes} from '../utils/getDupes'\n\nfunction isPrimitiveTypeName(typeName) {\n  return typeName === 'string' || typeName === 'number' || typeName === 'boolean'\n}\n\nfunction isAssignable(typeName, type) {\n  return (typeof type.name === 'string' ? type.name : type.type) === typeName\n}\n\nfunction quote(n) {\n  return `\"${n}\"`\n}\n\nfunction pluralize(arr: unknown[], suf = 's') {\n  return arr.length === 1 ? '' : suf\n}\n\nfunction format(value: unknown) {\n  if (Array.isArray(value)) {\n    return `array with ${value.length} entries`\n  }\n  if (typeof value === 'object' && value !== null) {\n    return `object with keys ${humanizeList(Object.keys(value).map(quote))}`\n  }\n  return quote(value)\n}\n\nexport default (typeDef, visitorContext) => {\n  // name should already have been marked\n  const ofIsArray = Array.isArray(typeDef.of)\n\n  if (ofIsArray) {\n    const invalid = typeDef.of.reduce((errs, def, idx) => {\n      if (typeof def.name === 'string') {\n        // If an array member has been given a \"local\" type name, we want to trigger an error if the given member type name\n        // is one of the builtin types\n        //\n        // The following examples should be an error (where book is an existing root level type and reference is a built-in type):\n        //  - (…) of: [{type: 'book', name: 'image'}]\n        //  - (…) of: [{type: 'book', name: 'object'}]\n        //  - (…) of: [{type: 'object', name: 'reference'}]\n        // The following examples are valid (where \"address\" is not defined as a global object type)\n        //  - (…) of: [{type: 'object', name: 'address'}]\n        // The following examples are redundant, but should be allowed (at least for now)\n        //  - (…) of: [{type: 'object', name: 'object'}]\n        //  - (…) of: [{type: 'image', name: 'image'}]\n\n        if (\n          // specifying the same name as the type is redundant, but should not be a hard error at this point\n          // Consider showing a warning for this and deprecate this ability eventually\n          def.name !== def.type &&\n          coreTypeNames.includes(def.name)\n        ) {\n          return errs.concat(\n            error(\n              `Found array member declaration with the same type name as a built-in type (\"${def.name}\"). Array members can not be given the same name as a built-in type.`,\n              HELP_IDS.ARRAY_OF_TYPE_BUILTIN_TYPE_CONFLICT,\n            ),\n          )\n        }\n      }\n\n      if (def.type === 'object' && def.name && visitorContext.getType(def.name)) {\n        return errs.concat(\n          warning(\n            `Found array member declaration with the same name as the global schema type \"${def.name}\". It's recommended to use a unique name to avoid possibly incompatible data types that shares the same name.`,\n            HELP_IDS.ARRAY_OF_TYPE_GLOBAL_TYPE_CONFLICT,\n          ),\n        )\n      }\n      if (def.type === 'array') {\n        return errs.concat(\n          error(\n            `Found array member declaration of type \"array\" - multidimensional arrays are not currently supported by Sanity`,\n            HELP_IDS.ARRAY_OF_ARRAY,\n          ),\n        )\n      }\n\n      if (def) {\n        return errs\n      }\n\n      const err = `Found ${def === null ? 'null' : typeof def}, expected member declaration`\n      return errs.concat(\n        error(\n          `Found invalid type member declaration in array at index ${idx}: ${err}`,\n          HELP_IDS.ARRAY_OF_INVALID,\n        ),\n      )\n    }, [])\n\n    if (invalid.length > 0) {\n      return {\n        ...typeDef,\n        of: [],\n        _problems: invalid,\n      }\n    }\n  }\n\n  const problems = flatten([\n    ofIsArray\n      ? getDupes(typeDef.of, (t) => `${t.name};${t.type}`).map((dupes) =>\n          error(\n            `Found ${dupes.length} members with same type, but not unique names \"${dupes[0].type}\" in array. This makes it impossible to tell their values apart and you should consider naming them`,\n            HELP_IDS.ARRAY_OF_NOT_UNIQUE,\n          ),\n        )\n      : error(\n          'The array type is missing or having an invalid value for the required \"of\" property',\n          HELP_IDS.ARRAY_OF_INVALID,\n        ),\n  ])\n  const of = ofIsArray ? typeDef.of : []\n\n  // Don't allow object types without a name in block arrays\n  const hasObjectTypesWithoutName = of.some(\n    (type) => type.type === 'object' && typeof type.name === 'undefined',\n  )\n  const hasBlockType = of.some((ofType) => ofType.type === 'block')\n  if (hasBlockType && hasObjectTypesWithoutName) {\n    problems.push(\n      error(\n        \"The array type's 'of' property can't have an object type without a 'name' property as member, when the 'block' type is also a member of that array.\",\n        HELP_IDS.ARRAY_OF_INVALID,\n      ),\n    )\n  }\n\n  const [primitiveTypes, objectTypes] = partition(\n    of,\n    (ofType) =>\n      isPrimitiveTypeName(ofType.type) ||\n      isPrimitiveTypeName(visitorContext.getType(ofType.type)?.jsonType),\n  )\n\n  const isMixedArray = primitiveTypes.length > 0 && objectTypes.length > 0\n\n  if (isMixedArray) {\n    const primitiveTypeNames = primitiveTypes.map((t) => t.type)\n    const objectTypeNames = objectTypes.map((t) => t.type)\n    problems.push(\n      error(\n        `The array type's 'of' property can't have both object types and primitive types (found primitive type ${pluralize(\n          primitiveTypeNames,\n        )} ${humanizeList(primitiveTypeNames.map(quote))} and object type${pluralize(\n          objectTypeNames,\n        )} ${humanizeList(objectTypeNames.map(quote))})`,\n        HELP_IDS.ARRAY_OF_INVALID,\n      ),\n    )\n  }\n\n  const list = typeDef?.options?.list\n  if (!isMixedArray && Array.isArray(list)) {\n    const isArrayOfPrimitives = primitiveTypes.length > 0\n    if (isArrayOfPrimitives) {\n      list.forEach((option) => {\n        const value = option?.value ?? option\n        const isDeclared = primitiveTypes.some((primitiveType) => {\n          return typeof value === visitorContext.getType(primitiveType.type).jsonType\n        })\n        if (!isDeclared) {\n          const formattedTypeList = humanizeList(\n            primitiveTypes.map((t) => t.name || t.type),\n            {conjunction: 'or'},\n          )\n          problems.push(\n            error(\n              `An invalid entry found in options.list: ${format(\n                value,\n              )}. Must be either a value of type ${formattedTypeList}, or an object with {title: string, value: ${formattedTypeList}}`,\n              HELP_IDS.ARRAY_PREDEFINED_CHOICES_INVALID,\n            ),\n          )\n        }\n      })\n    } else {\n      list.forEach((option) => {\n        const optionTypeName = option._type || 'object'\n        const isDeclared = objectTypes.some((validObjectType) =>\n          isAssignable(optionTypeName, validObjectType),\n        )\n        if (!isDeclared) {\n          problems.push(\n            error(\n              `An invalid entry found in options.list: ${format(\n                option,\n              )}. Must be an object with \"_type\" set to ${humanizeList(\n                objectTypes\n                  .map((t) => t.name || t.type)\n                  .map((t) => (t === 'object' ? 'undefined' : quote(t))),\n                {conjunction: 'or'},\n              )}`,\n              HELP_IDS.ARRAY_PREDEFINED_CHOICES_INVALID,\n            ),\n          )\n        }\n      })\n    }\n  }\n\n  if (typeDef?.options?.list && typeDef?.options?.layout === 'tags') {\n    problems.push(\n      warning(\n        'Found array member declaration with both tags layout and a list of predefined values. If you want to display a list of predefined values, remove the tags layout from `options`.',\n      ),\n    )\n  }\n\n  return {\n    ...typeDef,\n    of: of.map(visitorContext.visit),\n    _problems: problems,\n  }\n}\n","export function isJSONTypeOf(type, jsonType, visitorContext) {\n  if ('jsonType' in type) {\n    return type.jsonType === jsonType\n  }\n  const parentType = visitorContext.getType(type.type)\n  if (!parentType) {\n    throw new Error(`Could not resolve jsonType of ${type.name}. No parent type found`)\n  }\n  return isJSONTypeOf(parentType, jsonType, visitorContext)\n}\n","import humanizeList from 'humanize-list'\nimport {isPlainObject, omit} from 'lodash'\n\nimport {coreTypeNames} from '../../coreTypes'\nimport {error, HELP_IDS, warning} from '../createValidationResult'\nimport {isJSONTypeOf} from '../utils/isJSONTypeOf'\n\nconst getTypeOf = (thing) => (Array.isArray(thing) ? 'array' : typeof thing)\nconst quote = (str) => `\"${str}\"`\nconst allowedKeys = [\n  'components',\n  'lists',\n  'marks',\n  'name',\n  'of',\n  'options',\n  'styles',\n  'title',\n  'type',\n  'validation',\n]\nconst allowedMarkKeys = ['decorators', 'annotations']\nconst allowedStyleKeys = ['blockEditor', 'title', 'value', 'component']\nconst allowedDecoratorKeys = ['blockEditor', 'title', 'value', 'icon', 'component']\nconst allowedListKeys = ['title', 'value', 'icon', 'component']\nconst supportedBuiltInObjectTypes = ['file', 'image', 'object', 'reference']\n\nexport default function validateBlockType(typeDef, visitorContext) {\n  const problems = []\n  let styles = typeDef.styles\n  let lists = typeDef.lists\n  let marks = typeDef.marks\n  let members = typeDef.of\n\n  const disallowedKeys = Object.keys(typeDef).filter(\n    (key) => !allowedKeys.includes(key) && !key.startsWith('_'),\n  )\n\n  if (disallowedKeys.length > 0) {\n    problems.push(\n      error(\n        `Found unknown properties for block declaration: ${humanizeList(\n          disallowedKeys.map(quote),\n        )}`,\n      ),\n    )\n  }\n\n  if (marks) {\n    marks = validateMarks(typeDef.marks, visitorContext, problems)\n  }\n\n  if (styles) {\n    styles = validateStyles(styles, visitorContext, problems)\n  }\n\n  if (lists) {\n    lists = validateLists(lists, visitorContext, problems)\n  }\n\n  if (members) {\n    members = validateMembers(members, visitorContext, problems)\n  }\n  return {\n    ...omit(typeDef, disallowedKeys),\n    marks,\n    styles,\n    name: typeDef.name || typeDef.type,\n    of: members,\n    _problems: problems,\n  }\n}\n\nfunction validateMarks(marks, visitorContext, problems) {\n  let decorators = marks.decorators\n  let annotations = marks.annotations\n\n  if (!isPlainObject(marks)) {\n    problems.push(error(`\"marks\" declaration should be an object, got ${getTypeOf(marks)}`))\n    return problems\n  }\n\n  const disallowedMarkKeys = Object.keys(marks).filter(\n    (key) => !allowedMarkKeys.includes(key) && !key.startsWith('_'),\n  )\n\n  if (disallowedMarkKeys.length > 0) {\n    problems.push(\n      error(\n        `Found unknown properties for block declaration: ${humanizeList(\n          disallowedMarkKeys.map(quote),\n        )}`,\n      ),\n    )\n  }\n\n  if (decorators && !Array.isArray(decorators)) {\n    problems.push(\n      error(`\"marks.decorators\" declaration should be an array, got ${getTypeOf(decorators)}`),\n    )\n  } else if (decorators) {\n    decorators\n      .filter((dec) => !!dec.blockEditor)\n      .forEach((dec) => {\n        dec.icon = dec.blockEditor.icon\n        dec.component = dec.blockEditor.render\n      })\n    decorators = validateDecorators(decorators, visitorContext, problems)\n  }\n\n  if (annotations && !Array.isArray(annotations)) {\n    problems.push(\n      error(`\"marks.annotations\" declaration should be an array, got ${getTypeOf(annotations)}`),\n    )\n  } else if (annotations) {\n    annotations = validateAnnotations(annotations, visitorContext, problems)\n  }\n\n  return {...marks, decorators, annotations}\n}\n\nfunction validateLists(lists, visitorContext, problems) {\n  if (!Array.isArray(lists)) {\n    problems.push(error(`\"lists\" declaration should be an array, got ${getTypeOf(lists)}`))\n    return problems\n  }\n\n  lists.forEach((list, index) => {\n    if (!isPlainObject(list)) {\n      problems.push(error(`List must be an object, got ${getTypeOf(list)}`))\n      return\n    }\n\n    const name = list.value || `#${index}`\n    const disallowedKeys = Object.keys(list).filter(\n      (key) => !allowedListKeys.includes(key) && !key.startsWith('_'),\n    )\n\n    if (disallowedKeys.length > 0) {\n      problems.push(\n        error(\n          `Found unknown properties for list ${name}: ${humanizeList(disallowedKeys.map(quote))}`,\n        ),\n      )\n    }\n\n    if (!list.value) {\n      problems.push(error(`List #${index} is missing required \"value\" property`))\n    } else if (typeof list.value !== 'string') {\n      problems.push(\n        error(\n          `List type #${index} has an invalid \"value\" property, expected string, got ${getTypeOf(\n            list.value,\n          )}`,\n        ),\n      )\n    } else if (!list.title) {\n      problems.push(warning(`List type ${name} is missing recommended \"title\" property`))\n    }\n  })\n  return lists\n}\n\nfunction validateStyles(styles, visitorContext, problems) {\n  if (!Array.isArray(styles)) {\n    problems.push(error(`\"styles\" declaration should be an array, got ${getTypeOf(styles)}`))\n    return problems\n  }\n\n  styles.forEach((style, index) => {\n    if (!isPlainObject(style)) {\n      problems.push(error(`Style must be an object, got ${getTypeOf(style)}`))\n      return\n    }\n\n    const name = style.value || `#${index}`\n    const disallowedKeys = Object.keys(style).filter(\n      (key) => !allowedStyleKeys.includes(key) && !key.startsWith('_'),\n    )\n\n    if (disallowedKeys.length > 0) {\n      problems.push(\n        error(\n          `Found unknown properties for style ${name}: ${humanizeList(disallowedKeys.map(quote))}`,\n        ),\n      )\n    }\n\n    if (!style.value) {\n      problems.push(error(`Style #${index} is missing required \"value\" property`))\n    } else if (typeof style.value !== 'string') {\n      problems.push(\n        error(\n          `Style #${index} has an invalid \"value\" property, expected string, got ${getTypeOf(\n            style.value,\n          )}`,\n        ),\n      )\n    } else if (!style.title) {\n      problems.push(warning(`Style ${name} is missing recommended \"title\" property`))\n    }\n    if (typeof style.blockEditor !== 'undefined') {\n      problems.push(\n        warning(\n          `Style has deprecated key \"blockEditor\", please refer to the documentation on how to configure the block type for version 3.`,\n          HELP_IDS.DEPRECATED_BLOCKEDITOR_KEY,\n        ),\n      )\n      // TODO remove this backward compatibility at some point.\n      style.component = style.component || style.blockEditor.render\n    }\n  })\n  return styles\n}\n\nfunction validateDecorators(decorators, visitorContext, problems) {\n  decorators.forEach((decorator, index) => {\n    if (!isPlainObject(decorator)) {\n      problems.push(error(`Annotation must be an object, got ${getTypeOf(decorator)}`))\n      return\n    }\n\n    const name = decorator.value || `#${index}`\n    const disallowedKeys = Object.keys(decorator).filter(\n      (key) => !allowedDecoratorKeys.includes(key) && !key.startsWith('_'),\n    )\n\n    if (disallowedKeys.length > 0) {\n      problems.push(\n        error(\n          `Found unknown properties for decorator ${name}: ${humanizeList(\n            disallowedKeys.map(quote),\n          )}`,\n        ),\n      )\n    }\n\n    if (!decorator.value) {\n      problems.push(error(`Decorator #${index} is missing required \"value\" property`))\n    } else if (typeof decorator.value !== 'string') {\n      problems.push(\n        error(\n          `Decorator #${index} has an invalid \"value\" property, expected string, got ${getTypeOf(\n            decorator.value,\n          )}`,\n        ),\n      )\n    } else if (!decorator.title) {\n      problems.push(warning(`Decorator ${name} is missing recommended \"title\" property`))\n    }\n    if (typeof decorator.blockEditor !== 'undefined') {\n      problems.push(\n        warning(\n          `Decorator \"${name}\" has deprecated key \"blockEditor\", please refer to the documentation on how to configure the block type for version 3.`,\n          HELP_IDS.DEPRECATED_BLOCKEDITOR_KEY,\n        ),\n      )\n      // TODO remove this backward compatibility at some point.\n      decorator.icon = decorator.icon || decorator.blockEditor.icon\n      decorator.component = decorator.component || decorator.blockEditor.render\n    }\n  })\n  return decorators\n}\n\nfunction validateAnnotations(annotations, visitorContext, problems) {\n  return annotations.map((annotation) => {\n    if (!isPlainObject(annotation)) {\n      return {\n        ...annotation,\n        _problems: [error(`Annotation must be an object, got ${getTypeOf(annotation)}`)],\n      }\n    }\n\n    const {_problems} = visitorContext.visit(annotation, visitorContext)\n    const targetType = annotation.type && visitorContext.getType(annotation.type)\n    if (targetType && !isJSONTypeOf(targetType, 'object', visitorContext)) {\n      _problems.push(\n        error(\n          `Annotation cannot have type \"${annotation.type}\" - annotation types must inherit from object`,\n        ),\n      )\n    }\n\n    if (typeof annotation.blockEditor !== 'undefined') {\n      problems.push(\n        warning(\n          `Annotation has deprecated key \"blockEditor\", please refer to the documentation on how to configure the block type for version 3.`,\n          HELP_IDS.DEPRECATED_BLOCKEDITOR_KEY,\n        ),\n      )\n      // TODO remove this backward compatibility at some point.\n      annotation.icon = annotation.icon || annotation.blockEditor.icon\n      if (annotation.blockEditor?.render && !annotation.components?.annotation) {\n        annotation.components = annotation.components || {}\n        annotation.components.annotation =\n          annotation.components.annotation || annotation.blockEditor.render\n      }\n    }\n\n    return {...annotation, _problems}\n  })\n}\n\nfunction validateMembers(members, visitorContext, problems) {\n  if (!Array.isArray(members)) {\n    problems.push(error(`\"of\" declaration should be an array, got ${getTypeOf(members)}`))\n    return undefined\n  }\n\n  return members.map((member) => {\n    const {_problems} = visitorContext.visit(member, visitorContext)\n    if (member.type === 'object' && member.name && visitorContext.getType(member.name)) {\n      return {\n        ...member,\n        _problems: [\n          warning(\n            `Found array member declaration with the same name as the global schema type \"${member.name}\". It's recommended to use a unique name to avoid possibly incompatible data types that shares the same name.`,\n            HELP_IDS.ARRAY_OF_TYPE_GLOBAL_TYPE_CONFLICT,\n          ),\n        ],\n      }\n    }\n\n    // Test that each member is of a support object-like type\n    let type = member\n    while (type && !type.jsonType) {\n      type = visitorContext.getType(type.type)\n    }\n    const nonObjectCoreTypes = coreTypeNames.filter((n) => !supportedBuiltInObjectTypes.includes(n))\n    if (\n      // Must be object-like type (to validate hoisted types)\n      (type && type.jsonType !== 'object') ||\n      // Can't be a core type, or core object type that isn't supported (like 'span')\n      nonObjectCoreTypes.some((coreName) => coreName === member.type)\n    ) {\n      return {\n        ...member,\n        _problems: [\n          error(\n            `Block member types must be a supported object-like type. The following built-in types are supported: '${supportedBuiltInObjectTypes.join(\n              \"', '\",\n            )}'. You can also use shorthands for previously defined object types like {type: 'myObjectType'}`,\n            HELP_IDS.ARRAY_OF_TYPE_BUILTIN_TYPE_CONFLICT,\n          ),\n        ],\n      }\n    }\n    return {...member, _problems}\n  })\n}\n","import {type SchemaType} from '@sanity/types'\n\nimport {type SchemaValidationResult} from '../../typedefs'\nimport {error} from '../createValidationResult'\n\nexport function validateNonObjectFieldsProp(\n  typeDef: SchemaType,\n  visitorContext,\n): SchemaValidationResult[] {\n  if (!('fields' in typeDef)) {\n    return []\n  }\n\n  let type = typeDef\n  while (type && !type.jsonType) {\n    type = visitorContext.getType(type.type)\n  }\n\n  if (type && type.jsonType !== 'object') {\n    return [error(`Type has propery \"fields\", but is not an object/document type.`)]\n  }\n\n  return []\n}\n","import humanize from 'humanize-list'\nimport leven from 'leven'\n\nimport {error, HELP_IDS} from '../createValidationResult'\n\nconst quote = (str) => `\"${str}\"`\n\nexport function validateTypeName(typeName: string, visitorContext) {\n  const possibleTypeNames = visitorContext.getTypeNames()\n\n  if (!typeName) {\n    return [error(`Type is missing a type.`, HELP_IDS.TYPE_MISSING_TYPE)]\n  }\n\n  if (typeof typeName !== 'string') {\n    return [\n      error(\n        `Type has an invalid \"type\"-property - should be a string.`,\n        HELP_IDS.TYPE_MISSING_TYPE,\n      ),\n    ]\n  }\n\n  const isValid = possibleTypeNames.includes(typeName)\n\n  if (!isValid) {\n    const suggestions = possibleTypeNames\n      .map((possibleTypeName) => {\n        return [leven(typeName, possibleTypeName), possibleTypeName]\n      })\n      .filter(([distance]) => distance < 3)\n      .map(([_, name]) => name)\n\n    const suggestion =\n      suggestions.length > 0\n        ? ` Did you mean ${humanize(suggestions.map(quote), {conjunction: 'or'})}?`\n        : ''\n\n    return [error(`Unknown type: ${typeName}.${suggestion}`)]\n  }\n  return []\n}\n","import {type SchemaValidationResult} from '../../typedefs'\nimport {warning} from '../createValidationResult'\n\nexport function validateDeprecatedProperties(type): SchemaValidationResult[] {\n  const warnings = []\n\n  if (type?.inputComponent) {\n    warnings.push(\n      warning(`The \"inputComponent\" property is deprecated. Use \"components.input\" instead.`),\n    )\n  }\n\n  if (type?.preview?.component) {\n    warnings.push(\n      warning(`The \"preview.component\" property is deprecated. Use \"components.preview\" instead.`),\n    )\n  }\n\n  if (type?.diffComponent) {\n    warnings.push(\n      warning(`The \"diffComponent\" property is deprecated. Use \"components.diff\" instead.`),\n    )\n  }\n\n  if (type?.options?.editModal) {\n    warnings.push(\n      warning(`The \"options.editModal\" property is deprecated. Use \"options.modal\" instead.`),\n    )\n  }\n\n  if (type?.options?.isHighlighted) {\n    warnings.push(\n      warning(\n        `The \"options.isHighlighted\" property is deprecated. You can put fields behind a collapsed fieldset if you want to hide them from plain sight.`,\n      ),\n    )\n  }\n\n  return warnings\n}\n","import {validateNonObjectFieldsProp} from '../utils/validateNonObjectFieldsProp'\nimport {validateTypeName} from '../utils/validateTypeName'\nimport {validateDeprecatedProperties} from './deprecated'\n\nexport default (typeDef, visitorContext) => {\n  return {\n    ...typeDef,\n    _problems: [\n      ...validateTypeName(typeDef.type, visitorContext),\n      ...validateNonObjectFieldsProp(typeDef, visitorContext),\n      ...validateDeprecatedProperties(typeDef),\n    ].filter(Boolean),\n  }\n}\n","import {flatten, isPlainObject} from 'lodash'\n\nimport {type SchemaValidationResult} from '../../typedefs'\nimport {error, HELP_IDS} from '../createValidationResult'\nimport {getDupes} from '../utils/getDupes'\n\nfunction normalizeToProp(typeDef) {\n  if (Array.isArray(typeDef.to)) {\n    return typeDef.to\n  }\n  return typeDef.to ? [typeDef.to] : typeDef.to\n}\n\nconst VALID_DATASET = /^[a-z0-9~][-_a-z0-9]+$/\nexport function isValidDatasetName(name: string): string | true {\n  const isValid = name.length >= 2 && name.toLowerCase() === name && VALID_DATASET.test(name)\n  return (\n    isValid ||\n    `The provided dataset \"${name}\" doesn't look like a valid dataset. Dataset names must be more than 2 characters, can only contain lowercase characters, numbers, underscores and dashes and can not start with a dash or an underscore`\n  )\n}\n\nexport default (typeDef, visitorContext) => {\n  const isValidTo = Array.isArray(typeDef.to) || isPlainObject(typeDef.to)\n  const normalizedTo = normalizeToProp(typeDef)\n\n  const problems = flatten([\n    isValidTo\n      ? getDupes(normalizedTo, (t) => `${t.name};${t.type}`).map((dupes) =>\n          error(\n            `Found ${dupes.length} members with same type, but not unique names \"${dupes[0].type}\" in reference. This makes it impossible to tell their values apart and you should consider naming them`,\n            HELP_IDS.CROSS_DATASET_REFERENCE_INVALID,\n          ),\n        )\n      : error(\n          'The cross dataset reference type is missing or having an invalid value for the required \"to\" property. It should be an array of accepted types.',\n          HELP_IDS.CROSS_DATASET_REFERENCE_INVALID,\n        ),\n  ])\n\n  if (isValidTo && normalizedTo.length === 0) {\n    problems.push(\n      error(\n        'The cross dataset reference type should define at least one referenced type. Please check the \"to\" property.',\n        HELP_IDS.CROSS_DATASET_REFERENCE_INVALID,\n      ),\n    )\n  }\n\n  normalizedTo.forEach((crossDatasetTypeDef, index) => {\n    if (!crossDatasetTypeDef.type) {\n      problems.push(\n        error(\n          `The referenced type at index ${index} must be named. Specify the name of the type you want to create references to.`,\n          HELP_IDS.CROSS_DATASET_REFERENCE_INVALID,\n        ),\n      )\n    }\n\n    if (!isPlainObject(crossDatasetTypeDef.preview)) {\n      problems.push(\n        error(\n          `Missing required preview config for the referenced type \"${\n            crossDatasetTypeDef.type || '<unknown type>'\n          }\"`,\n          HELP_IDS.CROSS_DATASET_REFERENCE_INVALID,\n        ),\n      )\n    }\n  })\n\n  if (typeof typeDef.dataset === 'string') {\n    const datasetValidation = isValidDatasetName(typeDef.dataset)\n    if (datasetValidation !== true) {\n      problems.push(error(datasetValidation, HELP_IDS.CROSS_DATASET_REFERENCE_INVALID))\n    }\n  } else {\n    problems.push(\n      error(\n        'A cross dataset reference must specify a `dataset`',\n        HELP_IDS.CROSS_DATASET_REFERENCE_INVALID,\n      ),\n    )\n  }\n\n  if (typeDef.studioUrl && typeof typeDef.studioUrl !== 'function') {\n    problems.push(\n      error(\n        'The \"studioUrl\" property on a cross dataset reference must be a function taking \"{id, type}\" as argument and returning a studio url.',\n        HELP_IDS.CROSS_DATASET_REFERENCE_INVALID,\n      ),\n    )\n  }\n\n  problems.push(...getOptionErrors(typeDef))\n\n  return {\n    ...typeDef,\n    _problems: problems,\n  }\n}\n\nfunction getOptionErrors(typeDef: any): SchemaValidationResult[] {\n  const {options} = typeDef\n  const problems = [] as SchemaValidationResult[]\n\n  problems.push(\n    ...['filter', 'filterParams']\n      .filter((key) => key in typeDef)\n      .map((key) =>\n        error(\n          `\\`${key}\\` is not allowed on a reference type definition - did you mean \\`options.${key}\\`?`,\n          HELP_IDS.REFERENCE_INVALID_OPTIONS_LOCATION,\n        ),\n      ),\n  )\n\n  if (!options) {\n    return problems\n  }\n\n  if (!isPlainObject(options)) {\n    return problems.concat(\n      error(\n        'The reference type expects `options` to be an object',\n        HELP_IDS.REFERENCE_INVALID_OPTIONS,\n      ),\n    )\n  }\n\n  if (typeof options.filter === 'function' && typeof options.filterParams !== 'undefined') {\n    return problems.concat(\n      error(\n        '`filterParams` cannot be used if `filter` is a function. Either statically define `filter` as a string, or return `params` from the `filter`-function.',\n        HELP_IDS.REFERENCE_INVALID_FILTER_PARAMS_COMBINATION,\n      ),\n    )\n  }\n\n  if (typeof options.filter === 'function' || (!options.filter && !options.filterParams)) {\n    return problems\n  }\n\n  if (typeof options.filter !== 'string') {\n    return problems.concat(\n      error(`If set, \\`filter\\` must be a string. Got ${typeof options.filter}`),\n    )\n  }\n\n  if (typeof options.filterParams !== 'undefined' && !isPlainObject(options.filterParams)) {\n    return problems.concat(error(`If set, \\`filterParams\\` must be an object.`))\n  }\n\n  if (options.filterParams) {\n    return problems.concat(\n      Object.keys(options.filterParams)\n        .filter((key) => key.startsWith('__') || key.startsWith('$'))\n        .map((key) => error(`Filter parameter cannot be prefixed with \"$\" or \"__\". Got ${key}\".`)),\n    )\n  }\n\n  return problems\n}\n","const REACT_SYM_RE = /^Symbol\\(react\\..+\\)$/\n\nexport function isComponentLike(value: any) {\n  const type = typeof value\n  // Note: we're not using `isValidElementType` from react-is here since it accepts too much, e.g. any strings.\n  return (\n    type === 'function' ||\n    (typeof value?.$$typeof === 'symbol' && REACT_SYM_RE.test(String(value?.$$typeof)))\n  )\n}\n","import inspect from '../../inspect'\nimport {type SchemaValidationResult} from '../../typedefs'\nimport {warning} from '../createValidationResult'\nimport {isComponentLike} from './isComponent'\n\nexport function validateComponent(typeDef: any): SchemaValidationResult[] {\n  const components = 'components' in typeDef ? typeDef.components : false\n  if (!components) {\n    return []\n  }\n\n  const warnings: SchemaValidationResult[] = []\n\n  if (components.input && !isComponentLike(components.input)) {\n    warnings.push(\n      warning(\n        `The \\`components.input\\` property is set but does not appear to be a valid React component (expected a function, but saw ${inspect(\n          components.input,\n        )}). If you have imported a custom input component, please verify that you have imported the correct named/default export.`,\n      ),\n    )\n  }\n\n  if (components.field && !isComponentLike(components.field)) {\n    warnings.push(\n      warning(\n        `The \\`components.field\\` property is set but does not appear to be a valid React component (expected a function, but saw ${inspect(\n          components.field,\n        )}). If you have imported a custom field component, please verify that you have imported the correct named/default export.`,\n      ),\n    )\n  }\n\n  if (components.item && !isComponentLike(components.item)) {\n    warnings.push(\n      warning(\n        `The \\`components.item\\` property is set but does not appear to be a valid React component (expected a function, but saw ${inspect(\n          components.item,\n        )}). If you have imported a custom item component, please verify that you have imported the correct named/default export.`,\n      ),\n    )\n  }\n\n  if (components.preview && !isComponentLike(components.preview)) {\n    warnings.push(\n      warning(\n        `The \\`components.preview\\` property is set but does not appear to be a valid React component (expected a function, but saw ${inspect(\n          components.preview,\n        )}). If you have imported a custom preview component, please verify that you have imported the correct named/default export.`,\n      ),\n    )\n  }\n\n  return warnings\n}\n","import {isPlainObject} from 'lodash'\n\nimport inspect from '../../inspect'\nimport {error, HELP_IDS, warning} from '../createValidationResult'\nimport {validateComponent} from '../utils/validateComponent'\n\nconst VALID_FIELD_RE = /^[A-Za-z]+[0-9A-Za-z_]*$/\nconst CONVENTIONAL_FIELD_RE = /^[A-Za-z_]+[0-9A-Za-z_]*$/\ninterface Field {\n  name: string\n}\n\ninterface PreviewConfig {\n  select?: {\n    [key: string]: string\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  prepare?: Function\n}\n\nfunction validateFieldName(name): Array<any> {\n  if (typeof name !== 'string') {\n    return [\n      error(\n        `Field names must be strings. Saw \"${inspect(name)}\"`,\n        HELP_IDS.OBJECT_FIELD_NAME_INVALID,\n      ),\n    ]\n  }\n  if (name.startsWith('_')) {\n    return [\n      error(\n        `Invalid field name \"${name}\". Field names cannot start with underscores \"_\" as it's reserved for system fields.`,\n        HELP_IDS.OBJECT_FIELD_NAME_INVALID,\n      ),\n    ]\n  }\n\n  if (!VALID_FIELD_RE.test(name)) {\n    return [\n      error(\n        `Invalid field name: \"${name}\". Fields can only contain characters from A-Z, numbers and underscores and should not start with a number (must pass the regular expression ${String(\n          VALID_FIELD_RE,\n        )}).`,\n        HELP_IDS.OBJECT_FIELD_NAME_INVALID,\n      ),\n    ]\n  }\n  if (!CONVENTIONAL_FIELD_RE.test(name)) {\n    return [\n      warning(\n        'Thats an interesting field name for sure! But it is... how to put it... a bit... unconventional?' +\n          ' It may be wise to keep special characters out of field names for easier access later on.',\n      ),\n      HELP_IDS.OBJECT_FIELD_NAME_INVALID,\n    ]\n  }\n  return []\n}\n\nexport function validateField(field, _visitorContext) {\n  if (!isPlainObject(field)) {\n    return [\n      error(\n        `Incorrect type for field definition - should be an object, saw ${inspect(field)}`,\n        HELP_IDS.OBJECT_FIELD_DEFINITION_INVALID_TYPE,\n      ),\n    ]\n  }\n\n  const problems = []\n  problems.push(\n    ...('name' in field\n      ? validateFieldName(field.name)\n      : [error('Missing field name', HELP_IDS.OBJECT_FIELD_NAME_INVALID)]),\n  )\n  problems.push(...validateComponent(field))\n  return problems\n}\n\nfunction getDuplicateFields(array: Array<Field>): Array<Array<Field>> {\n  const dupes: {[name: string]: Array<Field>} = {}\n  array.forEach((field) => {\n    if (!dupes[field.name]) {\n      dupes[field.name] = []\n    }\n    dupes[field.name].push(field)\n  })\n  return Object.keys(dupes)\n    .map((fieldName) => (dupes[fieldName].length > 1 ? dupes[fieldName] : null))\n    .filter(Boolean)\n}\n\nexport function validateFields(fields: any, options = {allowEmpty: false}) {\n  const problems = []\n  const fieldsIsArray = Array.isArray(fields)\n  if (!fieldsIsArray) {\n    return [\n      error(\n        `The \"fields\" property must be an array of fields. Instead saw \"${typeof fields}\"`,\n        HELP_IDS.OBJECT_FIELDS_INVALID,\n      ),\n    ]\n  }\n\n  const fieldsWithNames = fields.filter((field) => typeof field.name === 'string')\n\n  getDuplicateFields(fieldsWithNames).forEach((dupes) => {\n    problems.push(\n      error(\n        `Found ${dupes.length} fields with name \"${dupes[0].name}\" in object`,\n        HELP_IDS.OBJECT_FIELD_NOT_UNIQUE,\n      ),\n    )\n  })\n\n  if (fields.length === 0 && !options.allowEmpty) {\n    problems.push(error('Object should have at least one field', HELP_IDS.OBJECT_FIELDS_INVALID))\n  }\n\n  const standaloneBlockFields = fields\n    .filter((field) => field.type === 'block')\n    .map((field) => `\"${field.name}\"`)\n\n  if (standaloneBlockFields.length > 0) {\n    const fmtFields = standaloneBlockFields.join(', ')\n    problems.push(\n      error(\n        `Invalid standalone block field(s) ${fmtFields}. Block content must be defined as an array of blocks`,\n        HELP_IDS.STANDALONE_BLOCK_TYPE,\n      ),\n    )\n  }\n\n  return problems\n}\n\nexport function validatePreview(preview: PreviewConfig) {\n  if (!isPlainObject(preview)) {\n    return [error(`The \"preview\" property must be an object, instead saw \"${typeof preview}\"`)]\n  }\n\n  if (typeof preview.prepare !== 'undefined' && typeof preview.prepare !== 'function') {\n    return [\n      error(\n        `The \"preview.prepare\" property must be a function, instead saw \"${typeof preview.prepare}\"`,\n      ),\n    ]\n  }\n\n  if (!preview.select) {\n    return []\n  }\n\n  if (!isPlainObject(preview.select)) {\n    return [\n      error(\n        `The \"preview.select\" property must be an object, instead saw \"${typeof preview.prepare}\"`,\n      ),\n    ]\n  }\n\n  return Object.keys(preview.select).reduce((errs, key) => {\n    return typeof preview.select[key] === 'string'\n      ? errs\n      : errs.concat(\n          error(\n            `The key \"${key}\" of \"preview.select\" must be a string, instead saw \"${typeof preview\n              .select[key]}\"`,\n          ),\n        )\n  }, [])\n}\n\nexport default (typeDef, visitorContext) => {\n  let problems = validateFields(typeDef.fields)\n\n  let preview = typeDef.preview\n  if (preview) {\n    const previewErrors = validatePreview(typeDef.preview)\n    problems = problems.concat(previewErrors)\n    preview = previewErrors.some((err) => err.severity === 'error') ? {} : preview\n  }\n\n  if (\n    typeDef.type !== 'document' &&\n    typeDef.type !== 'object' &&\n    typeof typeDef.initialValue !== 'undefined'\n  ) {\n    problems.push(\n      error(`The \"initialValue\" property is currently only supported for document & object types.`),\n    )\n  }\n\n  return {\n    ...typeDef,\n    preview,\n    fields: (Array.isArray(typeDef.fields) ? typeDef.fields : []).map((field, index) => {\n      const {name, ...fieldTypeDef} = field\n      const {_problems, ...fieldType} = visitorContext.visit(fieldTypeDef, index)\n      return {\n        name,\n        ...fieldType,\n        _problems: validateField(field, visitorContext).concat(_problems || []),\n      }\n    }),\n    _problems: problems,\n  }\n}\n","import {isPlainObject} from 'lodash'\n\nimport {error} from '../createValidationResult'\nimport object from './object'\n\nexport default (typeDefinition, visitorContext) => {\n  const typeDef = object(typeDefinition, visitorContext)\n  const {initialValue, initialValues} = typeDef\n\n  const hasInitialValue = typeof initialValue !== 'undefined'\n  if (hasInitialValue && !isPlainObject(initialValue) && typeof initialValue !== 'function') {\n    typeDef._problems.push(\n      error(`The \"initialValue\" property must be either a plain object or a function`),\n    )\n  }\n\n  if (typeof initialValues !== 'undefined') {\n    typeDef._problems.push(error(`Found property \"initialValues\" - did you mean \"initialValue\"?`))\n  }\n\n  return typeDef\n}\n","import {error, HELP_IDS} from '../createValidationResult'\nimport {validateField, validateFields} from './object'\n\nexport default (typeDef, visitorContext) => {\n  const problems = []\n  const fields = typeDef.fields\n\n  if (fields) {\n    problems.push(...validateFields(fields, {allowEmpty: true}))\n  }\n\n  const invalidFieldNames = Array.isArray(fields)\n    ? fields?.filter((field) => field.name === 'asset')\n    : []\n\n  if (\n    typeDef.options &&\n    typeof typeDef.options.metadata !== 'undefined' &&\n    !Array.isArray(typeDef.options.metadata)\n  ) {\n    problems.push(\n      error(\n        `Invalid type for file \\`metadata\\` field - must be an array of strings`,\n        HELP_IDS.ASSET_METADATA_FIELD_INVALID,\n      ),\n    )\n  } else if (invalidFieldNames.length > 0) {\n    problems.push(error('The name `asset` is not a valid field name for type `file`.'))\n  }\n\n  return {\n    ...typeDef,\n    fields: (Array.isArray(fields) ? fields : []).map((field, index) => {\n      const {name, ...fieldTypeDef} = field\n      const {_problems, ...fieldType} = visitorContext.visit(fieldTypeDef, index)\n      return {\n        name,\n        ...fieldType,\n        _problems: validateField(field, visitorContext).concat(_problems || []),\n      }\n    }),\n    _problems: problems,\n  }\n}\n","import {error, HELP_IDS, warning} from '../createValidationResult'\nimport {validateField, validateFields} from './object'\n\nconst autoMeta = ['dimensions', 'hasAlpha', 'isOpaque']\n\nexport default (typeDef, visitorContext) => {\n  const problems = []\n  const fields = typeDef.fields\n\n  if (fields) {\n    problems.push(...validateFields(fields, {allowEmpty: true}))\n  }\n\n  let options = typeDef.options\n  const metadata = options?.metadata\n  const superfluousMeta = Array.isArray(metadata)\n    ? metadata.filter((meta) => autoMeta.includes(meta))\n    : []\n\n  const invalidFieldNames = ['asset', 'hotspot', 'crop']\n\n  const fieldsWithInvalidName = Array.isArray(fields)\n    ? fields?.filter((field) => invalidFieldNames.includes(field.name))\n    : []\n\n  if (typeof metadata !== 'undefined' && !Array.isArray(metadata)) {\n    problems.push(\n      error(\n        `Invalid type for image \\`metadata\\` field - must be an array of strings`,\n        HELP_IDS.ASSET_METADATA_FIELD_INVALID,\n      ),\n    )\n  } else if (superfluousMeta.length > 0) {\n    problems.push(\n      warning(\n        `Image \\`metadata\\` field contains superfluous properties (they are always included): ${superfluousMeta.join(\n          ', ',\n        )}`,\n      ),\n    )\n    options = {...options, metadata: metadata.filter((meta) => !autoMeta.includes(meta))}\n  } else if (fieldsWithInvalidName.length > 0) {\n    problems.push(\n      error(\n        `The names \\`${invalidFieldNames.join(\n          '`, `',\n        )}\\` are invalid field names for type \\`image\\`.`,\n      ),\n    )\n  }\n\n  return {\n    ...typeDef,\n    options,\n    fields: (Array.isArray(fields) ? fields : []).map((field, index) => {\n      const {name, ...fieldTypeDef} = field\n      const {_problems, ...fieldType} = visitorContext.visit(fieldTypeDef, index)\n      return {\n        name,\n        ...fieldType,\n        _problems: validateField(field, visitorContext).concat(_problems || []),\n      }\n    }),\n    _problems: problems,\n  }\n}\n","import {flatten, isPlainObject} from 'lodash'\n\nimport {type SchemaValidationResult} from '../../typedefs'\nimport {error, HELP_IDS} from '../createValidationResult'\nimport {getDupes} from '../utils/getDupes'\n\nfunction normalizeToProp(typeDef) {\n  if (Array.isArray(typeDef.to)) {\n    return typeDef.to\n  }\n  return typeDef.to ? [typeDef.to] : typeDef.to\n}\n\nexport default (typeDef, visitorContext) => {\n  const isValidTo = Array.isArray(typeDef.to) || isPlainObject(typeDef.to)\n  const normalizedTo = normalizeToProp(typeDef)\n\n  const problems = flatten([\n    isValidTo\n      ? getDupes(normalizedTo, (t) => `${t.name};${t.type}`).map((dupes) =>\n          error(\n            `Found ${dupes.length} members with same type, but not unique names \"${dupes[0].type}\" in reference. This makes it impossible to tell their values apart and you should consider naming them`,\n            HELP_IDS.REFERENCE_TO_INVALID,\n          ),\n        )\n      : error(\n          'The reference type is missing or having an invalid value for the required \"to\" property. It should be an array of accepted types.',\n          HELP_IDS.REFERENCE_TO_INVALID,\n        ),\n  ])\n\n  if (isValidTo && normalizedTo.length === 0) {\n    problems.push(\n      error(\n        'The reference type should define at least one accepted type. Please check the \"to\" property.',\n        HELP_IDS.REFERENCE_TO_INVALID,\n      ),\n    )\n  }\n\n  problems.push(...getOptionErrors(typeDef))\n\n  return {\n    ...typeDef,\n    to: (isValidTo ? normalizedTo : []).map(visitorContext.visit),\n    _problems: problems,\n  }\n}\n\nfunction getOptionErrors(typeDef: any): SchemaValidationResult[] {\n  const {options} = typeDef\n  const problems = [] as SchemaValidationResult[]\n\n  problems.push(\n    ...['filter', 'filterParams']\n      .filter((key) => key in typeDef)\n      .map((key) =>\n        error(\n          `\\`${key}\\` is not allowed on a reference type definition - did you mean \\`options.${key}\\`?`,\n          HELP_IDS.REFERENCE_INVALID_OPTIONS_LOCATION,\n        ),\n      ),\n  )\n\n  if (!options) {\n    return problems\n  }\n\n  if (!isPlainObject(options)) {\n    return problems.concat(\n      error(\n        'The reference type expects `options` to be an object',\n        HELP_IDS.REFERENCE_INVALID_OPTIONS,\n      ),\n    )\n  }\n\n  if (typeof options.filter === 'function' && typeof options.filterParams !== 'undefined') {\n    return problems.concat(\n      error(\n        '`filterParams` cannot be used if `filter` is a function. Either statically define `filter` as a string, or return `params` from the `filter`-function.',\n        HELP_IDS.REFERENCE_INVALID_FILTER_PARAMS_COMBINATION,\n      ),\n    )\n  }\n\n  if (typeof options.filter === 'function' || (!options.filter && !options.filterParams)) {\n    return problems\n  }\n\n  if (typeof options.filter !== 'string') {\n    return problems.concat(\n      error(`If set, \\`filter\\` must be a string. Got ${typeof options.filter}`),\n    )\n  }\n\n  if (typeof options.filterParams !== 'undefined' && !isPlainObject(options.filterParams)) {\n    return problems.concat(error(`If set, \\`filterParams\\` must be an object.`))\n  }\n\n  if (options.filterParams) {\n    return problems.concat(\n      Object.keys(options.filterParams)\n        .filter((key) => key.startsWith('__') || key.startsWith('$'))\n        .map((key) => error(`Filter parameter cannot be prefixed with \"$\" or \"__\". Got ${key}\".`)),\n    )\n  }\n\n  return problems\n}\n","import {error, HELP_IDS, warning} from '../createValidationResult'\nimport {validateComponent} from '../utils/validateComponent'\n\nexport default (typeDef, visitorContext) => {\n  const hasName = Boolean(typeDef.name)\n  if (!hasName && Object.keys(typeDef).length === 1) {\n    // Short-circuit on obviously invalid types (only key is _problems)\n    return {\n      ...typeDef,\n      _problems: [\n        error(\n          'Invalid/undefined type declaration, check declaration or the import/export of the schema type.',\n          HELP_IDS.TYPE_INVALID,\n        ),\n      ],\n    }\n  }\n\n  const problems = []\n  if (looksLikeEsmModule(typeDef)) {\n    problems.push(\n      error(\n        'Type appears to be an ES6 module imported through CommonJS require - use an import statement or access the `.default` property',\n        HELP_IDS.TYPE_IS_ESM_MODULE,\n      ),\n    )\n  } else if (!hasName) {\n    problems.push(error('Missing type name', HELP_IDS.TYPE_MISSING_NAME))\n  } else if (visitorContext.isReserved(typeDef.name)) {\n    problems.push(\n      error(\n        `Invalid type name: \"${typeDef.name}\" is a reserved name.`,\n        HELP_IDS.TYPE_NAME_RESERVED,\n      ),\n    )\n  }\n\n  if (visitorContext.isDuplicate(typeDef.name)) {\n    problems.push(\n      error(\n        `Invalid type name: A type with name \"${typeDef.name}\" is already defined in the schema.`,\n      ),\n    )\n  }\n\n  problems.push(...validateComponent(typeDef))\n\n  if ('title' in typeDef && typeof typeDef.title !== 'string') {\n    problems.push(warning('Type title is not a string.', HELP_IDS.TYPE_TITLE_INVALID))\n  }\n  return {\n    ...typeDef,\n    _problems: problems,\n  }\n}\n\nfunction looksLikeEsmModule(typeDef) {\n  return !typeDef.name && typeDef.default && (typeDef.default.name || typeDef.default.title)\n}\n","import {HELP_IDS, warning} from '../createValidationResult'\n\nexport default (typeDef, visitorContext) => {\n  const problems = []\n\n  if (typeDef.options && typeDef.options.slugifyFn) {\n    problems.push(\n      warning(\n        'Heads up! The \"slugifyFn\" option has been renamed to \"slugify\".',\n        HELP_IDS.SLUG_SLUGIFY_FN_RENAMED,\n      ),\n    )\n\n    typeDef.options.slugify = typeDef.options.slugifyFn\n  }\n\n  return {\n    ...typeDef,\n    _problems: problems,\n  }\n}\n","import {traverseSanitySchema} from './traverseSchema'\nimport {type _FIXME_} from './typedefs'\nimport array from './validation/types/array'\nimport block from './validation/types/block'\nimport common from './validation/types/common'\nimport crossDatasetReference from './validation/types/crossDatasetReference'\nimport documentVisitor from './validation/types/document'\nimport file from './validation/types/file'\nimport image from './validation/types/image'\nimport object from './validation/types/object'\nimport reference from './validation/types/reference'\nimport rootType from './validation/types/rootType'\nimport slug from './validation/types/slug'\n\nconst typeVisitors = {\n  array,\n  object,\n  slug,\n  file,\n  image,\n  block,\n  document: documentVisitor,\n  reference: reference,\n  crossDatasetReference: crossDatasetReference,\n}\n\nconst getNoopVisitor = (visitorContext) => (schemaDef) => ({\n  name: `<unnamed_type_@_index_${visitorContext.index}>`,\n  ...schemaDef,\n  _problems: [],\n})\n\nfunction combine(...visitors) {\n  return (schemaType, visitorContext) => {\n    return visitors.reduce(\n      (result, visitor) => {\n        const res = visitor(result, visitorContext)\n        return {\n          ...res,\n          _problems: result._problems.concat(res._problems),\n        }\n      },\n      {_problems: [], ...schemaType},\n    )\n  }\n}\n\n/**\n * @internal\n */\nexport function validateSchema(schemaTypes: _FIXME_) {\n  return traverseSanitySchema(schemaTypes, (schemaDef, visitorContext) => {\n    const typeVisitor =\n      (schemaDef && schemaDef.type && typeVisitors[schemaDef.type]) ||\n      getNoopVisitor(visitorContext)\n\n    if (visitorContext.isRoot) {\n      return combine(rootType, common, typeVisitor)(schemaDef, visitorContext)\n    }\n\n    return combine(common, typeVisitor)(schemaDef, visitorContext)\n  })\n}\n"],"names":["ACTIONS_FLAG","DEFAULT_ACTIONS","VALID_ACTIONS","readActions","schemaType","validateActions","typeName","actions","Array","isArray","Error","concat","join","invalid","difference","length","resolveEnabledActions","name","isActionEnabled","action","includes","HELP_IDS","TYPE_INVALID","TYPE_IS_ESM_MODULE","TYPE_NAME_RESERVED","TYPE_MISSING_NAME","TYPE_MISSING_TYPE","TYPE_TITLE_RECOMMENDED","TYPE_TITLE_INVALID","OBJECT_FIELDS_INVALID","OBJECT_FIELD_NOT_UNIQUE","OBJECT_FIELD_NAME_INVALID","OBJECT_FIELD_DEFINITION_INVALID_TYPE","ARRAY_PREDEFINED_CHOICES_INVALID","ARRAY_OF_ARRAY","ARRAY_OF_INVALID","ARRAY_OF_NOT_UNIQUE","ARRAY_OF_TYPE_GLOBAL_TYPE_CONFLICT","ARRAY_OF_TYPE_BUILTIN_TYPE_CONFLICT","REFERENCE_TO_INVALID","REFERENCE_TO_NOT_UNIQUE","REFERENCE_INVALID_OPTIONS","REFERENCE_INVALID_OPTIONS_LOCATION","REFERENCE_INVALID_FILTER_PARAMS_COMBINATION","SLUG_SLUGIFY_FN_RENAMED","ASSET_METADATA_FIELD_INVALID","CROSS_DATASET_REFERENCE_INVALID","DEPRECATED_BLOCKEDITOR_KEY","STANDALONE_BLOCK_TYPE","createValidationResult","severity","message","helpId","Object","keys","some","id","error","warning","groupProblems","types","flatten","map","type","getTypeProblems","filter","problems","createTypeWithMembersProblemsAccessor","memberPropertyName","getMembers","arguments","undefined","get","getProblems","parentPath","currentPath","kind","members","memberProblems","memberType","propertySegment","memberPath","path","_problems","arrify","val","getObjectProblems","getImageProblems","getFileProblems","getArrayProblems","getReferenceProblems","to","getBlockAnnotationProblems","getBlockMemberProblems","getBlockProblems","getDefaultProblems","getDupes","array","selector","v","dupes","reduce","acc","item","key","push","Boolean","NOOP_VISITOR","typeDef","TYPE_TYPE","FUTURE_RESERVED","traverseSchema","coreTypes","visitor","coreTypesRegistry","create","registry","coreTypeNames","reservedTypeNames","typeNames","forEach","coreType","i","getType","duplicateNames","uniq","isDuplicate","getTypeNames","isReserved","visitType","isRoot","index","visit","coreTypeDef","assign","res","has","getTypes","toJSON","jsonType","t","traverseSanitySchema","schemaTypes","isPrimitiveTypeName","isAssignable","quote","n","pluralize","arr","suf","format","value","visitorContext","_a","_b","_c","ofIsArray","of","errs","def","idx","err","hasObjectTypesWithoutName","hasBlockType","ofType","primitiveTypes","objectTypes","partition","isMixedArray","primitiveTypeNames","objectTypeNames","humanizeList","list","options","isArrayOfPrimitives","option","isDeclared","primitiveType","formattedTypeList","conjunction","optionTypeName","_type","validObjectType","layout","isJSONTypeOf","parentType","getTypeOf","thing","str","allowedKeys","allowedMarkKeys","allowedStyleKeys","allowedDecoratorKeys","allowedListKeys","supportedBuiltInObjectTypes","validateBlockType","styles","lists","marks","disallowedKeys","startsWith","validateMarks","validateStyles","validateLists","validateMembers","omit","decorators","annotations","isPlainObject","disallowedMarkKeys","dec","blockEditor","icon","component","render","validateDecorators","validateAnnotations","title","style","decorator","annotation","targetType","components","member","nonObjectCoreTypes","coreName","validateNonObjectFieldsProp","validateTypeName","possibleTypeNames","isValid","suggestions","possibleTypeName","leven","_ref","distance","_ref2","_","suggestion","humanize","validateDeprecatedProperties","warnings","inputComponent","preview","diffComponent","editModal","isHighlighted","common","normalizeToProp","VALID_DATASET","isValidDatasetName","toLowerCase","test","crossDatasetReference","isValidTo","normalizedTo","crossDatasetTypeDef","dataset","datasetValidation","studioUrl","getOptionErrors","filterParams","REACT_SYM_RE","isComponentLike","$$typeof","String","validateComponent","input","inspect","field","VALID_FIELD_RE","CONVENTIONAL_FIELD_RE","validateFieldName","validateField","_visitorContext","getDuplicateFields","fieldName","validateFields","fields","allowEmpty","fieldsIsArray","fieldsWithNames","standaloneBlockFields","fmtFields","validatePreview","prepare","select","object","previewErrors","initialValue","fieldTypeDef","fieldType","documentVisitor","typeDefinition","initialValues","hasInitialValue","file","invalidFieldNames","metadata","autoMeta","image","superfluousMeta","meta","fieldsWithInvalidName","reference","rootType","hasName","looksLikeEsmModule","default","slug","slugifyFn","slugify","typeVisitors","block","document","getNoopVisitor","schemaDef","combine","_len","visitors","_key","result","validateSchema","typeVisitor"],"mappings":"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"}