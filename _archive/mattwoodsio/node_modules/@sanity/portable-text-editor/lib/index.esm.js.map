{"version":3,"file":"index.esm.js","sources":["../src/utils/debug.ts","../src/utils/paths.ts","../src/utils/ranges.ts","../src/utils/selection.ts","../src/editor/hooks/usePortableTextEditorKeyGenerator.ts","../src/utils/values.ts","../src/utils/weakMaps.ts","../src/editor/nodes/DefaultObject.tsx","../src/editor/nodes/index.ts","../src/editor/components/DraggableBlock.tsx","../src/editor/components/Element.tsx","../src/editor/hooks/usePortableTextEditor.ts","../src/editor/nodes/DefaultAnnotation.tsx","../src/utils/getPortableTextMemberSchemaTypes.ts","../src/utils/schema.ts","../../../../node_modules/.pnpm/@sanity+diff-match-patch@3.1.1/node_modules/@sanity/diff-match-patch/dist/index.js","../src/patch/patches.ts","../src/utils/operationToPatches.ts","../src/editor/plugins/createWithPortableTextMarkModel.ts","../src/editor/plugins/createWithEditableAPI.ts","../src/editor/plugins/createWithMaxBlocks.ts","../src/utils/withPreserveKeys.ts","../src/editor/plugins/createWithObjectKeys.ts","../src/patch/arrayInsert.ts","../src/patch/array.ts","../src/patch/object.ts","../src/patch/primitive.ts","../src/patch/string.ts","../src/patch/applyPatch.ts","../src/utils/applyPatch.ts","../src/utils/withChanges.ts","../src/utils/withoutPatching.ts","../src/editor/plugins/createWithUndoRedo.ts","../src/editor/plugins/createWithPatches.ts","../src/editor/plugins/createWithPlaceholderBlock.ts","../src/editor/plugins/createWithPortableTextBlockStyle.ts","../src/editor/plugins/createWithPortableTextLists.ts","../src/editor/plugins/createWithPortableTextSelections.ts","../src/editor/plugins/createWithSchemaTypes.ts","../src/editor/plugins/createWithUtils.ts","../src/editor/plugins/createWithHotKeys.ts","../src/utils/validateValue.ts","../src/editor/plugins/createWithInsertData.ts","../src/editor/plugins/index.ts","../src/editor/components/SlateContainer.tsx","../src/editor/hooks/usePortableTextEditorSelection.ts","../src/editor/hooks/usePortableTextEditorValue.ts","../src/editor/hooks/usePortableTextReadOnly.ts","../src/editor/hooks/useSyncValue.ts","../src/editor/components/Synchronizer.tsx","../src/editor/PortableTextEditor.tsx","../src/editor/components/Leaf.tsx","../src/editor/hooks/useForwardedRef.ts","../src/editor/Editable.tsx","../src/utils/patches.ts"],"sourcesContent":["import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import {isKeySegment, type Path} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {type Descendant, Editor, Element, type Path as SlatePath, type Point} from 'slate'\n\nimport {type EditorSelectionPoint, type PortableTextMemberSchemaTypes} from '../types/editor'\nimport {type ObjectWithKeyAndType} from './ranges'\n\nexport function createKeyedPath(\n  point: Point,\n  value: ObjectWithKeyAndType[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n): Path | null {\n  const blockPath = [point.path[0]]\n  if (!value) {\n    return null\n  }\n  const block = value[blockPath[0]]\n  if (!block) {\n    return null\n  }\n  const keyedBlockPath = [{_key: block._key}]\n  if (block._type !== types.block.name) {\n    return keyedBlockPath as Path\n  }\n  let keyedChildPath\n  const childPath = point.path.slice(0, 2)\n  const child = Array.isArray(block.children) && block.children[childPath[1]]\n  if (child) {\n    keyedChildPath = ['children', {_key: child._key}]\n  }\n  return (keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath) as Path\n}\n\nexport function createArrayedPath(point: EditorSelectionPoint, editor: Editor): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) => isKeySegment(point.path[0]) && (n as Descendant)._key === point.path[0]._key,\n    }),\n  )[0] || [undefined, undefined]\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n  if (editor.isVoid(block)) {\n    return [blockPath[0], 0]\n  }\n  const childPath = [point.path[2]]\n  const childIndex = block.children.findIndex((child) => isEqual([{_key: child._key}], childPath))\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n  return blockPath\n}\n","import {type BaseRange, type Editor, Range} from 'slate'\n\nimport {\n  type EditorSelection,\n  type EditorSelectionPoint,\n  type PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {createArrayedPath, createKeyedPath} from './paths'\n\nexport interface ObjectWithKeyAndType {\n  _key: string\n  _type: string\n  children?: ObjectWithKeyAndType[]\n}\n\nexport function toPortableTextRange(\n  value: ObjectWithKeyAndType[] | undefined,\n  range: BaseRange | Partial<BaseRange> | null,\n  types: PortableTextMemberSchemaTypes,\n): EditorSelection {\n  if (!range) {\n    return null\n  }\n  let anchor: EditorSelectionPoint | null = null\n  let focus: EditorSelectionPoint | null = null\n  const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types)\n  if (anchorPath && range.anchor) {\n    anchor = {\n      path: anchorPath,\n      offset: range.anchor.offset,\n    }\n  }\n  const focusPath = range.focus && createKeyedPath(range.focus, value, types)\n  if (focusPath && range.focus) {\n    focus = {\n      path: focusPath,\n      offset: range.focus.offset,\n    }\n  }\n  const backward = Boolean(Range.isRange(range) ? Range.isBackward(range) : undefined)\n  return anchor && focus ? {anchor, focus, backward} : null\n}\n\nexport function toSlateRange(selection: EditorSelection, editor: Editor): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: createArrayedPath(selection.anchor, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: createArrayedPath(selection.focus, editor),\n    offset: selection.focus.offset,\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n","import {type Path, type PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\n\nimport {type EditorSelection, type EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' && '_key' in point.path[0] && point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' && '_key' in point.path[2] && point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find((blk) => blk._key === blockKey)\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (!block.children || (Array.isArray(block.children) && block.children.length === 0)) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) && block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (anchor && value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import {randomKey} from '@sanity/util/content'\nimport {createContext, useContext} from 'react'\n\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\n/**\n * A React context for sharing the editor's keyGenerator.\n */\nexport const PortableTextEditorKeyGeneratorContext =\n  createContext<() => string>(defaultKeyGenerator)\n\n/**\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorKeyGenerator = (): (() => string) => {\n  const keyGenerator = useContext(PortableTextEditorKeyGeneratorContext)\n\n  if (keyGenerator === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorKeyGenerator\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return keyGenerator\n}\n","import {\n  type PathSegment,\n  type PortableTextBlock,\n  type PortableTextChild,\n  type PortableTextObject,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {type Descendant, Element, type Node, Text} from 'slate'\n\nimport {defaultKeyGenerator as keyGenerator} from '../editor/hooks/usePortableTextEditorKeyGenerator'\nimport {type PortableTextMemberSchemaTypes} from '../types/editor'\n\nconst EMPTY_MARKDEFS: PortableTextObject[] = []\nconst EMPTY_MARKS: string[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: PortableTextMemberSchemaTypes},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const voidChildren = [{_key: VOID_CHILD_KEY, _type: 'span', text: '', marks: []}]\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = hasMissingChildren\n          ? [{_type: schemaTypes.span.name, _key: keyGenerator(), text: '', marks: []}]\n          : textBlock.children.map((child) => {\n              const {_type: cType, _key: cKey, ...cRest} = child\n              // Return 'slate' version of inline object where the actual\n              // value is stored in the `value` property.\n              // In slate, inline objects are represented as regular\n              // children with actual text node in order to be able to\n              // be selected the same way as the rest of the (text) content.\n              if (cType !== 'span') {\n                hasInlines = true\n                return keepObjectEquality(\n                  {\n                    _type: cType,\n                    _key: cKey,\n                    children: voidChildren,\n                    value: cRest,\n                    __inline: true,\n                  },\n                  keyMap,\n                )\n              }\n              // If this is a span, and it's missing 'marks', add an empty marks array\n              if (cType === 'span' && !('marks' in cRest)) {\n                return keepObjectEquality(\n                  {_key: cKey, _type: cType, ...cRest, marks: EMPTY_MARKS},\n                  keyMap,\n                )\n              }\n              // Original child object (span)\n              return child\n            })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].value\n        }\n        if (hasMissingMarkDefs) {\n          rest.markDefs = EMPTY_MARKDEFS\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: voidChildren,\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (_type === textBlockType && 'children' in block && Array.isArray(block.children) && _key) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {value: v, _key: k, _type: t, __inline: _i, children: _c, ...rest} = child\n          return keepObjectEquality({...rest, ...v, _key: k as string, _type: t as string}, keyMap)\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality({...block, children, _key, _type}, keyMap) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].value &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[],\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) => Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment),\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element,\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) => isEqual({_key: child._key}, secondPathSegment))\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[],\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import {type Editor, type Element, type Range} from 'slate'\n\nimport {type EditorSelection} from '..'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> = new WeakMap()\n// Is the editor currently producing local changes that are not yet submitted?\nexport const IS_PROCESSING_LOCAL_CHANGES: WeakMap<Editor, boolean> = new WeakMap()\n\n// Is the editor dragging something?\nexport const IS_DRAGGING: WeakMap<Editor, boolean> = new WeakMap()\n// Is the editor dragging a element?\nexport const IS_DRAGGING_BLOCK_ELEMENT: WeakMap<Editor, Element> = new WeakMap()\n\n// When dragging elements, this will be the target element\nexport const IS_DRAGGING_ELEMENT_TARGET: WeakMap<Editor, Element> = new WeakMap()\n// Target position for dragging over a block\nexport const IS_DRAGGING_BLOCK_TARGET_POSITION: WeakMap<Editor, 'top' | 'bottom'> = new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> = new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> = new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<Range, EditorSelection>()\n","import {type PortableTextBlock, type PortableTextChild} from '@sanity/types'\n\ntype Props = {\n  value: PortableTextBlock | PortableTextChild\n}\n\nconst DefaultObject = (props: Props): JSX.Element => {\n  return (\n    <div>\n      <pre>{JSON.stringify(props.value, null, 2)}</pre>\n    </div>\n  )\n}\n\nexport default DefaultObject\n","import styled from 'styled-components'\n\nexport const DefaultBlockObject = styled.div<{selected: boolean}>`\n  user-select: none;\n  border: ${(props) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\nexport const DefaultInlineObject = styled.span<{selected: boolean}>`\n  background: #999;\n  border: ${(props) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\ntype ListItemProps = {listLevel: number; listStyle: string}\n\nexport const DefaultListItem = styled.div<ListItemProps>`\n  &.pt-list-item {\n    width: fit-content;\n    position: relative;\n    display: block;\n\n    /* Important 'transform' in order to force refresh the ::before and ::after rules\n      in Webkit: https://stackoverflow.com/a/21947628/831480\n    */\n    transform: translateZ(0);\n    margin-left: ${(props: ListItemProps) => getLeftPositionForListLevel(props.listLevel)};\n  }\n  &.pt-list-item > .pt-list-item-inner {\n    display: flex;\n    margin: 0;\n    padding: 0;\n    &:before {\n      justify-content: flex-start;\n      vertical-align: top;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner:before {\n      content: '${(props: ListItemProps) =>\n        getContentForListLevelAndStyle(props.listLevel, props.listStyle)}';\n      font-size: 0.4375rem; /* 7px */\n      line-height: 1.5rem; /* Same as body text */\n      /* Optical alignment */\n      position: relative;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner {\n    &:before {\n      min-width: 1.5rem; /* Make sure space between bullet and text never shrinks */\n    }\n  }\n  &.pt-list-item-number {\n    counter-increment: ${(props: {listLevel: number}) =>\n      getCounterIncrementForListLevel(props.listLevel)};\n    counter-reset: ${(props: {listLevel: number}) => getCounterResetForListLevel(props.listLevel)};\n  }\n  & + :not(.pt-list-item-number) {\n    counter-reset: listItemNumber;\n  }\n  &.pt-list-item-number > .pt-list-item-inner:before {\n    content: ${(props) => getCounterContentForListLevel(props.listLevel)};\n    min-width: 1.5rem; /* Make sure space between number and text never shrinks */\n    /* Optical alignment */\n    position: relative;\n    top: 1px;\n  }\n`\n\nexport const DefaultListItemInner = styled.div``\n\nfunction getLeftPositionForListLevel(level: number) {\n  switch (Number(level)) {\n    case 1:\n      return '1.5em'\n    case 2:\n      return '3em'\n    case 3:\n      return '4.5em'\n    case 4:\n      return '6em'\n    case 5:\n      return '7.5em'\n    case 6:\n      return '9em'\n    case 7:\n      return '10.5em'\n    case 8:\n      return '12em'\n    case 9:\n      return '13.5em'\n    case 10:\n      return '15em'\n    default:\n      return '0em'\n  }\n}\n\nconst bullets = ['●', '○', '■']\n\nfunction getContentForListLevelAndStyle(level: number, style: string) {\n  const normalizedLevel = (level - 1) % 3\n  if (style === 'bullet') {\n    return bullets[normalizedLevel]\n  }\n  return '*'\n}\n\nfunction getCounterIncrementForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemNumber'\n    case 2:\n      return 'listItemAlpha'\n    case 3:\n      return 'listItemRoman'\n    case 4:\n      return 'listItemNumberNext'\n    case 5:\n      return 'listItemLetterNext'\n    case 6:\n      return 'listItemRomanNext'\n    case 7:\n      return 'listItemNumberNextNext'\n    case 8:\n      return 'listItemAlphaNextNext'\n    case 9:\n      return 'listItemRomanNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterResetForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemAlpha'\n    case 2:\n      return 'listItemRoman'\n    case 3:\n      return 'listItemNumberNext'\n    case 4:\n      return 'listItemLetterNext'\n    case 5:\n      return 'listItemRomanNext'\n    case 6:\n      return 'listItemNumberNextNext'\n    case 7:\n      return 'listItemAlphaNextNext'\n    case 8:\n      return 'listItemRomanNextNext'\n    case 9:\n      return 'listItemNumberNextNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterContentForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return `counter(listItemNumber) '. '`\n    case 2:\n      return `counter(listItemAlpha, lower-alpha) '. '`\n    case 3:\n      return `counter(listItemRoman, lower-roman) '. '`\n    case 4:\n      return `counter(listItemNumberNext) '. '`\n    case 5:\n      return `counter(listItemLetterNext, lower-alpha) '. '`\n    case 6:\n      return `counter(listItemRomanNext, lower-roman) '. '`\n    case 7:\n      return `counter(listItemNumberNextNext) '. '`\n    case 8:\n      return `counter(listItemAlphaNextNext, lower-alpha) '. '`\n    case 9:\n      return `counter(listItemRomanNextNext, lower-roman) '. '`\n    default:\n      return `counter(listItemNumberNextNextNext) '. '`\n  }\n}\n","import {\n  type DragEvent,\n  type MutableRefObject,\n  type ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {Editor, type Element as SlateElement, Path, Transforms} from 'slate'\nimport {ReactEditor, useSlateStatic} from 'slate-react'\n\nimport {debugWithName} from '../../utils/debug'\nimport {\n  IS_DRAGGING,\n  IS_DRAGGING_BLOCK_ELEMENT,\n  IS_DRAGGING_BLOCK_TARGET_POSITION,\n  IS_DRAGGING_ELEMENT_TARGET,\n} from '../../utils/weakMaps'\n\nconst debug = debugWithName('components:DraggableBlock')\nconst debugRenders = false\n\n/**\n * @internal\n */\nexport interface DraggableBlockProps {\n  children: ReactNode\n  element: SlateElement\n  readOnly: boolean\n  blockRef: MutableRefObject<HTMLDivElement | null>\n}\n\n/**\n * Implements drag and drop functionality on editor block nodes\n * @internal\n */\nexport const DraggableBlock = ({children, element, readOnly, blockRef}: DraggableBlockProps) => {\n  const editor = useSlateStatic()\n  const dragGhostRef: MutableRefObject<undefined | HTMLElement> = useRef()\n  const [isDragOver, setIsDragOver] = useState(false)\n  const isVoid = useMemo(() => Editor.isVoid(editor, element), [editor, element])\n  const isInline = useMemo(() => Editor.isInline(editor, element), [editor, element])\n\n  const [blockElement, setBlockElement] = useState<HTMLElement | null>(null)\n\n  useEffect(\n    () => setBlockElement(blockRef ? blockRef.current : ReactEditor.toDOMNode(editor, element)),\n    [editor, element, blockRef],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragOver = useCallback(\n    (event: DragEvent) => {\n      const isMyDragOver = IS_DRAGGING_BLOCK_ELEMENT.get(editor)\n      // debug('Drag over', blockElement)\n      if (!isMyDragOver || !blockElement) {\n        return\n      }\n      event.preventDefault()\n      event.dataTransfer.dropEffect = 'move'\n      IS_DRAGGING_ELEMENT_TARGET.set(editor, element)\n      const elementRect = blockElement.getBoundingClientRect()\n      const offset = elementRect.top\n      const height = elementRect.height\n      const Y = event.pageY\n      const loc = Math.abs(offset - Y)\n      let position: 'top' | 'bottom' = 'bottom'\n      if (element === editor.children[0]) {\n        position = 'top'\n      } else if (loc < height / 2) {\n        position = 'top'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      } else {\n        position = 'bottom'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      }\n      if (isMyDragOver === element) {\n        event.dataTransfer.dropEffect = 'none'\n        return\n      }\n      setIsDragOver(true)\n    },\n    [blockElement, editor, element],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragLeave = useCallback(() => {\n    setIsDragOver(false)\n  }, [])\n\n  // Note: this is called for the dragging block\n  const handleDragEnd = useCallback(\n    (event: DragEvent) => {\n      const targetBlock = IS_DRAGGING_ELEMENT_TARGET.get(editor)\n      if (targetBlock) {\n        IS_DRAGGING.set(editor, false)\n        event.preventDefault()\n        event.stopPropagation()\n        IS_DRAGGING_ELEMENT_TARGET.delete(editor)\n        if (dragGhostRef.current) {\n          debug('Removing drag ghost')\n          document.body.removeChild(dragGhostRef.current)\n        }\n        const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n        IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor)\n        let targetPath = ReactEditor.findPath(editor, targetBlock)\n        const myPath = ReactEditor.findPath(editor, element)\n        const isBefore = Path.isBefore(myPath, targetPath)\n        if (dragPosition === 'bottom' && !isBefore) {\n          // If it is already at the bottom, don't do anything.\n          if (targetPath[0] >= editor.children.length - 1) {\n            debug('target is already at the bottom, not moving')\n            return\n          }\n          const originalPath = targetPath\n          targetPath = Path.next(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (dragPosition === 'top' && isBefore && targetPath[0] !== editor.children.length - 1) {\n          const originalPath = targetPath\n          targetPath = Path.previous(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (Path.equals(targetPath, myPath)) {\n          event.preventDefault()\n          debug('targetPath and myPath is the same, not moving')\n          return\n        }\n        debug(\n          `Moving element ${element._key} from path ${JSON.stringify(myPath)} to ${JSON.stringify(\n            targetPath,\n          )} (${dragPosition})`,\n        )\n        Transforms.moveNodes(editor, {at: myPath, to: targetPath})\n        editor.onChange()\n        return\n      }\n      debug('No target element, not doing anything')\n    },\n    [editor, element],\n  )\n  // Note: this is called not for the dragging block, but for the drop target\n  const handleDrop = useCallback(\n    (event: DragEvent) => {\n      if (IS_DRAGGING_BLOCK_ELEMENT.get(editor)) {\n        debug('On drop (prevented)', element)\n        event.preventDefault()\n        event.stopPropagation()\n        setIsDragOver(false)\n      }\n    },\n    [editor, element],\n  )\n  // Note: this is called for the dragging block\n  const handleDrag = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid) {\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        return\n      }\n      IS_DRAGGING.set(editor, true)\n      IS_DRAGGING_BLOCK_ELEMENT.set(editor, element)\n      event.stopPropagation() // Stop propagation so that leafs don't get this and take focus/selection!\n\n      const target = event.target\n\n      if (target instanceof HTMLElement) {\n        target.style.opacity = '1'\n      }\n    },\n    [editor, element, isVoid],\n  )\n\n  // Note: this is called for the dragging block\n  const handleDragStart = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid || isInline) {\n        debug('Not dragging block')\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        IS_DRAGGING.set(editor, false)\n        return\n      }\n      debug('Drag start')\n      IS_DRAGGING.set(editor, true)\n      if (event.dataTransfer) {\n        event.dataTransfer.setData('application/portable-text', 'something')\n        event.dataTransfer.effectAllowed = 'move'\n      }\n      // Clone blockElement so that it will not be visually clipped by scroll-containers etc.\n      // The application that uses the portable-text-editor may indicate the element used as\n      // drag ghost by adding a truthy data attribute 'data-pt-drag-ghost-element' to a HTML element.\n      if (blockElement && blockElement instanceof HTMLElement) {\n        let dragGhost = blockElement.cloneNode(true) as HTMLElement\n        const customGhost = dragGhost.querySelector('[data-pt-drag-ghost-element]')\n        if (customGhost) {\n          dragGhost = customGhost as HTMLElement\n        }\n\n        // Set the `data-dragged` attribute so the consumer can style the element while it’s dragged\n        dragGhost.setAttribute('data-dragged', '')\n\n        if (document.body) {\n          dragGhostRef.current = dragGhost\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n          const rect = blockElement.getBoundingClientRect()\n          const x = event.clientX - rect.left\n          const y = event.clientY - rect.top\n          dragGhost.style.width = `${rect.width}px`\n          dragGhost.style.height = `${rect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n      }\n      handleDrag(event)\n    },\n    [blockElement, editor, handleDrag, isInline, isVoid],\n  )\n\n  const isDraggingOverFirstBlock =\n    isDragOver && editor.children[0] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const isDraggingOverLastBlock =\n    isDragOver &&\n    editor.children[editor.children.length - 1] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n\n  const isDraggingOverTop =\n    isDraggingOverFirstBlock ||\n    (isDragOver && !isDraggingOverFirstBlock && !isDraggingOverLastBlock && dragPosition === 'top')\n  const isDraggingOverBottom =\n    isDraggingOverLastBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'bottom')\n\n  const dropIndicator = useMemo(\n    () => (\n      <div\n        className=\"pt-drop-indicator\"\n        style={{\n          position: 'absolute',\n          width: '100%',\n          height: 1,\n          borderBottom: '1px solid currentColor',\n          zIndex: 5,\n        }}\n      />\n    ),\n    [],\n  )\n\n  if (readOnly) {\n    return <>{children}</>\n  }\n\n  if (debugRenders) {\n    debug('render')\n  }\n\n  return (\n    <div\n      draggable={isVoid}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n      onDragEnd={handleDragEnd}\n      onDrop={handleDrop}\n    >\n      {isDraggingOverTop && dropIndicator}\n      {children}\n      {isDraggingOverBottom && dropIndicator}\n    </div>\n  )\n}\n","/* eslint-disable complexity */\n/* eslint-disable max-statements */\nimport {\n  type Path,\n  type PortableTextChild,\n  type PortableTextObject,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {type FunctionComponent, type ReactElement, useMemo, useRef} from 'react'\nimport {Editor, Element as SlateElement, Range} from 'slate'\nimport {ReactEditor, type RenderElementProps, useSelected, useSlateStatic} from 'slate-react'\n\nimport {\n  type BlockRenderProps,\n  type PortableTextMemberSchemaTypes,\n  type RenderBlockFunction,\n  type RenderChildFunction,\n  type RenderListItemFunction,\n  type RenderStyleFunction,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue} from '../../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport ObjectNode from '../nodes/DefaultObject'\nimport {DefaultBlockObject, DefaultListItem, DefaultListItemInner} from '../nodes/index'\nimport {DraggableBlock} from './DraggableBlock'\n\nconst debug = debugWithName('components:Element')\nconst debugRenders = false\nconst EMPTY_ANNOTATIONS: PortableTextObject[] = []\n\n/**\n * @internal\n */\nexport interface ElementProps {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}\n\nconst inlineBlockStyle = {display: 'inline-block'}\n\n/**\n * Renders Portable Text block and inline object nodes in Slate\n * @internal\n */\nexport const Element: FunctionComponent<ElementProps> = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck,\n}) => {\n  const editor = useSlateStatic()\n  const selected = useSelected()\n  const blockRef = useRef<HTMLDivElement | null>(null)\n  const inlineBlockObjectRef = useRef(null)\n  const focused = (selected && editor.selection && Range.isCollapsed(editor.selection)) || false\n\n  const value = useMemo(\n    () => fromSlateValue([element], schemaTypes.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0],\n    [editor, element, schemaTypes.block.name],\n  )\n\n  let renderedBlock = children\n\n  let className\n\n  const blockPath: Path = useMemo(() => [{_key: element._key}], [element])\n\n  if (typeof element._type !== 'string') {\n    throw new Error(`Expected element to have a _type property`)\n  }\n\n  if (typeof element._key !== 'string') {\n    throw new Error(`Expected element to have a _key property`)\n  }\n\n  // Test for inline objects first\n  if (editor.isInline(element)) {\n    const path = ReactEditor.findPath(editor, element)\n    const [block] = Editor.node(editor, path, {depth: 1})\n    const schemaType = schemaTypes.inlineObjects.find((_type) => _type.name === element._type)\n    if (!schemaType) {\n      throw new Error('Could not find type for inline block element')\n    }\n    if (SlateElement.isElement(block)) {\n      const elmPath: Path = [{_key: block._key}, 'children', {_key: element._key}]\n      if (debugRenders) {\n        debug(`Render ${element._key} (inline object)`)\n      }\n      return (\n        <span {...attributes}>\n          {/* Note that children must follow immediately or cut and selections will not work properly in Chrome. */}\n          {children}\n          <span\n            draggable={!readOnly}\n            className=\"pt-inline-object\"\n            ref={inlineBlockObjectRef}\n            key={element._key}\n            style={inlineBlockStyle}\n            contentEditable={false}\n          >\n            {renderChild &&\n              renderChild({\n                annotations: EMPTY_ANNOTATIONS, // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n                children: <ObjectNode value={value} />,\n                editorElementRef: inlineBlockObjectRef,\n                focused,\n                path: elmPath,\n                schemaType,\n                selected,\n                type: schemaType,\n                value: value as PortableTextChild,\n              })}\n            {!renderChild && <ObjectNode value={value} />}\n          </span>\n        </span>\n      )\n    }\n    throw new Error('Block not found!')\n  }\n\n  // If not inline, it's either a block (text) or a block object (non-text)\n  // NOTE: text blocks aren't draggable with DraggableBlock (yet?)\n  if (element._type === schemaTypes.block.name) {\n    className = `pt-block pt-text-block`\n    const isListItem = 'listItem' in element\n    if (debugRenders) {\n      debug(`Render ${element._key} (text block)`)\n    }\n    const style = ('style' in element && element.style) || 'normal'\n    className = `pt-block pt-text-block pt-text-block-style-${style}`\n    const blockStyleType = schemaTypes.styles.find((item) => item.value === style)\n    if (renderStyle && blockStyleType) {\n      renderedBlock = renderStyle({\n        block: element as PortableTextTextBlock,\n        children,\n        focused,\n        selected,\n        value: style,\n        path: blockPath,\n        schemaType: blockStyleType,\n        editorElementRef: blockRef,\n      })\n    }\n    let level\n    if (isListItem) {\n      if (typeof element.level === 'number') {\n        level = element.level\n      }\n      className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`\n    }\n    if (editor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find((item) => item.value === element.listItem)\n      if (renderListItem && listType) {\n        renderedBlock = renderListItem({\n          block: value,\n          children: renderedBlock,\n          focused,\n          selected,\n          value: element.listItem,\n          path: blockPath,\n          schemaType: listType,\n          level: value.level || 1,\n          editorElementRef: blockRef,\n        })\n      } else {\n        renderedBlock = (\n          <DefaultListItem\n            listStyle={value.listItem || schemaTypes.lists[0].value}\n            listLevel={value.level || 1}\n          >\n            <DefaultListItemInner>{renderedBlock}</DefaultListItemInner>\n          </DefaultListItem>\n        )\n      }\n    }\n    const renderProps: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: renderedBlock,\n        editorElementRef: blockRef,\n        focused,\n        level,\n        listItem: isListItem ? element.listItem : undefined,\n        path: blockPath,\n        selected,\n        style,\n        schemaType: schemaTypes.block,\n        value,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\")\n          return schemaTypes.block\n        },\n      },\n    )\n\n    const propsOrDefaultRendered = renderBlock\n      ? renderBlock(renderProps as BlockRenderProps)\n      : children\n    return (\n      <div key={element._key} {...attributes} className={className} spellCheck={spellCheck}>\n        <DraggableBlock element={element} readOnly={readOnly} blockRef={blockRef}>\n          <div ref={blockRef}>{propsOrDefaultRendered}</div>\n        </DraggableBlock>\n      </div>\n    )\n  }\n  const schemaType = schemaTypes.blockObjects.find((_type) => _type.name === element._type)\n  if (!schemaType) {\n    throw new Error(`Could not find schema type for block element of _type ${element._type}`)\n  }\n  if (debugRenders) {\n    debug(`Render ${element._key} (object block)`)\n  }\n  className = 'pt-block pt-object-block'\n  const block = fromSlateValue(\n    [element],\n    schemaTypes.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )[0]\n  let renderedBlockFromProps\n  if (renderBlock) {\n    const _props: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: <ObjectNode value={value} />,\n        editorElementRef: blockRef,\n        focused,\n        path: blockPath,\n        schemaType,\n        selected,\n        value: block,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\")\n          return schemaType\n        },\n      },\n    )\n    renderedBlockFromProps = renderBlock(_props as BlockRenderProps)\n  }\n  return (\n    <div key={element._key} {...attributes} className={className}>\n      {children}\n      <DraggableBlock element={element} readOnly={readOnly} blockRef={blockRef}>\n        {renderedBlockFromProps && (\n          <div ref={blockRef} contentEditable={false}>\n            {renderedBlockFromProps}\n          </div>\n        )}\n        {!renderedBlockFromProps && (\n          <DefaultBlockObject selected={selected}>\n            <ObjectNode value={value} />\n          </DefaultBlockObject>\n        )}\n      </DraggableBlock>\n    </div>\n  )\n}\n","import {createContext, useContext} from 'react'\n\nimport {type PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext = createContext<PortableTextEditor | null>(null)\n\n/**\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","import {type PortableTextObject} from '@sanity/types'\nimport {type ReactNode, useCallback} from 'react'\n\ntype Props = {\n  annotation: PortableTextObject\n  children: ReactNode\n}\nexport function DefaultAnnotation(props: Props) {\n  // eslint-disable-next-line no-alert\n  const handleClick = useCallback(() => alert(JSON.stringify(props.annotation)), [props.annotation])\n  return (\n    <span style={{color: 'blue'}} onClick={handleClick}>\n      {props.children}\n    </span>\n  )\n}\n","import {\n  type ArraySchemaType,\n  type BlockSchemaType,\n  type ObjectSchemaType,\n  type PortableTextBlock,\n  type SchemaType,\n  type SpanSchemaType,\n} from '@sanity/types'\n\nimport {type PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport function getPortableTextMemberSchemaTypes(\n  portableTextType: ArraySchemaType<PortableTextBlock>,\n): PortableTextMemberSchemaTypes {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as BlockSchemaType | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find((field) => field.name === 'children') as\n    | {type: ArraySchemaType}\n    | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error('Valid types for block children not found in schema (required)')\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter((memberType) => memberType.name !== 'span') ||\n    []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter((field) => field.name !== blockType.name) ||\n    []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find((btField) => btField.name === 'style')\n  if (!styleField) {\n    throw new Error(\"A field with name 'style' is not defined in the block type (required).\")\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter((style: {value: string}) => style.value)\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\",\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find((btField) => btField.name === 'listItem')\n  if (!listField) {\n    throw new Error(\"A field with name 'listItem' is not defined in the block type (required).\")\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","function isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction cloneDiff(diff) {\n  const [type, patch] = diff;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA;\n  let text2 = textB;\n  const text1Length = text1.length;\n  const text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0) {\n    return 0;\n  }\n  if (text1Length > text2Length) {\n    text1 = text1.substring(text1Length - text2Length);\n  } else if (text1Length < text2Length) {\n    text2 = text2.substring(0, text1Length);\n  }\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2) {\n    return textLength;\n  }\n  let best = 0;\n  let length = 1;\n  for (let found = 0; found !== -1;) {\n    const pattern = text1.substring(textLength - length);\n    found = text2.indexOf(pattern);\n    if (found === -1) {\n      return best;\n    }\n    length += found;\n    if (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0]) {\n    return 0;\n  }\n  let pointerMin = 0;\n  let pointerMax = Math.min(text1.length, text2.length);\n  let pointerMid = pointerMax;\n  let pointerStart = 0;\n  while (pointerMin < pointerMid) {\n    if (text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid)) {\n      pointerMin = pointerMid;\n      pointerStart = pointerMin;\n    } else {\n      pointerMax = pointerMid;\n    }\n    pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  }\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1]) {\n    return 0;\n  }\n  let pointerMin = 0;\n  let pointerMax = Math.min(text1.length, text2.length);\n  let pointerMid = pointerMax;\n  let pointerEnd = 0;\n  while (pointerMin < pointerMid) {\n    if (text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd)) {\n      pointerMin = pointerMid;\n      pointerEnd = pointerMin;\n    } else {\n      pointerMax = pointerMid;\n    }\n    pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  }\n  return pointerMid;\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map(diff => cloneDiff(diff));\n  let hasChanges = false;\n  const equalities = [];\n  let equalitiesLength = 0;\n  let lastEquality = null;\n  let pointer = 0;\n  let lengthInsertions1 = 0;\n  let lengthDeletions1 = 0;\n  let lengthInsertions2 = 0;\n  let lengthDeletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] === DIFF_EQUAL) {\n      equalities[equalitiesLength++] = pointer;\n      lengthInsertions1 = lengthInsertions2;\n      lengthDeletions1 = lengthDeletions2;\n      lengthInsertions2 = 0;\n      lengthDeletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {\n      if (diffs[pointer][0] === DIFF_INSERT) {\n        lengthInsertions2 += diffs[pointer][1].length;\n      } else {\n        lengthDeletions2 += diffs[pointer][1].length;\n      }\n      if (lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2)) {\n        diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]);\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        lengthInsertions1 = 0;\n        lengthDeletions1 = 0;\n        lengthInsertions2 = 0;\n        lengthDeletions2 = 0;\n        lastEquality = null;\n        hasChanges = true;\n      }\n    }\n    pointer++;\n  }\n  if (hasChanges) {\n    diffs = cleanupMerge(diffs);\n  }\n  diffs = cleanupSemanticLossless(diffs);\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1];\n      const insertion = diffs[pointer][1];\n      const overlapLength1 = getCommonOverlap(deletion, insertion);\n      const overlapLength2 = getCommonOverlap(insertion, deletion);\n      if (overlapLength1 >= overlapLength2) {\n        if (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) {\n          diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]);\n          diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1);\n          diffs[pointer + 1][1] = insertion.substring(overlapLength1);\n          pointer++;\n        }\n      } else if (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) {\n        diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]);\n        diffs[pointer - 1][0] = DIFF_INSERT;\n        diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2);\n        diffs[pointer + 1][0] = DIFF_DELETE;\n        diffs[pointer + 1][1] = deletion.substring(overlapLength2);\n        pointer++;\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/;\nconst whitespaceRegex = /\\s/;\nconst linebreakRegex = /[\\r\\n]/;\nconst blanklineEndRegex = /\\n\\r?\\n$/;\nconst blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map(diff => cloneDiff(diff));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two) {\n      return 6;\n    }\n    const char1 = one.charAt(one.length - 1);\n    const char2 = two.charAt(0);\n    const nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex);\n    const nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex);\n    const whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex);\n    const whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex);\n    const lineBreak1 = whitespace1 && char1.match(linebreakRegex);\n    const lineBreak2 = whitespace2 && char2.match(linebreakRegex);\n    const blankLine1 = lineBreak1 && one.match(blanklineEndRegex);\n    const blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    if (blankLine1 || blankLine2) {\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      return 1;\n    }\n    return 0;\n  }\n  let pointer = 1;\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1];\n      let edit = diffs[pointer][1];\n      let equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1;\n      let bestEdit = edit;\n      let bestEquality2 = equality2;\n      let bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n      if (diffs[pointer - 1][1] !== bestEquality1) {\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map(diff => cloneDiff(diff));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0;\n  let countDelete = 0;\n  let countInsert = 0;\n  let textDelete = \"\";\n  let textInsert = \"\";\n  let commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++;\n        textInsert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++;\n        textDelete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        if (countDelete + countInsert > 1) {\n          if (countDelete !== 0 && countInsert !== 0) {\n            commonlength = getCommonPrefix(textInsert, textDelete);\n            if (commonlength !== 0) {\n              if (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL) {\n                diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]);\n                pointer++;\n              }\n              textInsert = textInsert.substring(commonlength);\n              textDelete = textDelete.substring(commonlength);\n            }\n            commonlength = getCommonSuffix(textInsert, textDelete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1];\n              textInsert = textInsert.substring(0, textInsert.length - commonlength);\n              textDelete = textDelete.substring(0, textDelete.length - commonlength);\n            }\n          }\n          pointer -= countDelete + countInsert;\n          diffs.splice(pointer, countDelete + countInsert);\n          if (textDelete.length) {\n            diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]);\n            pointer++;\n          }\n          if (textInsert.length) {\n            diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]);\n            pointer++;\n          }\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL) {\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        countInsert = 0;\n        countDelete = 0;\n        textDelete = \"\";\n        textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  }\n  if (diffs[diffs.length - 1][1] === \"\") {\n    diffs.pop();\n  }\n  let hasChanges = false;\n  pointer = 1;\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1]) {\n        diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        hasChanges = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1]) {\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        hasChanges = true;\n      }\n    }\n    pointer++;\n  }\n  if (hasChanges) {\n    diffs = cleanupMerge(diffs);\n  }\n  return diffs;\n}\nfunction trueCount() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs) {\n  let editCost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  let diffs = rawDiffs.map(diff => cloneDiff(diff));\n  let hasChanges = false;\n  const equalities = [];\n  let equalitiesLength = 0;\n  let lastEquality = null;\n  let pointer = 0;\n  let preIns = false;\n  let preDel = false;\n  let postIns = false;\n  let postDel = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] === DIFF_EQUAL) {\n      if (diffs[pointer][1].length < editCost && (postIns || postDel)) {\n        equalities[equalitiesLength++] = pointer;\n        preIns = postIns;\n        preDel = postDel;\n        lastEquality = diffs[pointer][1];\n      } else {\n        equalitiesLength = 0;\n        lastEquality = null;\n      }\n      postIns = false;\n      postDel = false;\n    } else {\n      if (diffs[pointer][0] === DIFF_DELETE) {\n        postDel = true;\n      } else {\n        postIns = true;\n      }\n      if (lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3)) {\n        diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]);\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;\n        lastEquality = null;\n        if (preIns && preDel) {\n          postIns = true;\n          postDel = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;\n          pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n          postIns = false;\n          postDel = false;\n        }\n        hasChanges = true;\n      }\n    }\n    pointer++;\n  }\n  if (hasChanges) {\n    diffs = cleanupMerge(diffs);\n  }\n  return diffs;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length;\n  const text2Length = text2.length;\n  const maxD = Math.ceil((text1Length + text2Length) / 2);\n  const vOffset = maxD;\n  const vLength = 2 * maxD;\n  const v1 = new Array(vLength);\n  const v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[vOffset + 1] = 0;\n  v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length;\n  const front = delta % 2 !== 0;\n  let k1start = 0;\n  let k1end = 0;\n  let k2start = 0;\n  let k2end = 0;\n  for (let d = 0; d < maxD; d++) {\n    if (Date.now() > deadline) {\n      break;\n    }\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      if (k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1]) {\n        x1 = v1[k1Offset + 1];\n      } else {\n        x1 = v1[k1Offset - 1] + 1;\n      }\n      let y1 = x1 - k1;\n      while (x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1Offset] = x1;\n      if (x1 > text1Length) {\n        k1end += 2;\n      } else if (y1 > text2Length) {\n        k1start += 2;\n      } else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2) {\n            return bisectSplit(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      if (k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1]) {\n        x2 = v2[k2Offset + 1];\n      } else {\n        x2 = v2[k2Offset - 1] + 1;\n      }\n      let y2 = x2 - k2;\n      while (x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2Offset] = x2;\n      if (x2 > text1Length) {\n        k2end += 2;\n      } else if (y2 > text2Length) {\n        k2start += 2;\n      } else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset];\n          const y1 = vOffset + x1 - k1Offset;\n          x2 = text1Length - x2;\n          if (x1 >= x2) {\n            return bisectSplit(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x);\n  const text2a = text2.substring(0, y);\n  const text1b = text1.substring(x);\n  const text2b = text2.substring(y);\n  const diffs = doDiff(text1a, text2a, {\n    checkLines: false,\n    deadline\n  });\n  const diffsb = doDiff(text1b, text2b, {\n    checkLines: false,\n    deadline\n  });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (timeout <= 0) {\n    return null;\n  }\n  const longText = text1.length > text2.length ? text1 : text2;\n  const shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length) {\n    return null;\n  }\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4));\n  const halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2) {\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  } else if (!halfMatch1 && !halfMatch2) {\n    return null;\n  } else if (!halfMatch2) {\n    halfMatch = halfMatch1;\n  } else if (!halfMatch1) {\n    halfMatch = halfMatch2;\n  }\n  if (!halfMatch) {\n    throw new Error(\"Unable to find a half match.\");\n  }\n  let text1A;\n  let text1B;\n  let text2A;\n  let text2B;\n  if (text1.length > text2.length) {\n    text1A = halfMatch[0];\n    text1B = halfMatch[1];\n    text2A = halfMatch[2];\n    text2B = halfMatch[3];\n  } else {\n    text2A = halfMatch[0];\n    text2B = halfMatch[1];\n    text1A = halfMatch[2];\n    text1B = halfMatch[3];\n  }\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1;\n  let bestCommon = \"\";\n  let bestLongTextA;\n  let bestLongTextB;\n  let bestShortTextA;\n  let bestShortTextB;\n  while ((j = shortText.indexOf(seed, j + 1)) !== -1) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j));\n    const suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    if (bestCommon.length < suffixLength + prefixLength) {\n      bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength);\n      bestLongTextA = longText.slice(0, i - suffixLength);\n      bestLongTextB = longText.slice(i + prefixLength);\n      bestShortTextA = shortText.slice(0, j - suffixLength);\n      bestShortTextB = shortText.slice(j + prefixLength);\n    }\n  }\n  if (bestCommon.length * 2 >= longText.length) {\n    return [bestLongTextA || \"\", bestLongTextB || \"\", bestShortTextA || \"\", bestShortTextB || \"\", bestCommon || \"\"];\n  }\n  return null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1];\n    const text = [];\n    for (let y = 0; y < chars.length; y++) {\n      text[y] = lineArray[chars.charCodeAt(y)];\n    }\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [];\n  const lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\";\n    let lineStart = 0;\n    let lineEnd = -1;\n    let lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf(\"\\n\", lineStart);\n      if (lineEnd === -1) {\n        lineEnd = text.length - 1;\n      }\n      let line = text.slice(lineStart, lineEnd + 1);\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength === maxLines) {\n          line = text.slice(lineStart);\n          lineEnd = text.length;\n        }\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n      lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return {\n    chars1,\n    chars2,\n    lineArray\n  };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA;\n  let text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: false,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray);\n  diffs = cleanupSemantic(diffs);\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0;\n  let countDelete = 0;\n  let countInsert = 0;\n  let textDelete = \"\";\n  let textInsert = \"\";\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++;\n        textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++;\n        textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert);\n          pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: false,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, aa[j]);\n          }\n          pointer += aa.length;\n        }\n        countInsert = 0;\n        countDelete = 0;\n        textDelete = \"\";\n        textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  diffs.pop();\n  return diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1) {\n    return [[DIFF_INSERT, text2]];\n  }\n  if (!text2) {\n    return [[DIFF_DELETE, text1]];\n  }\n  const longtext = text1.length > text2.length ? text1 : text2;\n  const shorttext = text1.length > text2.length ? text2 : text1;\n  const i = longtext.indexOf(shorttext);\n  if (i !== -1) {\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    if (text1.length > text2.length) {\n      diffs[0][0] = DIFF_DELETE;\n      diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n  if (shorttext.length === 1) {\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0];\n    const text1B = halfMatch[1];\n    const text2A = halfMatch[2];\n    const text2B = halfMatch[3];\n    const midCommon = halfMatch[4];\n    const diffsA = doDiff(text1A, text2A, opts);\n    const diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  if (opts.checkLines && text1.length > 100 && text2.length > 100) {\n    return doLineModeDiff(text1, text2, opts);\n  }\n  return bisect(text1, text2, opts.deadline);\n}\nconst DIFF_DELETE = -1;\nconst DIFF_INSERT = 1;\nconst DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null) {\n    throw new Error(\"Null input. (diff)\");\n  }\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  adjustDiffForSurrogatePairs(diffs);\n  return diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA;\n  let text2 = textB;\n  if (text1 === text2) {\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  }\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n  commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diffs = cleanupMerge(diffs);\n  return diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  if (typeof timeout !== \"undefined\") {\n    t = timeout <= 0 ? Number.MAX_VALUE : timeout;\n  }\n  return Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return {\n    checkLines: true,\n    deadline: createDeadLine(opts.timeout || 1),\n    ...opts\n  };\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null;\n  let deleteIdx = null;\n  let j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length === 0) {\n      continue;\n    }\n    if (op === DIFF_INSERT) {\n      if (insertIdx === null) {\n        insertIdx = j;\n      }\n      continue;\n    } else if (op === DIFF_DELETE) {\n      if (deleteIdx === null) {\n        deleteIdx = j;\n      }\n      continue;\n    } else if (op === DIFF_EQUAL) {\n      if (insertIdx === null && deleteIdx === null) {\n        const [rest, char2] = splitChar(diffs[i][1], dir);\n        diffs[i][1] = rest;\n        diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n        return;\n      }\n      break;\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv);\n    const [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText;\n    diffs[deleteIdx][1] = deleteText;\n    diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text;\n  if (insertIdx === null) {\n    diffs.splice(j, 0, [DIFF_INSERT, char]);\n    if (deleteIdx !== null && deleteIdx >= j) deleteIdx++;\n  } else {\n    diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv);\n  }\n  if (deleteIdx === null) {\n    diffs.splice(j, 0, [DIFF_DELETE, char]);\n  } else {\n    diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n  }\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0];\n    const lastChar = diffText[diffText.length - 1];\n    if (isHighSurrogate(lastChar) && diffType === DIFF_EQUAL) {\n      deisolateChar(diffs, i, 1);\n    }\n    if (isLowSurrogate(firstChar) && diffType === DIFF_EQUAL) {\n      deisolateChar(diffs, i, -1);\n    }\n  }\n  for (let i = 0; i < diffs.length; i++) {\n    if (diffs[i][1].length === 0) {\n      diffs.splice(i, 1);\n    }\n  }\n}\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return {\n    ...DEFAULT_OPTIONS,\n    ...options\n  };\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc) {\n  let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  if (pattern.length > MAX_BITS$1) {\n    throw new Error(\"Pattern too long for this browser.\");\n  }\n  const options = applyDefaults(opts);\n  const s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length;\n    const proximity = Math.abs(loc - x);\n    if (!options.distance) {\n      return proximity ? 1 : accuracy;\n    }\n    return accuracy + proximity / options.distance;\n  }\n  let scoreThreshold = options.threshold;\n  let bestLoc = text.indexOf(pattern, loc);\n  if (bestLoc !== -1) {\n    scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold);\n    bestLoc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (bestLoc !== -1) {\n      scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold);\n    }\n  }\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin;\n  let binMid;\n  let binMax = pattern.length + text.length;\n  let lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    binMin = 0;\n    binMid = binMax;\n    while (binMin < binMid) {\n      if (getBitapScore(d, loc + binMid) <= scoreThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length;\n    const rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {\n        rd[j] = (rd[j + 1] << 1 | 1) & charMatch;\n      } else {\n        rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold) {\n          scoreThreshold = score;\n          bestLoc = j - 1;\n          if (bestLoc > loc) {\n            start = Math.max(1, 2 * loc - bestLoc);\n          } else {\n            break;\n          }\n        }\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold) {\n      break;\n    }\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (let i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  }\n  return s;\n}\nfunction match(text, pattern, searchLocation) {\n  if (text === null || pattern === null || searchLocation === null) {\n    throw new Error(\"Null input. (match())\");\n  }\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern) {\n    return 0;\n  } else if (!text.length) {\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) === pattern) {\n    return loc;\n  }\n  return bitap(text, pattern, loc);\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join(\"\");\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint === \"undefined\") {\n      throw new Error(\"Failed to get codepoint\");\n    }\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let byteOffset = 0;\n  let idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target;) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint === \"undefined\") {\n        return idx;\n      }\n      byteOffset += utf8len(codePoint);\n      if (codePoint > 65535) {\n        idx += 2;\n      } else {\n        idx += 1;\n      }\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target) {\n      throw new Error(\"Failed to determine byte offset\");\n    }\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches) {\n    adjusted.push({\n      diffs: patch.diffs.map(diff => cloneDiff(diff)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  }\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  if (codePoint <= 127) return 1;\n  if (codePoint <= 2047) return 2;\n  if (codePoint <= 65535) return 3;\n  return 4;\n}\nconst MAX_BITS = 32;\nconst DEFAULT_MARGIN = 4;\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    ...DEFAULT_OPTS,\n    ...opts\n  };\n}\nfunction make(a, b, options) {\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    let diffs = diff(a, b, {\n      checkLines: true\n    });\n    if (diffs.length > 2) {\n      diffs = cleanupSemantic(diffs);\n      diffs = cleanupEfficiency(diffs);\n    }\n    return _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b === \"undefined\") {\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  }\n  if (typeof a === \"string\" && b && Array.isArray(b)) {\n    return _make(a, b, getDefaultOpts(options));\n  }\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0) {\n    return [];\n  }\n  const patches = [];\n  let patch = createPatchObject(0, 0);\n  let patchDiffLength = 0;\n  let charCount1 = 0;\n  let charCount2 = 0;\n  let utf8Count1 = 0;\n  let utf8Count2 = 0;\n  let prepatchText = textA;\n  let postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x];\n    const [diffType, diffText] = currentDiff;\n    const diffTextLength = diffText.length;\n    const diffByteLength = countUtf8Bytes(diffText);\n    if (!patchDiffLength && diffType !== DIFF_EQUAL) {\n      patch.start1 = charCount1;\n      patch.start2 = charCount2;\n      patch.utf8Start1 = utf8Count1;\n      patch.utf8Start2 = utf8Count2;\n    }\n    switch (diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff;\n        patch.length2 += diffTextLength;\n        patch.utf8Length2 += diffByteLength;\n        postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength;\n        patch.utf8Length1 += diffByteLength;\n        patch.diffs[patchDiffLength++] = currentDiff;\n        postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        if (diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1) {\n          patch.diffs[patchDiffLength++] = currentDiff;\n          patch.length1 += diffTextLength;\n          patch.length2 += diffTextLength;\n          patch.utf8Length1 += diffByteLength;\n          patch.utf8Length2 += diffByteLength;\n        } else if (diffTextLength >= 2 * options.margin) {\n          if (patchDiffLength) {\n            addContext(patch, prepatchText, options);\n            patches.push(patch);\n            patch = createPatchObject(-1, -1);\n            patchDiffLength = 0;\n            prepatchText = postpatchText;\n            charCount1 = charCount2;\n            utf8Count1 = utf8Count2;\n          }\n        }\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    if (diffType !== DIFF_INSERT) {\n      charCount1 += diffTextLength;\n      utf8Count1 += diffByteLength;\n    }\n    if (diffType !== DIFF_DELETE) {\n      charCount2 += diffTextLength;\n      utf8Count2 += diffByteLength;\n    }\n  }\n  if (patchDiffLength) {\n    addContext(patch, prepatchText, options);\n    patches.push(patch);\n  }\n  return patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0) {\n    return;\n  }\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  let padding = 0;\n  while (text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin) {\n    padding += opts.margin;\n    pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  }\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  if (prefixStart >= 1 && isLowSurrogate(text[prefixStart])) {\n    prefixStart--;\n  }\n  const prefix = text.substring(prefixStart, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  }\n  const prefixLength = prefix.length;\n  const prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  if (suffixEnd < text.length && isLowSurrogate(text[suffixEnd])) {\n    suffixEnd++;\n  }\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  if (suffix) {\n    patch.diffs.push([DIFF_EQUAL, suffix]);\n  }\n  const suffixLength = suffix.length;\n  const suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength;\n  patch.start2 -= prefixLength;\n  patch.utf8Start1 -= prefixUtf8Length;\n  patch.utf8Start2 -= prefixUtf8Length;\n  patch.length1 += prefixLength + suffixLength;\n  patch.length2 += prefixLength + suffixLength;\n  patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length;\n  patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nfunction levenshtein(diffs) {\n  let leven = 0;\n  let insertions = 0;\n  let deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0];\n    const data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  leven += Math.max(insertions, deletions);\n  return leven;\n}\nfunction xIndex(diffs, loc) {\n  let chars1 = 0;\n  let chars2 = 0;\n  let lastChars1 = 0;\n  let lastChars2 = 0;\n  let x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {\n      break;\n    }\n    lastChars1 = chars1;\n    lastChars2 = chars2;\n  }\n  if (diffs.length !== x && diffs[x][0] === DIFF_DELETE) {\n    return lastChars2;\n  }\n  return lastChars2 + (loc - lastChars1);\n}\nfunction addPadding(patches) {\n  let margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_MARGIN;\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n  for (const p of patches) {\n    p.start1 += paddingLength;\n    p.start2 += paddingLength;\n    p.utf8Start1 += paddingLength;\n    p.utf8Start2 += paddingLength;\n  }\n  let patch = patches[0];\n  let diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL) {\n    diffs.unshift([DIFF_EQUAL, nullPadding]);\n    patch.start1 -= paddingLength;\n    patch.start2 -= paddingLength;\n    patch.utf8Start1 -= paddingLength;\n    patch.utf8Start2 -= paddingLength;\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n    patch.utf8Length1 += paddingLength;\n    patch.utf8Length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length;\n    const extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.utf8Start1 -= extraLength;\n    patch.utf8Start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n    patch.utf8Length1 += extraLength;\n    patch.utf8Length2 += extraLength;\n  }\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL) {\n    diffs.push([DIFF_EQUAL, nullPadding]);\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n    patch.utf8Length1 += paddingLength;\n    patch.utf8Length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n    patch.utf8Length1 += extraLength;\n    patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction splitMax(patches) {\n  let margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_MARGIN;\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize) {\n      continue;\n    }\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1;\n    let start2 = bigpatch.start2;\n    let preContext = \"\";\n    while (bigpatch.diffs.length !== 0) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = true;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length;\n        patch.utf8Length1 = precontextByteCount;\n        patch.length2 = preContext.length;\n        patch.utf8Length2 = precontextByteCount;\n        patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      while (bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1];\n        let diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length;\n          patch.utf8Length2 += diffTextByteCount;\n          start2 += diffText.length;\n          const diff = bigpatch.diffs.shift();\n          if (diff) {\n            patch.diffs.push(diff);\n          }\n          empty = false;\n        } else if (diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize) {\n          patch.length1 += diffText.length;\n          patch.utf8Length1 += diffTextByteCount;\n          start1 += diffText.length;\n          empty = false;\n          patch.diffs.push([diffType, diffText]);\n          bigpatch.diffs.shift();\n        } else {\n          diffText = diffText.substring(0, patchSize - patch.length1 - margin);\n          diffTextByteCount = countUtf8Bytes(diffText);\n          patch.length1 += diffText.length;\n          patch.utf8Length1 += diffTextByteCount;\n          start1 += diffText.length;\n          if (diffType === DIFF_EQUAL) {\n            patch.length2 += diffText.length;\n            patch.utf8Length2 += diffTextByteCount;\n            start2 += diffText.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push([diffType, diffText]);\n          if (diffText === bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length);\n          }\n        }\n      }\n      preContext = diffText2(patch.diffs);\n      preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin);\n      const postContextByteCount = countUtf8Bytes(postContext);\n      if (postContext !== \"\") {\n        patch.length1 += postContext.length;\n        patch.length2 += postContext.length;\n        patch.utf8Length1 += postContextByteCount;\n        patch.utf8Length2 += postContextByteCount;\n        if (patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postContext;\n        } else {\n          patch.diffs.push([DIFF_EQUAL, postContext]);\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n}\nfunction apply(patches, originalText) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (typeof patches === \"string\") {\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  }\n  let text = originalText;\n  if (patches.length === 0) {\n    return [text, []];\n  }\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  });\n  const margin = opts.margin || DEFAULT_MARGIN;\n  const deleteThreshold = opts.deleteThreshold || 0.4;\n  const nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding;\n  splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta;\n    const text1 = diffText1(parsed[x].diffs);\n    let startLoc;\n    let endLoc = -1;\n    if (text1.length > MAX_BITS) {\n      startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc);\n      if (startLoc !== -1) {\n        endLoc = match(text, text1.substring(text1.length - MAX_BITS), expectedLoc + text1.length - MAX_BITS);\n        if (endLoc === -1 || startLoc >= endLoc) {\n          startLoc = -1;\n        }\n      }\n    } else {\n      startLoc = match(text, text1, expectedLoc);\n    }\n    if (startLoc === -1) {\n      results[x] = false;\n      delta -= parsed[x].length2 - parsed[x].length1;\n    } else {\n      results[x] = true;\n      delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1) {\n        text2 = text.substring(startLoc, startLoc + text1.length);\n      } else {\n        text2 = text.substring(startLoc, endLoc + MAX_BITS);\n      }\n      if (text1 === text2) {\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      } else {\n        let diffs = diff(text1, text2, {\n          checkLines: false\n        });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold) {\n          results[x] = false;\n        } else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0;\n          let index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {\n              text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2);\n            } else if (mod[0] === DIFF_DELETE) {\n              text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const {\n    utf8Length1,\n    utf8Length2,\n    utf8Start1,\n    utf8Start2,\n    diffs\n  } = patch;\n  let coords1;\n  if (utf8Length1 === 0) {\n    coords1 = \"\".concat(utf8Start1, \",0\");\n  } else if (utf8Length1 === 1) {\n    coords1 = \"\".concat(utf8Start1 + 1);\n  } else {\n    coords1 = \"\".concat(utf8Start1 + 1, \",\").concat(utf8Length1);\n  }\n  let coords2;\n  if (utf8Length2 === 0) {\n    coords2 = \"\".concat(utf8Start2, \",0\");\n  } else if (utf8Length2 === 1) {\n    coords2 = \"\".concat(utf8Start2 + 1);\n  } else {\n    coords2 = \"\".concat(utf8Start2 + 1, \",\").concat(utf8Length2);\n  }\n  const text = [\"@@ -\".concat(coords1, \" +\").concat(coords2, \" @@\\n\")];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = \"\".concat(op + encodeURI(diffs[x][1]), \"\\n\");\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline) {\n    return [];\n  }\n  const patches = [];\n  const lines = textline.split(\"\\n\");\n  let textPointer = 0;\n  while (textPointer < lines.length) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error(\"Invalid patch string: \".concat(lines[textPointer]));\n    }\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    patches.push(patch);\n    if (m[2] === \"\") {\n      patch.start1--;\n      patch.utf8Start1--;\n      patch.length1 = 1;\n      patch.utf8Length1 = 1;\n    } else if (m[2] === \"0\") {\n      patch.length1 = 0;\n      patch.utf8Length1 = 0;\n    } else {\n      patch.start1--;\n      patch.utf8Start1--;\n      patch.utf8Length1 = toInt(m[2]);\n      patch.length1 = patch.utf8Length1;\n    }\n    if (m[4] === \"\") {\n      patch.start2--;\n      patch.utf8Start2--;\n      patch.length2 = 1;\n      patch.utf8Length2 = 1;\n    } else if (m[4] === \"0\") {\n      patch.length2 = 0;\n      patch.utf8Length2 = 0;\n    } else {\n      patch.start2--;\n      patch.utf8Start2--;\n      patch.utf8Length2 = toInt(m[4]);\n      patch.length2 = patch.utf8Length2;\n    }\n    textPointer++;\n    while (textPointer < lines.length) {\n      const currentLine = lines[textPointer];\n      const sign = currentLine.charAt(0);\n      if (sign === \"@\") {\n        break;\n      }\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(\"Illegal escape in parse: \".concat(currentLine));\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\") {\n        patch.diffs.push([DIFF_DELETE, line]);\n        patch.length1 -= utf8Diff;\n      } else if (sign === \"+\") {\n        patch.diffs.push([DIFF_INSERT, line]);\n        patch.length2 -= utf8Diff;\n      } else if (sign === \" \") {\n        patch.diffs.push([DIFF_EQUAL, line]);\n        patch.length1 -= utf8Diff;\n        patch.length2 -= utf8Diff;\n      } else {\n        throw new Error(\"Invalid patch mode \\\"\".concat(sign, \"\\\" in: \").concat(line));\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nexport { DIFF_DELETE, DIFF_EQUAL, DIFF_INSERT, adjustIndiciesToUcs2, apply as applyPatches, cleanupEfficiency, cleanupSemantic, diff as makeDiff, make as makePatches, match, parse as parsePatch, stringifyPatch, stringify as stringifyPatches };\n//# sourceMappingURL=index.js.map\n","import {makePatches, stringifyPatches} from '@sanity/diff-match-patch'\nimport {type Path, type PathSegment} from '@sanity/types'\n\nimport {\n  type DiffMatchPatch,\n  type InsertPatch,\n  type InsertPosition,\n  type SetIfMissingPatch,\n  type SetPatch,\n  type UnsetPatch,\n} from '../types/patch'\n\nexport function setIfMissing(value: any, path: Path = []): SetIfMissingPatch {\n  return {\n    type: 'setIfMissing',\n    path,\n    value,\n  }\n}\n\nexport function diffMatchPatch(\n  currentValue: string,\n  nextValue: string,\n  path: Path = [],\n): DiffMatchPatch {\n  const patches = makePatches(currentValue, nextValue)\n  const patch = stringifyPatches(patches)\n  return {type: 'diffMatchPatch', path, value: patch}\n}\n\nexport function insert(items: any[], position: InsertPosition, path: Path = []): InsertPatch {\n  return {\n    type: 'insert',\n    path,\n    position,\n    items,\n  }\n}\n\nexport function set(value: any, path: Path = []): SetPatch {\n  return {type: 'set', path, value}\n}\n\nexport function unset(path: Path = []): UnsetPatch {\n  return {type: 'unset', path}\n}\n\nexport function prefixPath<T extends {path: Path}>(patch: T, segment: PathSegment): T {\n  return {\n    ...patch,\n    path: [segment, ...patch.path],\n  }\n}\n","import {type Path, type PortableTextSpan, type PortableTextTextBlock} from '@sanity/types'\nimport {get, isUndefined, omitBy} from 'lodash'\nimport {\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n  Text,\n} from 'slate'\n\nimport {type PatchFunctions} from '../editor/plugins/createWithPatches'\nimport {diffMatchPatch, insert, set, setIfMissing, unset} from '../patch/PatchEvent'\nimport {type PortableTextMemberSchemaTypes, type PortableTextSlateEditor} from '../types/editor'\nimport {type InsertPosition, type Patch} from '../types/patch'\nimport {debugWithName} from './debug'\nimport {fromSlateValue} from './values'\n\nconst debug = debugWithName('operationToPatches')\ndebug.enabled = false\n\nexport function createOperationToPatches(types: PortableTextMemberSchemaTypes): PatchFunctions {\n  const textBlockName = types.block.name\n  function insertTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    if (debug.enabled) {\n      debug('Operation', JSON.stringify(operation, null, 2))\n    }\n    const block =\n      editor.isTextBlock(editor.children[operation.path[0]]) && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const textChild =\n      editor.isTextBlock(block) &&\n      editor.isTextSpan(block.children[operation.path[1]]) &&\n      (block.children[operation.path[1]] as PortableTextSpan)\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [{_key: block._key}, 'children', {_key: textChild._key}, 'text']\n    const prevBlock = beforeValue[operation.path[0]]\n    const prevChild = editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevChild) ? prevChild.text : ''\n    const patch = diffMatchPatch(prevText, textChild.text, path)\n    return patch.value.length ? [patch] : []\n  }\n\n  function removeTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = editor && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const child = (editor.isTextBlock(block) && block.children[operation.path[1]]) || undefined\n    const textChild: PortableTextSpan | undefined = editor.isTextSpan(child) ? child : undefined\n    if (child && !textChild) {\n      throw new Error('Expected span')\n    }\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [{_key: block._key}, 'children', {_key: textChild._key}, 'text']\n    const beforeBlock = beforeValue[operation.path[0]]\n    const prevTextChild = editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text\n    const patch = diffMatchPatch(prevText || '', textChild.text, path)\n    return patch.value ? [patch] : []\n  }\n\n  function setNodePatch(editor: PortableTextSlateEditor, operation: SetNodeOperation) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]]\n      if (typeof block._key !== 'string') {\n        throw new Error('Expected block to have a _key')\n      }\n      const setNode = omitBy(\n        {...editor.children[operation.path[0]], ...operation.newProperties},\n        isUndefined,\n      ) as unknown as Descendant\n      return [set(fromSlateValue([setNode], textBlockName)[0], [{_key: block._key}])]\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]]\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]]\n        if (child) {\n          const blockKey = block._key\n          const childKey = child._key\n          const patches: Patch[] = []\n          Object.keys(operation.newProperties).forEach((keyName) => {\n            const val = get(operation.newProperties, keyName)\n            patches.push(set(val, [{_key: blockKey}, 'children', {_key: childKey}, keyName]))\n          })\n          return patches\n        }\n        throw new Error('Could not find a valid child')\n      }\n      throw new Error('Could not find a valid block')\n    } else {\n      throw new Error(`Unexpected path encountered: ${JSON.stringify(operation.path)}`)\n    }\n  }\n\n  function insertNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    beforeValue: Descendant[],\n  ): Patch[] {\n    const block = beforeValue[operation.path[0]]\n    const isTextBlock = editor.isTextBlock(block)\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? 'before' : 'after'\n      const beforeBlock = beforeValue[operation.path[0] - 1]\n      const targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key\n      if (targetKey) {\n        return [\n          insert([fromSlateValue([operation.node as Descendant], textBlockName)[0]], position, [\n            {_key: targetKey},\n          ]),\n        ]\n      }\n      return [\n        setIfMissing(beforeValue, []),\n        insert([fromSlateValue([operation.node as Descendant], textBlockName)[0]], 'before', [\n          operation.path[0],\n        ]),\n      ]\n    } else if (isTextBlock && operation.path.length === 2 && editor.children[operation.path[0]]) {\n      const position =\n        block.children.length === 0 || !block.children[operation.path[1] - 1] ? 'before' : 'after'\n      const node = {...operation.node} as Descendant\n      if (!node._type && Text.isText(node)) {\n        node._type = 'span'\n        node.marks = []\n      }\n      const blk = fromSlateValue(\n        [\n          {\n            _key: 'bogus',\n            _type: textBlockName,\n            children: [node],\n          },\n        ],\n        textBlockName,\n      )[0] as PortableTextTextBlock\n      const child = blk.children[0]\n      return [\n        insert([child], position, [\n          {_key: block._key},\n          'children',\n          block.children.length <= 1 || !block.children[operation.path[1] - 1]\n            ? 0\n            : {_key: block.children[operation.path[1] - 1]._key},\n        ]),\n      ]\n    }\n    debug('Something was inserted into a void block. Not producing editor patches.')\n    return []\n  }\n\n  function splitNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const splitBlock = editor.children[operation.path[0]]\n    if (!editor.isTextBlock(splitBlock)) {\n      throw new Error(\n        `Block with path ${JSON.stringify(\n          operation.path[0],\n        )} is not a text block and can't be split`,\n      )\n    }\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]]\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue(\n          [editor.children[operation.path[0] + 1]],\n          textBlockName,\n        )[0]\n        if (targetValue) {\n          patches.push(insert([targetValue], 'after', [{_key: splitBlock._key}]))\n          const spansToUnset = oldBlock.children.slice(operation.position)\n          spansToUnset.forEach((span) => {\n            const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n            patches.push(unset(path))\n          })\n        }\n      }\n      return patches\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]]\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = (\n          fromSlateValue(\n            [\n              {\n                ...splitBlock,\n                children: splitBlock.children.slice(operation.path[1] + 1, operation.path[1] + 2),\n              } as Descendant,\n            ],\n            textBlockName,\n          )[0] as PortableTextTextBlock\n        ).children\n\n        patches.push(\n          insert(targetSpans, 'after', [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n          ]),\n        )\n        patches.push(\n          set(splitSpan.text, [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n            'text',\n          ]),\n        )\n      }\n      return patches\n    }\n    return patches\n  }\n\n  function removeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      // Remove a single block\n      if (block && block._key) {\n        return [unset([{_key: block._key}])]\n      }\n      throw new Error('Block not found')\n    } else if (editor.isTextBlock(block) && operation.path.length === 2) {\n      const spanToRemove =\n        editor.isTextBlock(block) && block.children && block.children[operation.path[1]]\n      if (spanToRemove) {\n        return [unset([{_key: block._key}, 'children', {_key: spanToRemove._key}])]\n      }\n      debug('Span not found in editor trying to remove node')\n      return []\n    } else {\n      debug('Not creating patch inside object block')\n      return []\n    }\n  }\n\n  function mergeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n\n    const block = beforeValue[operation.path[0]]\n    const targetBlock = editor.children[operation.path[0]]\n\n    if (operation.path.length === 1) {\n      if (block?._key) {\n        const newBlock = fromSlateValue([editor.children[operation.path[0] - 1]], textBlockName)[0]\n        patches.push(set(newBlock, [{_key: newBlock._key}]))\n        patches.push(unset([{_key: block._key}]))\n      } else {\n        throw new Error('Target key not found!')\n      }\n    } else if (operation.path.length === 2 && editor.isTextBlock(targetBlock)) {\n      const mergedSpan =\n        (editor.isTextBlock(block) && block.children[operation.path[1]]) || undefined\n      const targetSpan = targetBlock.children[operation.path[1] - 1]\n      if (editor.isTextSpan(targetSpan)) {\n        // Set the merged span with it's new value\n        patches.push(\n          set(targetSpan.text, [{_key: block._key}, 'children', {_key: targetSpan._key}, 'text']),\n        )\n        if (mergedSpan) {\n          patches.push(unset([{_key: block._key}, 'children', {_key: mergedSpan._key}]))\n        }\n      }\n    } else {\n      debug(\"Void nodes can't be merged, not creating any patches\")\n    }\n    return patches\n  }\n\n  function moveNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const block = beforeValue[operation.path[0]]\n    const targetBlock = beforeValue[operation.newPath[0]]\n    if (operation.path.length === 1) {\n      const position: InsertPosition = operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n      patches.push(unset([{_key: block._key}]))\n      patches.push(\n        insert([fromSlateValue([block], textBlockName)[0]], position, [{_key: targetBlock._key}]),\n      )\n    } else if (\n      operation.path.length === 2 &&\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(targetBlock)\n    ) {\n      const child = block.children[operation.path[1]]\n      const targetChild = targetBlock.children[operation.newPath[1]]\n      const position = operation.newPath[1] === targetBlock.children.length ? 'after' : 'before'\n      const childToInsert = (fromSlateValue([block], textBlockName)[0] as PortableTextTextBlock)\n        .children[operation.path[1]]\n      patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n      patches.push(\n        insert([childToInsert], position, [\n          {_key: targetBlock._key},\n          'children',\n          {_key: targetChild._key},\n        ]),\n      )\n    }\n    return patches\n  }\n\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch,\n  }\n}\n","/* eslint-disable complexity */\n/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {flatten, isEqual, uniq} from 'lodash'\nimport {type Subject} from 'rxjs'\nimport {\n  type Descendant,\n  Editor,\n  Element,\n  type NodeEntry,\n  Path,\n  Range,\n  Text,\n  Transforms,\n} from 'slate'\n\nimport {\n  type EditorChange,\n  type PortableTextMemberSchemaTypes,\n  type PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toPortableTextRange} from '../../utils/ranges'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  types: PortableTextMemberSchemaTypes,\n  change$: Subject<EditorChange>,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = types.decorators.map((t) => t.value)\n\n    // Selections are normally emitted automatically via\n    // onChange, but they will keep the object reference if\n    // the selection is the same as the previous.\n    // When toggling marks however, it might not even\n    // result in a onChange event (for instance when nothing is selected),\n    // and if you toggle marks on a block with one single span,\n    // the selection would also stay the same.\n    // We should force a new selection object here when toggling marks,\n    // because toolbars and other things can very conveniently\n    // be memo'ed on the editor selection to update itself.\n    const forceNewSelection = () => {\n      if (editor.selection) {\n        Transforms.select(editor, {...editor.selection})\n        editor.selection = {...editor.selection} // Ensure new object\n      }\n      const ptRange = toPortableTextRange(editor.children, editor.selection, types)\n      change$.next({type: 'selection', selection: ptRange})\n    }\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      normalizeNode(nodeEntry)\n      if (\n        editor.operations.some((op) =>\n          [\n            'insert_node',\n            'insert_text',\n            'merge_node',\n            'remove_node',\n            'remove_text',\n            'set_node',\n          ].includes(op.type),\n        )\n      ) {\n        mergeSpans(editor)\n      }\n      const [node, path] = nodeEntry\n      const isSpan = Text.isText(node) && node._type === types.span.name\n      const isTextBlock = editor.isTextBlock(node)\n      if (isSpan || isTextBlock) {\n        if (isSpan && !Array.isArray(node.marks)) {\n          debug('Adding .marks to span node')\n          Transforms.setNodes(editor, {marks: []}, {at: path})\n          editor.onChange()\n        }\n        for (const op of editor.operations) {\n          // Make sure markDefs are copied over when merging two blocks.\n          if (\n            op.type === 'merge_node' &&\n            op.path.length === 1 &&\n            'markDefs' in op.properties &&\n            op.properties._type === types.block.name &&\n            Array.isArray(op.properties.markDefs) &&\n            op.properties.markDefs.length > 0 &&\n            op.path[0] - 1 >= 0\n          ) {\n            const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n            debug(`Copying markDefs over to merged block`, op)\n            if (editor.isTextBlock(targetBlock)) {\n              const oldDefs = (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n              const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n              const isNormalized = isEqual(newMarkDefs, targetBlock.markDefs)\n              // eslint-disable-next-line max-depth\n              if (!isNormalized) {\n                Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: targetPath, voids: false})\n                editor.onChange()\n              }\n            }\n          }\n          // Make sure markDefs are copied over to new block when splitting a block.\n          if (\n            op.type === 'split_node' &&\n            op.path.length === 1 &&\n            Element.isElementProps(op.properties) &&\n            op.properties._type === types.block.name &&\n            'markDefs' in op.properties &&\n            Array.isArray(op.properties.markDefs) &&\n            op.properties.markDefs.length > 0 &&\n            op.path[0] + 1 < editor.children.length\n          ) {\n            const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] + 1])\n            debug(`Copying markDefs over to split block`, op)\n            if (editor.isTextBlock(targetBlock)) {\n              const oldDefs = (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n              Transforms.setNodes(\n                editor,\n                {markDefs: uniq([...oldDefs, ...op.properties.markDefs])},\n                {at: targetPath, voids: false},\n              )\n              editor.onChange()\n            }\n          }\n          // Make sure marks are reset, if a block is split at the end.\n          if (\n            op.type === 'split_node' &&\n            op.path.length === 2 &&\n            (op.properties as unknown as Descendant)._type === types.span.name &&\n            'marks' in op.properties &&\n            Array.isArray(op.properties.marks) &&\n            op.properties.marks.length > 0 &&\n            op.path[0] + 1 < editor.children.length\n          ) {\n            const [child, childPath] = Editor.node(editor, [op.path[0] + 1, 0])\n            if (\n              Text.isText(child) &&\n              child.text === '' &&\n              Array.isArray(child.marks) &&\n              child.marks.length > 0\n            ) {\n              Transforms.setNodes(editor, {marks: []}, {at: childPath, voids: false})\n              editor.onChange()\n            }\n          }\n          // Make sure markDefs are reset, if a block is split at start.\n          if (\n            op.type === 'split_node' &&\n            op.path.length === 1 &&\n            (op.properties as unknown as Descendant)._type === types.block.name &&\n            'markDefs' in op.properties &&\n            Array.isArray(op.properties.markDefs) &&\n            op.properties.markDefs.length > 0\n          ) {\n            const [block, blockPath] = Editor.node(editor, [op.path[0]])\n            if (\n              editor.isTextBlock(block) &&\n              block.children.length === 1 &&\n              block.markDefs &&\n              block.markDefs.length > 0 &&\n              Text.isText(block.children[0]) &&\n              block.children[0].text === '' &&\n              (!block.children[0].marks || block.children[0].marks.length === 0)\n            ) {\n              Transforms.setNodes(editor, {markDefs: []}, {at: blockPath})\n              editor.onChange()\n            }\n          }\n        }\n        // Empty marks if text is empty\n        if (\n          isSpan &&\n          Array.isArray(node.marks) &&\n          (!node.marks || (node.marks.length > 0 && node.text === ''))\n        ) {\n          Transforms.setNodes(editor, {marks: []}, {at: path, voids: false})\n          editor.onChange()\n        }\n      }\n      // Check consistency of markDefs\n      if (\n        isTextBlock &&\n        editor.operations.some((op) =>\n          ['split_node', 'remove_node', 'remove_text', 'merge_node'].includes(op.type),\n        )\n      ) {\n        normalizeMarkDefs(editor, types)\n      }\n    }\n\n    // Special hook before inserting text at the end of an annotation.\n    editor.apply = (op) => {\n      if (op.type === 'insert_text') {\n        const {selection} = editor\n        if (\n          selection &&\n          Range.isCollapsed(selection) &&\n          Editor.marks(editor)?.marks?.some((mark) => !decorators.includes(mark))\n        ) {\n          const [node] = Array.from(\n            Editor.nodes(editor, {\n              mode: 'lowest',\n              at: selection.focus,\n              match: (n) => (n as unknown as Descendant)._type === types.span.name,\n              voids: false,\n            }),\n          )[0] || [undefined]\n          if (\n            Text.isText(node) &&\n            node.text.length === selection.focus.offset &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0\n          ) {\n            apply(op)\n            Transforms.splitNodes(editor, {\n              match: Text.isText,\n              at: {...selection.focus, offset: selection.focus.offset},\n            })\n            const marksWithoutAnnotationMarks: string[] = (\n              {\n                ...(Editor.marks(editor) || {}),\n              }.marks || []\n            ).filter((mark) => decorators.includes(mark))\n            Transforms.setNodes(\n              editor,\n              {marks: marksWithoutAnnotationMarks},\n              {at: Path.next(selection.focus.path)},\n            )\n            debug('Inserting text at end of annotation')\n            return\n          }\n        }\n      }\n      apply(op)\n    }\n\n    // Override built in addMark function\n    editor.addMark = (mark: string) => {\n      if (editor.selection) {\n        if (Range.isExpanded(editor.selection)) {\n          // Split if needed\n          Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n          // Use new selection\n          const splitTextNodes = [\n            ...Editor.nodes(editor, {at: editor.selection, match: Text.isText}),\n          ]\n          const shouldRemoveMark = flatten(\n            splitTextNodes.map((item) => item[0]).map((node) => node.marks),\n          ).includes(mark)\n          if (shouldRemoveMark) {\n            editor.removeMark(mark)\n            return editor\n          }\n          Editor.withoutNormalizing(editor, () => {\n            splitTextNodes.forEach(([node, path]) => {\n              const marks = [\n                ...(Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark,\n                ),\n                mark,\n              ]\n              Transforms.setNodes(\n                editor,\n                {marks},\n                {at: path, match: Text.isText, split: true, hanging: true},\n              )\n            })\n          })\n          Editor.normalize(editor)\n        } else {\n          const existingMarks: string[] =\n            {\n              ...(Editor.marks(editor) || {}),\n            }.marks || []\n          const marks = {\n            ...(Editor.marks(editor) || {}),\n            marks: [...existingMarks, mark],\n          }\n          editor.marks = marks as Text\n          forceNewSelection()\n          return editor\n        }\n        editor.onChange()\n        forceNewSelection()\n      }\n      return editor\n    }\n\n    // Override built in removeMark function\n    editor.removeMark = (mark: string) => {\n      const {selection} = editor\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Editor.withoutNormalizing(editor, () => {\n            // Split if needed\n            Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n            if (editor.selection) {\n              const splitTextNodes = [\n                ...Editor.nodes(editor, {at: editor.selection, match: Text.isText}),\n              ]\n              splitTextNodes.forEach(([node, path]) => {\n                const block = editor.children[path[0]]\n                if (Element.isElement(block) && block.children.includes(node)) {\n                  Transforms.setNodes(\n                    editor,\n                    {\n                      marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                        (eMark: string) => eMark !== mark,\n                      ),\n                      _type: 'span',\n                    },\n                    {at: path},\n                  )\n                }\n              })\n            }\n          })\n          Editor.normalize(editor)\n        } else {\n          const existingMarks: string[] =\n            {\n              ...(Editor.marks(editor) || {}),\n            }.marks || []\n          const marks = {\n            ...(Editor.marks(editor) || {}),\n            marks: existingMarks.filter((eMark) => eMark !== mark),\n          } as Text\n          editor.marks = {marks: marks.marks, _type: 'span'} as Text\n          forceNewSelection()\n          return editor\n        }\n        editor.onChange()\n        forceNewSelection()\n      }\n      return editor\n    }\n\n    editor.pteIsMarkActive = (mark: string): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      let existingMarks =\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      if (Range.isExpanded(editor.selection)) {\n        Array.from(Editor.nodes(editor, {match: Text.isText, at: editor.selection})).forEach(\n          (n) => {\n            const [node] = n as NodeEntry<Text>\n            existingMarks = uniq([...existingMarks, ...((node.marks as string[]) || [])])\n          },\n        )\n      }\n      return existingMarks.includes(mark)\n    }\n\n    // Custom editor function to toggle a mark\n    editor.pteToggleMark = (mark: string) => {\n      const isActive = editor.pteIsMarkActive(mark)\n      if (isActive) {\n        debug(`Remove mark '${mark}'`)\n        Editor.removeMark(editor, mark)\n      } else {\n        debug(`Add mark '${mark}'`)\n        Editor.addMark(editor, mark, true)\n      }\n    }\n    return editor\n  }\n\n  /**\n   * Normalize re-marked spans in selection\n   */\n  function mergeSpans(editor: PortableTextSlateEditor) {\n    const {selection} = editor\n    if (selection) {\n      for (const [node, path] of Array.from(\n        Editor.nodes(editor, {\n          at: Editor.range(editor, [selection.anchor.path[0]], [selection.focus.path[0]]),\n        }),\n      ).reverse()) {\n        const [parent] = path.length > 1 ? Editor.node(editor, Path.parent(path)) : [undefined]\n        const nextPath = [path[0], path[1] + 1]\n        if (editor.isTextBlock(parent)) {\n          const nextNode = parent.children[nextPath[1]]\n          if (Text.isText(node) && Text.isText(nextNode) && isEqual(nextNode.marks, node.marks)) {\n            debug('Merging spans')\n            Transforms.mergeNodes(editor, {at: nextPath, voids: true})\n            editor.onChange()\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Normalize markDefs, removing those not in use.\n * @internal\n */\nexport function normalizeMarkDefs(\n  editor: PortableTextSlateEditor,\n  types: PortableTextMemberSchemaTypes,\n): void {\n  const {selection} = editor\n  if (selection) {\n    const blocks = Editor.nodes(editor, {\n      at: selection,\n      match: (n) => n._type === types.block.name,\n    })\n    for (const [block, path] of blocks) {\n      if (editor.isTextBlock(block)) {\n        const newMarkDefs = (block.markDefs || []).filter((def) => {\n          return block.children.find((child) => {\n            return (\n              Text.isText(child) && Array.isArray(child.marks) && child.marks.includes(def._key)\n            )\n          })\n        })\n        if (!isEqual(newMarkDefs, block.markDefs)) {\n          debug('Removing markDef not in use')\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: newMarkDefs,\n            },\n            {at: path},\n          )\n          editor.onChange()\n        }\n      }\n    }\n  }\n}\n","import {\n  type ObjectSchemaType,\n  type Path,\n  type PortableTextBlock,\n  type PortableTextChild,\n  type PortableTextObject,\n  type PortableTextTextBlock,\n  type SchemaType,\n} from '@sanity/types'\nimport {Editor, Element as SlateElement, Node, Range, Text, Transforms} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport {type DOMNode} from 'slate-react/dist/utils/dom'\n\nimport {\n  type EditableAPIDeleteOptions,\n  type EditorSelection,\n  type PortableTextMemberSchemaTypes,\n  type PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toPortableTextRange, toSlateRange} from '../../utils/ranges'\nimport {fromSlateValue, isEqualToEmptyEditor, toSlateValue} from '../../utils/values'\nimport {KEY_TO_VALUE_ELEMENT, SLATE_TO_PORTABLE_TEXT_RANGE} from '../../utils/weakMaps'\nimport {type PortableTextEditor} from '../PortableTextEditor'\nimport {normalizeMarkDefs} from './createWithPortableTextMarkModel'\n\nconst debug = debugWithName('API:editable')\n\nexport function createWithEditableAPI(\n  portableTextEditor: PortableTextEditor,\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n) {\n  return function withEditableAPI(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    portableTextEditor.setEditable({\n      focus: (): void => {\n        ReactEditor.focus(editor)\n      },\n      blur: (): void => {\n        ReactEditor.blur(editor)\n      },\n      toggleMark: (mark: string): void => {\n        editor.pteToggleMark(mark)\n      },\n      toggleList: (listStyle: string): void => {\n        editor.pteToggleListItem(listStyle)\n      },\n      toggleBlockStyle: (blockStyle: string): void => {\n        editor.pteToggleBlockStyle(blockStyle)\n      },\n      isMarkActive: (mark: string): boolean => {\n        // Try/catch this, as Slate may error because the selection is currently wrong\n        // TODO: catch only relevant error from Slate\n        try {\n          return editor.pteIsMarkActive(mark)\n        } catch (err) {\n          console.warn(err)\n          return false\n        }\n      },\n      marks: (): string[] => {\n        return (\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        )\n      },\n      undo: (): void => editor.undo(),\n      redo: (): void => editor.redo(),\n      select: (selection: EditorSelection): void => {\n        const slateSelection = toSlateRange(selection, editor)\n        if (slateSelection) {\n          Transforms.select(editor, slateSelection)\n        } else {\n          Transforms.deselect(editor)\n        }\n        editor.onChange()\n      },\n      focusBlock: (): PortableTextBlock | undefined => {\n        if (editor.selection) {\n          const block = Node.descendant(editor, editor.selection.focus.path.slice(0, 1))\n          if (block) {\n            return fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0]\n          }\n        }\n        return undefined\n      },\n      focusChild: (): PortableTextChild | undefined => {\n        if (editor.selection) {\n          const block = Node.descendant(editor, editor.selection.focus.path.slice(0, 1))\n          if (block && editor.isTextBlock(block)) {\n            const ptBlock = fromSlateValue(\n              [block],\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            )[0] as PortableTextTextBlock\n            return ptBlock.children[editor.selection.focus.path[1]]\n          }\n        }\n        return undefined\n      },\n      insertChild: (type: SchemaType, value?: {[prop: string]: any}): Path => {\n        if (!editor.selection) {\n          throw new Error('The editor has no selection')\n        }\n        const [focusBlock] = Array.from(\n          Editor.nodes(editor, {\n            at: editor.selection.focus.path.slice(0, 1),\n            match: (n) => n._type === types.block.name,\n          }),\n        )[0] || [undefined]\n        if (!focusBlock) {\n          throw new Error('No focused text block')\n        }\n        if (\n          type.name !== types.span.name &&\n          !types.inlineObjects.some((t) => t.name === type.name)\n        ) {\n          throw new Error('This type cannot be inserted as a child to a text block')\n        }\n        const block = toSlateValue(\n          [\n            {\n              _key: keyGenerator(),\n              _type: types.block.name,\n              children: [\n                {\n                  _key: keyGenerator(),\n                  _type: type.name,\n                  ...(value ? value : {}),\n                },\n              ],\n            },\n          ],\n          portableTextEditor,\n        )[0] as unknown as SlateElement\n        const child = block.children[0]\n        const focusChildPath = editor.selection.focus.path.slice(0, 2)\n        const isSpanNode = child._type === types.span.name\n        const focusNode = Node.get(editor, focusChildPath)\n\n        // If we are inserting a span, and currently have focus on an inline object,\n        // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n        if (isSpanNode && focusNode._type !== types.span.name) {\n          debug('Inserting span child next to inline object child, moving selection + 1')\n          editor.move({distance: 1, unit: 'character'})\n        }\n\n        Transforms.insertNodes(editor, child, {\n          select: true,\n          at: editor.selection,\n        })\n        editor.onChange()\n        return (\n          toPortableTextRange(\n            fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n            editor.selection,\n            types,\n          )?.focus.path || []\n        )\n      },\n      insertBlock: (type: SchemaType, value?: {[prop: string]: any}): Path => {\n        if (!editor.selection) {\n          throw new Error('The editor has no selection')\n        }\n        const block = toSlateValue(\n          [\n            {\n              _key: keyGenerator(),\n              _type: type.name,\n              ...(value ? value : {}),\n            },\n          ],\n          portableTextEditor,\n        )[0] as unknown as Node\n        const [focusBlock] = Array.from(\n          Editor.nodes(editor, {\n            at: editor.selection.focus.path.slice(0, 1),\n            match: (n) => n._type === types.block.name,\n          }),\n        )[0] || [undefined]\n\n        const isEmptyTextBlock = focusBlock && isEqualToEmptyEditor([focusBlock], types)\n\n        if (isEmptyTextBlock) {\n          // If the text block is empty, remove it before inserting the new block.\n          Transforms.removeNodes(editor, {at: editor.selection})\n        }\n\n        Editor.insertNode(editor, block)\n        editor.onChange()\n        return (\n          toPortableTextRange(\n            fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n            editor.selection,\n            types,\n          )?.focus.path || []\n        )\n      },\n      hasBlockStyle: (style: string): boolean => {\n        try {\n          return editor.pteHasBlockStyle(style)\n        } catch (err) {\n          // This is fine.\n          // debug(err)\n          return false\n        }\n      },\n      hasListStyle: (listStyle: string): boolean => {\n        try {\n          return editor.pteHasListStyle(listStyle)\n        } catch (err) {\n          // This is fine.\n          // debug(err)\n          return false\n        }\n      },\n      isVoid: (element: PortableTextBlock | PortableTextChild) => {\n        return ![types.block.name, types.span.name].includes(element._type)\n      },\n      findByPath: (\n        path: Path,\n      ): [PortableTextBlock | PortableTextChild | undefined, Path | undefined] => {\n        const slatePath = toSlateRange(\n          {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n          editor,\n        )\n        if (slatePath) {\n          const [block, blockPath] = Editor.node(editor, slatePath.focus.path.slice(0, 1))\n          if (block && blockPath && typeof block._key === 'string') {\n            if (path.length === 1 && slatePath.focus.path.length === 1) {\n              return [fromSlateValue([block], types.block.name)[0], [{_key: block._key}]]\n            }\n            const ptBlock = fromSlateValue(\n              [block],\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            )[0]\n            if (editor.isTextBlock(ptBlock)) {\n              const ptChild = ptBlock.children[slatePath.focus.path[1]]\n              if (ptChild) {\n                return [ptChild, [{_key: block._key}, 'children', {_key: ptChild._key}]]\n              }\n            }\n          }\n        }\n        return [undefined, undefined]\n      },\n      findDOMNode: (element: PortableTextBlock | PortableTextChild): DOMNode | undefined => {\n        let node: DOMNode | undefined\n        try {\n          const [item] = Array.from(\n            Editor.nodes(editor, {\n              at: [],\n              match: (n) => n._key === element._key,\n            }) || [],\n          )[0] || [undefined]\n          node = ReactEditor.toDOMNode(editor, item)\n        } catch (err) {\n          // Nothing\n        }\n        return node\n      },\n      activeAnnotations: (): PortableTextObject[] => {\n        if (!editor.selection || editor.selection.focus.path.length < 2) {\n          return []\n        }\n        try {\n          const activeAnnotations: PortableTextObject[] = []\n          const spans = Editor.nodes(editor, {\n            at: editor.selection,\n            match: (node) =>\n              Text.isText(node) &&\n              node.marks !== undefined &&\n              Array.isArray(node.marks) &&\n              node.marks.length > 0,\n          })\n          for (const [span, path] of spans) {\n            const [block] = Editor.node(editor, path, {depth: 1})\n            if (editor.isTextBlock(block)) {\n              block.markDefs?.forEach((def) => {\n                if (\n                  Text.isText(span) &&\n                  span.marks &&\n                  Array.isArray(span.marks) &&\n                  span.marks.includes(def._key)\n                ) {\n                  activeAnnotations.push(def)\n                }\n              })\n            }\n          }\n          return activeAnnotations\n        } catch (err) {\n          return []\n        }\n      },\n      addAnnotation: (\n        type: ObjectSchemaType,\n        value?: {[prop: string]: unknown},\n      ): {spanPath: Path; markDefPath: Path} | undefined => {\n        const {selection} = editor\n        if (selection) {\n          const [block] = Editor.node(editor, selection.focus, {depth: 1})\n          if (SlateElement.isElement(block) && block._type === types.block.name) {\n            const annotationKey = keyGenerator()\n            if (editor.isTextBlock(block)) {\n              Transforms.setNodes(\n                editor,\n                {\n                  markDefs: [\n                    ...(block.markDefs || []),\n                    {_type: type.name, _key: annotationKey, ...value} as PortableTextObject,\n                  ],\n                },\n                {at: selection.focus},\n              )\n              editor.onChange()\n              if (Range.isCollapsed(selection)) {\n                editor.pteExpandToWord()\n                editor.onChange()\n              }\n              const [textNode] = Editor.node(editor, selection.focus, {depth: 2})\n              if (editor.selection) {\n                Editor.withoutNormalizing(editor, () => {\n                  // Split if needed\n                  Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n                  if (editor.selection && Text.isText(textNode)) {\n                    Transforms.setNodes(\n                      editor,\n                      {\n                        marks: [...((textNode.marks || []) as string[]), annotationKey],\n                      },\n                      {\n                        at: editor.selection,\n                        match: (n) => n._type === types.span.name,\n                      },\n                    )\n                    editor.onChange()\n                  }\n                })\n                Editor.normalize(editor)\n                editor.onChange()\n                const newSelection = toPortableTextRange(\n                  fromSlateValue(\n                    editor.children,\n                    types.block.name,\n                    KEY_TO_VALUE_ELEMENT.get(editor),\n                  ),\n                  editor.selection,\n                  types,\n                )\n                // eslint-disable-next-line max-depth\n                if (newSelection && typeof block._key === 'string') {\n                  // Insert an empty string to continue writing non-annotated text\n                  Editor.withoutNormalizing(editor, () => {\n                    if (editor.selection) {\n                      Transforms.insertNodes(\n                        editor,\n                        [{_type: 'span', text: '', marks: [], _key: keyGenerator()}],\n                        {\n                          at: Range.end(editor.selection),\n                        },\n                      )\n                      editor.onChange()\n                    }\n                  })\n                  return {\n                    spanPath: newSelection.focus.path,\n                    markDefPath: [{_key: block._key}, 'markDefs', {_key: annotationKey}],\n                  }\n                }\n              }\n            }\n          }\n        }\n        return undefined\n      },\n      delete: (selection: EditorSelection, options?: EditableAPIDeleteOptions): void => {\n        if (selection) {\n          const range = toSlateRange(selection, editor)\n          const hasRange = range && range.anchor.path.length > 0 && range.focus.path.length > 0\n          if (!hasRange) {\n            throw new Error('Invalid range')\n          }\n          if (range) {\n            if (!options?.mode || options?.mode === 'selected') {\n              debug(`Deleting content in selection`)\n              Transforms.delete(editor, {\n                at: range,\n                hanging: true,\n                voids: true,\n              })\n              editor.onChange()\n              return\n            }\n            if (options?.mode === 'blocks') {\n              debug(`Deleting blocks touched by selection`)\n              Transforms.removeNodes(editor, {\n                at: range,\n                voids: true,\n                match: (node) => {\n                  return (\n                    editor.isTextBlock(node) ||\n                    (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                  )\n                },\n              })\n            }\n            if (options?.mode === 'children') {\n              debug(`Deleting children touched by selection`)\n              Transforms.removeNodes(editor, {\n                at: range,\n                voids: true,\n                match: (node) => {\n                  return (\n                    node._type === types.span.name || // Text children\n                    (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                  )\n                },\n              })\n            }\n            // If the editor was emptied, insert a placeholder block\n            // directly into the editor's children. We don't want to do this\n            // through a Transform (because that would trigger a change event\n            // that would insert the placeholder into the actual value\n            // which should remain empty)\n            if (editor.children.length === 0) {\n              editor.children = [editor.createPlaceholderBlock()]\n            }\n            editor.onChange()\n          }\n        }\n      },\n      removeAnnotation: (type: ObjectSchemaType): void => {\n        let {selection} = editor\n        debug('Removing annotation', type)\n        if (selection) {\n          // Select the whole annotation if collapsed\n          if (Range.isCollapsed(selection)) {\n            const [node, nodePath] = Editor.node(editor, selection, {depth: 2})\n            if (Text.isText(node) && node.marks && typeof node.text === 'string') {\n              Transforms.select(editor, nodePath)\n              selection = editor.selection\n            }\n          }\n          // Do this without normalization or span references will be unstable!\n          Editor.withoutNormalizing(editor, () => {\n            if (selection && Range.isExpanded(selection)) {\n              selection = editor.selection\n              if (!selection) {\n                return\n              }\n              // Find the selected block, to identify the annotation to remove\n              const blocks = [\n                ...Editor.nodes(editor, {\n                  at: selection,\n                  match: (node) => {\n                    return (\n                      editor.isTextBlock(node) &&\n                      Array.isArray(node.markDefs) &&\n                      node.markDefs.some((def) => def._type === type.name)\n                    )\n                  },\n                }),\n              ]\n              const removedMarks: string[] = []\n\n              // Removes the marks from the text nodes\n              blocks.forEach(([block]) => {\n                if (editor.isTextBlock(block) && Array.isArray(block.markDefs)) {\n                  const marksToRemove = block.markDefs.filter((def) => def._type === type.name)\n                  marksToRemove.forEach((def) => {\n                    if (!removedMarks.includes(def._key)) removedMarks.push(def._key)\n                    Editor.removeMark(editor, def._key)\n                  })\n                }\n              })\n              normalizeMarkDefs(editor, types)\n            }\n          })\n          Editor.normalize(editor)\n          editor.onChange()\n        }\n      },\n      getSelection: (): EditorSelection | null => {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            return existing\n          }\n          ptRange = toPortableTextRange(\n            fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n            editor.selection,\n            types,\n          )\n          SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n        }\n        return ptRange\n      },\n      getValue: () => {\n        return fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))\n      },\n      isCollapsedSelection: () => {\n        return !!editor.selection && Range.isCollapsed(editor.selection)\n      },\n      isExpandedSelection: () => {\n        return !!editor.selection && Range.isExpanded(editor.selection)\n      },\n      insertBreak: () => {\n        editor.insertBreak()\n        editor.onChange()\n      },\n      getFragment: () => {\n        return fromSlateValue(editor.getFragment(), types.block.name)\n      },\n    })\n    return editor\n  }\n}\n","import {type PortableTextSlateEditor} from '../../types/editor'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(maxBlocks: number) {\n  return function withMaxBlocks(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      const rows = maxBlocks\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' || operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {type Editor} from 'slate'\n\nexport const PRESERVE_KEYS: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withPreserveKeys(editor: Editor, fn: () => void): void {\n  const prev = isPreservingKeys(editor)\n  PRESERVE_KEYS.set(editor, true)\n  fn()\n  PRESERVE_KEYS.set(editor, prev)\n}\n\nexport function isPreservingKeys(editor: Editor): boolean | undefined {\n  return PRESERVE_KEYS.get(editor)\n}\n","import {Editor, Element, Node, Transforms} from 'slate'\n\nimport {type PortableTextMemberSchemaTypes, type PortableTextSlateEditor} from '../../types/editor'\nimport {isPreservingKeys, PRESERVE_KEYS} from '../../utils/withPreserveKeys'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(\n  schemaTypes: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n) {\n  return function withKeys(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    PRESERVE_KEYS.set(editor, false)\n    const {apply, normalizeNode} = editor\n    editor.apply = (operation) => {\n      if (operation.type === 'split_node') {\n        operation.properties = {\n          ...operation.properties,\n          _key: keyGenerator(),\n        }\n      }\n      if (operation.type === 'insert_node') {\n        // Must be given a new key or adding/removing marks while typing gets in trouble (duped keys)!\n        const withNewKey = !isPreservingKeys(editor) || !('_key' in operation.node)\n        if (!Editor.isEditor(operation.node)) {\n          operation.node = {\n            ...operation.node,\n            ...(withNewKey ? {_key: keyGenerator()} : {}),\n          }\n        }\n      }\n      apply(operation)\n    }\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (Element.isElement(node) && node._type === schemaTypes.block.name) {\n        // Set key on block itself\n        if (!node._key) {\n          Transforms.setNodes(editor, {_key: keyGenerator()}, {at: path})\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            Transforms.setNodes(editor, {_key: keyGenerator()}, {at: childPath})\n            return\n          }\n        }\n      }\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","export const BEFORE = 'before'\nexport const AFTER = 'after'\n\nexport default function insert(array: any[], position: string, index: number, ...args: any[]) {\n  if (position !== BEFORE && position !== AFTER) {\n    throw new Error(`Invalid position \"${position}\", must be either ${BEFORE} or ${AFTER}`)\n  }\n\n  const items = flatten(...args)\n\n  if (array.length === 0) {\n    return items\n  }\n\n  const len = array.length\n  const idx = Math.abs((len + index) % len) % len\n\n  const normalizedIdx = position === 'after' ? idx + 1 : idx\n\n  const copy = array.slice()\n  copy.splice(normalizedIdx, 0, ...flatten(items))\n  return copy\n}\n\nfunction flatten(...values: any[]) {\n  return values.reduce((prev, item) => prev.concat(item), [])\n}\n","import {type PathSegment} from '@sanity/types'\nimport {findIndex} from 'lodash'\n\nimport applyPatch from './applyPatch'\nimport insert from './arrayInsert'\n\nconst hasOwn = Object.prototype.hasOwnProperty.call.bind(Object.prototype.hasOwnProperty)\n\nfunction move(arr: any[], from: number, to: any) {\n  const nextValue = arr.slice()\n  const val = nextValue[from]\n  nextValue.splice(from, 1)\n  nextValue.splice(to, 0, val)\n  return nextValue\n}\n\nfunction findTargetIndex(array: any[], pathSegment: PathSegment) {\n  if (typeof pathSegment === 'number') {\n    return pathSegment\n  }\n  const index = findIndex(array, pathSegment)\n  return index === -1 ? false : index\n}\n\nexport default function apply(\n  value: any,\n  patch: {type: any; path: any; value: any; position: any; items: any},\n) {\n  const nextValue = value.slice() // make a copy for internal mutation\n\n  if (patch.path.length === 0) {\n    // its directed to me\n    if (patch.type === 'setIfMissing') {\n      if (!Array.isArray(patch.value)) {\n        // eslint-disable-line max-depth\n        throw new Error('Cannot set value of an array to a non-array')\n      }\n      return value === undefined ? patch.value : value\n    } else if (patch.type === 'set') {\n      if (!Array.isArray(patch.value)) {\n        // eslint-disable-line max-depth\n        throw new Error('Cannot set value of an array to a non-array')\n      }\n      return patch.value\n    } else if (patch.type === 'unset') {\n      return undefined\n    } else if (patch.type === 'move') {\n      if (!patch.value || !hasOwn(patch.value, 'from') || !hasOwn(patch.value, 'to')) {\n        // eslint-disable-line max-depth\n        throw new Error(\n          `Invalid value of 'move' patch. Expected a value with \"from\" and \"to\" indexes, instead got: ${JSON.stringify(\n            patch.value,\n          )}`,\n        )\n      }\n      return move(nextValue, patch.value.from, patch.value.to)\n    }\n    throw new Error(`Invalid array operation: ${patch.type}`)\n  }\n\n  const [head, ...tail] = patch.path\n\n  const index = findTargetIndex(value, head)\n\n  // If the given selector could not be found, return as-is\n  if (index === false) {\n    return nextValue\n  }\n\n  if (tail.length === 0) {\n    if (patch.type === 'insert') {\n      const {position, items} = patch\n      return insert(value, position, index, items)\n    } else if (patch.type === 'unset') {\n      if (typeof index !== 'number') {\n        throw new Error(`Expected array index to be a number, instead got \"${index}\"`)\n      }\n      nextValue.splice(index, 1)\n      return nextValue\n    }\n  }\n\n  // The patch is not directed to me\n  nextValue[index] = applyPatch(nextValue[index], {\n    ...patch,\n    path: tail,\n  })\n  return nextValue\n}\n","import {clone, isObject, omit} from 'lodash'\n\nimport applyPatch from './applyPatch'\n\nexport default function apply(value: any, patch: {type: any; path: any; value: any}) {\n  const nextValue = clone(value)\n  if (patch.path.length === 0) {\n    // its directed to me\n    if (patch.type === 'set') {\n      if (!isObject(patch.value)) {\n        // eslint-disable-line max-depth\n        throw new Error('Cannot set value of an object to a non-object')\n      }\n      return patch.value\n    } else if (patch.type === 'unset') {\n      return undefined\n    } else if (patch.type === 'setIfMissing') {\n      // console.log('IS IT missing?', value)\n      return value === undefined ? patch.value : value\n    }\n    throw new Error(`Invalid object operation: ${patch.type}`)\n  }\n\n  // The patch is not directed to me\n  const [head, ...tail] = patch.path\n  if (typeof head !== 'string') {\n    throw new Error(`Expected field name to be a string, instad got: ${head}`)\n  }\n\n  if (tail.length === 0 && patch.type === 'unset') {\n    return omit(nextValue, head)\n  }\n\n  nextValue[head] = applyPatch(nextValue[head], {\n    ...patch,\n    path: tail,\n  })\n  return nextValue\n}\n","const OPERATIONS: Record<string, any> = {\n  replace(_currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  set(_currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  setIfMissing(currentValue: any, nextValue: any) {\n    return currentValue === undefined ? nextValue : currentValue\n  },\n  unset(_currentValue: any, _nextValue: any) {\n    return undefined\n  },\n  inc(currentValue: any, nextValue: any) {\n    return currentValue + nextValue\n  },\n  dec(currentValue: any, nextValue: any) {\n    return currentValue - nextValue\n  },\n}\n\nconst SUPPORTED_PATCH_TYPES = Object.keys(OPERATIONS)\n\nexport default function apply(value: any, patch: any) {\n  if (!SUPPORTED_PATCH_TYPES.includes(patch.type)) {\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type,\n      )}\" for primitives. This is most likely a bug.`,\n    )\n  }\n\n  if (patch.path.length > 0) {\n    throw new Error(\n      `Cannot apply deep operations on primitive values. Received patch with type \"${\n        patch.type\n      }\" and path \"${patch.path\n        .map((path: any) => JSON.stringify(path))\n        .join('.')} that targeted the value \"${JSON.stringify(value)}\"`,\n    )\n  }\n  return OPERATIONS[patch.type](value, patch.value)\n}\n","import {applyPatches, parsePatch} from '@sanity/diff-match-patch'\n\ntype fn = (oldVal: any, newVal: any) => any\nconst OPERATIONS: Record<string, fn> = {\n  replace(currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  set(currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  setIfMissing(currentValue: undefined, nextValue: any) {\n    return currentValue === undefined ? nextValue : currentValue\n  },\n  unset(currentValue: any, nextValue: any) {\n    return undefined\n  },\n  diffMatchPatch(currentValue: string, nextValue: string): string {\n    const [result] = applyPatches(parsePatch(nextValue), currentValue, {\n      allowExceedingIndices: true,\n    })\n    return result\n  },\n}\n\nconst SUPPORTED_PATCH_TYPES = Object.keys(OPERATIONS)\n\nexport default function apply(\n  value: string,\n  patch: {type: string; path: any[]; value: any},\n): string {\n  if (!SUPPORTED_PATCH_TYPES.includes(patch.type)) {\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type,\n      )}\" for string. This is most likely a bug.`,\n    )\n  }\n\n  if (patch.path.length > 0) {\n    throw new Error(\n      `Cannot apply deep operations on string values. Received patch with type \"${\n        patch.type\n      }\" and path \"${patch.path.join('.')} that targeted the value \"${JSON.stringify(value)}\"`,\n    )\n  }\n  const func = OPERATIONS[patch.type]\n  if (func) {\n    return func(value, patch.value)\n  }\n  throw new Error('Unknown patch type')\n}\n","import {isObject, isString} from 'lodash'\n\nimport applyArrayPatch from './array'\nimport applyObjectPatch from './object'\nimport applyPrimitivePatch from './primitive'\nimport applyStringPatch from './string'\n\nexport function applyAll(value: any, patches: any[]) {\n  return patches.reduce(_apply, value)\n}\n\nfunction applyPatch(value: string, patch: {type: string; path: any[]; value: any}) {\n  if (Array.isArray(value)) {\n    return applyArrayPatch(value, patch as any)\n  }\n  if (isString(value)) {\n    return applyStringPatch(value, patch)\n  }\n  if (isObject(value)) {\n    return applyObjectPatch(value, patch)\n  }\n  return applyPrimitivePatch(value, patch)\n}\n\nexport default function _apply(value: string, patch: {type: string; path: any[]; value: any}) {\n  const res = applyPatch(value, patch)\n  // console.log('applyPatch(%o, %o) : %o (noop? %o)', value, patch, res, value === res)\n  return res\n}\n","/* eslint-disable max-statements */\nimport {\n  applyPatches as diffMatchPatchApplyPatches,\n  cleanupEfficiency,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  makeDiff,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport {\n  type KeyedSegment,\n  type Path,\n  type PathSegment,\n  type PortableTextBlock,\n  type PortableTextChild,\n} from '@sanity/types'\nimport {type Descendant, Element, type Node, type Path as SlatePath, Text, Transforms} from 'slate'\n\nimport {applyAll} from '../patch/applyPatch'\nimport {type PortableTextMemberSchemaTypes, type PortableTextSlateEditor} from '../types/editor'\nimport {\n  type DiffMatchPatch,\n  type InsertPatch,\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n} from '../types/patch'\nimport {debugWithName} from './debug'\nimport {toSlateValue} from './values'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('applyPatches')\nconst debugVerbose = debug.enabled && true\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schemaTypes: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  let previousPatch: Patch | undefined\n\n  return function (editor: PortableTextSlateEditor, patch: Patch): boolean {\n    let changed = false\n\n    // Save some CPU cycles by not stringifying unless enabled\n    if (debugVerbose) {\n      debug('\\n\\nNEW PATCH =============================================================')\n      debug(JSON.stringify(patch, null, 2))\n    }\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schemaTypes)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch, previousPatch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n        default:\n          debug('Unhandled patch', patch.type)\n      }\n    } catch (err) {\n      console.error(err)\n    }\n    previousPatch = patch\n    return changed\n  }\n}\n\n/**\n * Apply a remote diff match patch to the current PTE instance.\n * Note meant for external consumption, only exported for testing purposes.\n *\n * @param editor - Portable text slate editor instance\n * @param patch - The PTE diff match patch operation to apply\n * @returns true if the patch was applied, false otherwise\n * @internal\n */\nexport function diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const {block, child, childPath} = findBlockAndChildFromPath(editor, patch.path)\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  if (!child || !childPath) {\n    debug('Child not found')\n    return false\n  }\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.text, {allowExceedingIndices: true})\n  const diff = cleanupEfficiency(makeDiff(child.text, newValue), 5)\n\n  debugState(editor, 'before')\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({type: 'insert_text', path: childPath, offset, text})\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({type: 'remove_text', path: childPath, offset: offset, text})\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n  debugState(editor, 'after')\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  const {\n    block: targetBlock,\n    child: targetChild,\n    blockPath: targetBlockPath,\n    childPath: targetChildPath,\n  } = findBlockAndChildFromPath(editor, patch.path)\n  if (!targetBlock || !targetBlockPath) {\n    debug('Block not found')\n    return false\n  }\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring patch targeting void value')\n    return false\n  }\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = targetBlockPath[0]\n    const normalizedIdx = position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n    debug(`Inserting blocks at path [${normalizedIdx}]`)\n    debugState(editor, 'before')\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n    debugState(editor, 'after')\n    return true\n  }\n  // Insert children\n  const {items, position} = patch\n  if (!targetChild || !targetChildPath) {\n    debug('Child not found')\n    return false\n  }\n  const childrenToInsert =\n    targetBlock &&\n    toSlateValue(\n      [{...targetBlock, children: items as PortableTextChild[]}],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    )\n  const targetChildIndex = targetChildPath[1]\n  const normalizedIdx = position === 'after' ? targetChildIndex + 1 : targetChildIndex\n  const childInsertPath = [targetChildPath[0], normalizedIdx]\n  debug(`Inserting children at path ${childInsertPath}`)\n  debugState(editor, 'before')\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {at: childInsertPath})\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(editor, patch.path)\n\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  const isTextBlock = editor.isTextBlock(block)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring setting void value')\n    return false\n  }\n\n  debugState(editor, 'before')\n\n  // If this is targeting a text block child\n  if (isTextBlock && child && childPath) {\n    if (Text.isText(value) && Text.isText(child)) {\n      const newText = child.text\n      const oldText = value.text\n      if (oldText !== newText) {\n        debug('Setting text property')\n        editor.apply({\n          type: 'remove_text',\n          path: childPath,\n          offset: 0,\n          text: newText,\n        })\n        editor.apply({\n          type: 'insert_text',\n          path: childPath,\n          offset: 0,\n          text: value.text,\n        })\n        // call OnChange here to emit the new selection\n        // the user's selection might be interfering with\n        editor.onChange()\n      }\n    } else {\n      debug('Setting non-text property')\n      editor.apply({\n        type: 'set_node',\n        path: childPath,\n        properties: {},\n        newProperties: value as Partial<Node>,\n      })\n    }\n    return true\n  } else if (Element.isElement(block) && patch.path.length === 1 && blockPath) {\n    debug('Setting block property')\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {children: prevChildren, ...prevRest} = block || {children: undefined}\n    editor.apply({\n      type: 'set_node',\n      path: blockPath,\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n    block.children.forEach((c, cIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: blockPath.concat(cIndex),\n        node: c,\n      })\n    })\n    if (Array.isArray(children)) {\n      children.forEach((c, cIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: blockPath.concat(cIndex),\n          node: c,\n        })\n      })\n    }\n  } else if (block && 'value' in block) {\n    const newVal = applyAll([block.value], [patch])[0]\n    Transforms.setNodes(editor, {...block, value: newVal}, {at: blockPath})\n    return true\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch, previousPatch?: Patch) {\n  // Value\n  if (patch.path.length === 0) {\n    debug('Removing everything')\n    debugState(editor, 'before')\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n    editor.children.forEach((c, i) => {\n      Transforms.removeNodes(editor, {at: [i]})\n    })\n    Transforms.insertNodes(editor, editor.createPlaceholderBlock())\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    debugState(editor, 'after')\n    return true\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(editor, patch.path)\n  // Single blocks\n  if (patch.path.length === 1) {\n    if (!block || !blockPath) {\n      debug('Block not found')\n      return false\n    }\n    const blockIndex = blockPath[0]\n    debug(`Removing block at path [${blockIndex}]`)\n    debugState(editor, 'before')\n\n    Transforms.removeNodes(editor, {at: [blockIndex]})\n    debugState(editor, 'after')\n    return true\n  }\n\n  // Unset on text block children\n  if (editor.isTextBlock(block) && patch.path[1] === 'children' && patch.path.length === 3) {\n    if (!child || !childPath) {\n      debug('Child not found')\n      return false\n    }\n    const childIndex = childPath[1]\n    debug(`Unsetting child at path ${JSON.stringify(childPath)}`)\n    debugState(editor, 'before')\n    if (debugVerbose) {\n      debug(`Removing child at path ${JSON.stringify([childPath, childIndex])}`)\n    }\n    Transforms.removeNodes(editor, {at: childPath})\n    debugState(editor, 'after')\n    return true\n  }\n  return false\n}\n\nfunction isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && '_key' in segment\n}\n\nfunction debugState(\n  editor: Pick<PortableTextSlateEditor, 'children' | 'isTextBlock' | 'apply' | 'selection'>,\n  stateName: string,\n) {\n  if (!debugVerbose) {\n    return\n  }\n\n  debug(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2))\n  debug(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2))\n}\n\nfunction findBlockFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {block?: Descendant; path?: SlatePath} {\n  let blockIndex = -1\n  const block = editor.children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0]) ? node._key === path[0]._key : index === path[0]\n    if (isMatch) {\n      blockIndex = index\n    }\n    return isMatch\n  })\n  if (!block) {\n    return {}\n  }\n  return {block, path: [blockIndex] as SlatePath}\n}\n\nfunction findBlockAndChildFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {child?: Descendant; childPath?: SlatePath; block?: Descendant; blockPath?: SlatePath} {\n  const {block, path: blockPath} = findBlockFromPath(editor, path)\n  if (!(Element.isElement(block) && path[1] === 'children')) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  let childIndex = -1\n  const child = block.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2]) ? node._key === path[2]._key : index === path[2]\n    if (isMatch) {\n      childIndex = index\n    }\n    return isMatch\n  })\n  if (!child) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  return {block, child, blockPath, childPath: blockPath?.concat(childIndex) as SlatePath}\n}\n","import {type Editor} from 'slate'\n\nimport {IS_PROCESSING_LOCAL_CHANGES, IS_PROCESSING_REMOTE_CHANGES} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n\nexport function withLocalChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingLocally(editor) || false\n  IS_PROCESSING_LOCAL_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_LOCAL_CHANGES.set(editor, prev)\n}\n\nexport function isChangingLocally(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_LOCAL_CHANGES.get(editor)\n}\n","import {type Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport {DIFF_DELETE, DIFF_EQUAL, DIFF_INSERT, parsePatch} from '@sanity/diff-match-patch'\nimport {type ObjectSchemaType, type PortableTextBlock} from '@sanity/types'\nimport {flatten, isEqual} from 'lodash'\nimport {type Descendant, Editor, Operation, Path, type SelectionOperation, Transforms} from 'slate'\n\nimport {type PatchObservable, type PortableTextSlateEditor} from '../../types/editor'\nimport {type Patch} from '../../types/patch'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue} from '../../utils/values'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  patches$?: PatchObservable\n  readOnly: boolean\n  blockSchemaType: ObjectSchemaType\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {readOnly, patches$, blockSchemaType} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      blockSchemaType.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n    if (patches$) {\n      editor.subscriptions.push(() => {\n        debug('Subscribing to patches')\n        const sub = patches$.subscribe(({patches, snapshot}) => {\n          let reset = false\n          patches.forEach((patch) => {\n            if (!reset && patch.origin !== 'local' && remotePatches) {\n              if (patch.type === 'unset' && patch.path.length === 0) {\n                debug('Someone else cleared the content, resetting undo/redo history')\n                editor.history = {undos: [], redos: []}\n                remotePatches.splice(0, remotePatches.length)\n                SAVING.set(editor, true)\n                reset = true\n                return\n              }\n              remotePatches.push({patch, time: new Date(), snapshot, previousSnapshot})\n            }\n          })\n          previousSnapshot = snapshot\n        })\n        return () => {\n          debug('Unsubscribing to patches')\n          sub.unsubscribe()\n        }\n      })\n    }\n    editor.history = {undos: [], redos: []}\n    const {apply} = editor\n    editor.apply = (op: Operation) => {\n      if (readOnly) {\n        apply(op)\n        return\n      }\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp = step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      let merge = true\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge = shouldMerge(op, lastOp) || overwrite\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [...(editor.selection === null ? [] : [createSelectOperation(editor)]), op],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n      apply(op)\n    }\n\n    editor.undo = () => {\n      if (readOnly) {\n        return\n      }\n      const {undos} = editor.history\n      if (undos.length > 0) {\n        const step = undos[undos.length - 1]\n        debug('Undoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter((item) => item.time >= step.timestamp)\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) =>\n                transformOperation(editor, item.patch, op, item.snapshot, item.previousSnapshot),\n              ),\n            )\n          })\n          try {\n            Editor.withoutNormalizing(editor, () => {\n              withoutSaving(editor, () => {\n                transformedOperations\n                  .map(Operation.inverse)\n                  .reverse()\n                  .forEach((op) => {\n                    editor.apply(op)\n                  })\n              })\n            })\n            editor.normalize()\n            editor.onChange()\n          } catch (err) {\n            debug('Could not perform undo step', err)\n            remotePatches.splice(0, remotePatches.length)\n            Transforms.deselect(editor)\n            editor.history = {undos: [], redos: []}\n            SAVING.set(editor, true)\n            editor.onChange()\n            return\n          }\n          editor.history.redos.push(step)\n          editor.history.undos.pop()\n        }\n      }\n    }\n\n    editor.redo = () => {\n      if (readOnly) {\n        return\n      }\n      const {redos} = editor.history\n      if (redos.length > 0) {\n        const step = redos[redos.length - 1]\n        debug('Redoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter((item) => item.time >= step.timestamp)\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) =>\n                transformOperation(editor, item.patch, op, item.snapshot, item.previousSnapshot),\n              ),\n            )\n          })\n          try {\n            Editor.withoutNormalizing(editor, () => {\n              withoutSaving(editor, () => {\n                transformedOperations.forEach((op) => {\n                  editor.apply(op)\n                })\n              })\n            })\n            editor.normalize()\n            editor.onChange()\n          } catch (err) {\n            debug('Could not perform redo step', err)\n            remotePatches.splice(0, remotePatches.length)\n            Transforms.deselect(editor)\n            editor.history = {undos: [], redos: []}\n            SAVING.set(editor, true)\n            editor.onChange()\n            return\n          }\n          editor.history.undos.push(step)\n          editor.history.redos.pop()\n        }\n      }\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(`Adjusting '${operation.type}' operation paths for '${patch.type}' patch`)\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [adjustBlockPath(transformedOperation, patch.items.length, insertBlockIndex)]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(`Adjusting selection for unset everything patch and ${operation.type} operation`)\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(editor, transformedOperation)\n    if (!operationTargetBlock || !isEqual({_key: operationTargetBlock._key}, patch.path[0])) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (changedOffset <= transformedOperation.offset - transformedOperation.text.length) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(operation: Operation, level: number, blockIndex: number): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [transformedOperation.path[0] + level, ...transformedOperation.path.slice(1)]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (point && point.path[0] >= blockIndex + level && point.path[0] + level > -1) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (op: Operation, prev: Operation | undefined): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","/* eslint-disable max-nested-callbacks */\nimport {type Subject} from 'rxjs'\nimport {\n  type Descendant,\n  Editor,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type Operation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\n\nimport {insert, setIfMissing, unset} from '../../patch/PatchEvent'\nimport {\n  type EditorChange,\n  type PatchObservable,\n  type PortableTextMemberSchemaTypes,\n  type PortableTextSlateEditor,\n} from '../../types/editor'\nimport {type Patch} from '../../types/patch'\nimport {createApplyPatch} from '../../utils/applyPatch'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../utils/values'\nimport {IS_PROCESSING_REMOTE_CHANGES, KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport {withRemoteChanges} from '../../utils/withChanges'\nimport {isPatching, PATCHING, withoutPatching} from '../../utils/withoutPatching'\nimport {withPreserveKeys} from '../../utils/withPreserveKeys'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\nexport interface PatchFunctions {\n  insertNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  insertTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  mergeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  moveNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  setNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  splitNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n}\n\ninterface Options {\n  change$: Subject<EditorChange>\n  keyGenerator: () => string\n  patches$?: PatchObservable\n  patchFunctions: PatchFunctions\n  readOnly: boolean\n  schemaTypes: PortableTextMemberSchemaTypes\n}\n\nexport function createWithPatches({\n  change$,\n  patches$,\n  patchFunctions,\n  readOnly,\n  schemaTypes,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(schemaTypes)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              withPreserveKeys(editor, () => {\n                patches.forEach((patch) => {\n                  if (debug.enabled) debug(`Handling remote patch ${JSON.stringify(patch)}`)\n                  changed = applyPatch(editor, patch)\n                })\n              })\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    if (patches$) {\n      editor.subscriptions.push(() => {\n        debug('Subscribing to patches$')\n        const sub = patches$.subscribe(handlePatches)\n        return () => {\n          debug('Unsubscribing to patches$')\n          sub.unsubscribe()\n        }\n      })\n    }\n\n    editor.apply = (operation: Operation): void | Editor => {\n      if (readOnly) {\n        apply(operation)\n        return editor\n      }\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes)\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes)\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(`Editor is not producing patch for operation ${operation.type}`, operation)\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (editorWasEmpty && !editorIsEmpty && operation.type !== 'set_selection') {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertTextPatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeTextPatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.splitNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.setNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.mergeNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.moveNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'set_selection':\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(operation.type)\n      ) {\n        patches = [...patches, unset([])]\n        change$.next({\n          type: 'unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            schemaTypes.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        patches.forEach((patch) => {\n          change$.next({\n            type: 'patch',\n            patch: {...patch, origin: 'local'},\n          })\n        })\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {type Descendant} from 'slate'\n\nimport {type PortableTextMemberSchemaTypes, type PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\ninterface Options {\n  schemaTypes: PortableTextMemberSchemaTypes\n  keyGenerator: () => string\n}\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock({\n  schemaTypes,\n  keyGenerator,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    editor.createPlaceholderBlock = (): Descendant => {\n      debug('Creating placeholder block')\n      return {\n        _type: schemaTypes.block.name,\n        _key: keyGenerator(),\n        style: schemaTypes.styles[0].value || 'normal',\n        markDefs: [],\n        children: [\n          {\n            _type: 'span',\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          },\n        ],\n      }\n    }\n    return editor\n  }\n}\n","import {Editor, type Node, Path, Text as SlateText, Transforms} from 'slate'\n\nimport {type PortableTextMemberSchemaTypes, type PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withPortableTextBlockStyle')\n\nexport function createWithPortableTextBlockStyle(\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const defaultStyle = types.styles[0].value\n  return function withPortableTextBlockStyle(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Extend Slate's default normalization to reset split node to normal style\n    // if there is no text at the right end of the split.\n    const {normalizeNode} = editor\n    editor.normalizeNode = (nodeEntry) => {\n      normalizeNode(nodeEntry)\n      const [, path] = nodeEntry\n      for (const op of editor.operations) {\n        if (\n          op.type === 'split_node' &&\n          op.path.length === 1 &&\n          editor.isTextBlock(op.properties) &&\n          op.properties.style !== defaultStyle &&\n          op.path[0] === path[0] &&\n          !Path.equals(path, op.path)\n        ) {\n          const [child] = Editor.node(editor, [op.path[0] + 1, 0])\n          if (SlateText.isText(child) && child.text === '') {\n            debug(`Normalizing split node to ${defaultStyle} style`, op)\n            Transforms.setNodes(editor, {style: defaultStyle}, {at: [op.path[0] + 1], voids: false})\n            break\n          }\n        }\n      }\n    }\n    editor.pteHasBlockStyle = (style: string): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node) && node.style === style,\n        }),\n      ]\n      if (selectedBlocks.length > 0) {\n        return true\n      }\n      return false\n    }\n\n    editor.pteToggleBlockStyle = (blockStyle: string): void => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node),\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isTextBlock(node) && node.style === blockStyle) {\n          debug(`Unsetting block style '${blockStyle}'`)\n          Transforms.setNodes(editor, {...node, style: defaultStyle} as Partial<Node>, {\n            at: path,\n          })\n        } else {\n          if (blockStyle) {\n            debug(`Setting style '${blockStyle}'`)\n          } else {\n            debug('Setting default style', defaultStyle)\n          }\n          Transforms.setNodes(\n            editor,\n            {\n              ...node,\n              style: blockStyle || defaultStyle,\n            } as Partial<Node>,\n            {at: path},\n          )\n        }\n      })\n      editor.onChange()\n    }\n    return editor\n  }\n}\n","import {Editor, Element, type Node, Text, Transforms} from 'slate'\n\nimport {type PortableTextMemberSchemaTypes, type PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withPortableTextLists')\nconst MAX_LIST_LEVEL = 10\n\nexport function createWithPortableTextLists(types: PortableTextMemberSchemaTypes) {\n  return function withPortableTextLists(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    editor.pteToggleListItem = (listItemStyle: string) => {\n      const isActive = editor.pteHasListStyle(listItemStyle)\n      if (isActive) {\n        debug(`Remove list item '${listItemStyle}'`)\n        editor.pteUnsetListItem(listItemStyle)\n      } else {\n        debug(`Add list item '${listItemStyle}'`)\n        editor.pteSetListItem(listItemStyle)\n      }\n    }\n\n    editor.pteUnsetListItem = (listItemStyle: string) => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => Element.isElement(node) && node._type === types.block.name,\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isListBlock(node)) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {listItem, level, ...rest} = node\n          const newNode = {\n            ...rest,\n            listItem: undefined,\n            level: undefined,\n          } as Partial<Node>\n          debug(`Unsetting list '${listItemStyle}'`)\n          Transforms.setNodes(editor, newNode, {at: path})\n        }\n      })\n    }\n\n    editor.pteSetListItem = (listItemStyle: string) => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node),\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        debug(`Setting list '${listItemStyle}'`)\n        Transforms.setNodes(\n          editor,\n          {\n            ...node,\n            level: 1,\n            listItem: listItemStyle || (types.lists[0] && types.lists[0].value),\n          } as Partial<Node>,\n          {at: path},\n        )\n      })\n    }\n\n    editor.pteEndList = () => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Element.isElement(node) &&\n            editor.isListBlock(node) &&\n            node.children.length === 1 &&\n            Text.isText(node.children[0]) &&\n            node.children[0].text === '',\n        }),\n      ]\n      if (selectedBlocks.length === 0) {\n        return false\n      }\n      selectedBlocks.forEach(([node, path]) => {\n        if (Element.isElement(node)) {\n          debug('Unset list')\n          Transforms.setNodes(\n            editor,\n            {\n              ...node,\n              level: undefined,\n              listItem: undefined,\n            },\n            {at: path},\n          )\n        }\n      })\n      return true // Note: we are exiting the plugin chain by not returning editor (or hotkey plugin 'enter' will fire)\n    }\n\n    editor.pteIncrementBlockLevels = (reverse?: boolean): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => !!editor.isListBlock(node),\n        }),\n      ]\n      if (selectedBlocks.length === 0) {\n        return false\n      }\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isListBlock(node)) {\n          let level = node.level || 1\n          if (reverse) {\n            level--\n            debug('Decrementing list level', Math.min(MAX_LIST_LEVEL, Math.max(1, level)))\n          } else {\n            level++\n            debug('Incrementing list level', Math.min(MAX_LIST_LEVEL, Math.max(1, level)))\n          }\n          Transforms.setNodes(\n            editor,\n            {level: Math.min(MAX_LIST_LEVEL, Math.max(1, level))},\n            {at: path},\n          )\n        }\n      })\n      return true\n    }\n\n    editor.pteHasListStyle = (listStyle: string): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isListBlock(node) && node.listItem === listStyle,\n        }),\n      ]\n      if (selectedBlocks.length > 0) {\n        return true\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n","import {type Subject} from 'rxjs'\nimport {type BaseRange} from 'slate'\n\nimport {\n  type EditorChange,\n  type EditorSelection,\n  type PortableTextMemberSchemaTypes,\n  type PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {type ObjectWithKeyAndType, toPortableTextRange} from '../../utils/ranges'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../utils/weakMaps'\n\nconst debug = debugWithName('plugin:withPortableTextSelections')\nconst debugVerbose = debug.enabled && false\n\n// This plugin will make sure that we emit a PT selection whenever the editor has changed.\nexport function createWithPortableTextSelections(\n  change$: Subject<EditorChange>,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  let prevSelection: BaseRange | null = null\n  return function withPortableTextSelections(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            ptRange = existing\n          } else {\n            const value = editor.children satisfies ObjectWithKeyAndType[]\n            ptRange = toPortableTextRange(value, editor.selection, types)\n            SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n          }\n        }\n        if (debugVerbose) {\n          debug(\n            `Emitting selection ${JSON.stringify(ptRange || null)} (${JSON.stringify(\n              editor.selection,\n            )})`,\n          )\n        }\n        if (ptRange) {\n          change$.next({type: 'selection', selection: ptRange})\n        } else {\n          change$.next({type: 'selection', selection: null})\n        }\n      }\n      prevSelection = editor.selection\n    }\n\n    const {onChange} = editor\n    editor.onChange = () => {\n      const hasChanges = editor.operations.length > 0\n      onChange()\n      if (hasChanges) {\n        emitPortableTextSelection()\n      }\n    }\n    return editor\n  }\n}\n","import {\n  isPortableTextListBlock,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextListBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {type Element, Transforms} from 'slate'\n\nimport {type PortableTextMemberSchemaTypes, type PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  schemaTypes,\n  keyGenerator,\n}: {\n  schemaTypes: PortableTextMemberSchemaTypes\n  keyGenerator: () => string\n}) {\n  return function withSchemaTypes(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      return isPortableTextTextBlock(value) && value._type === schemaTypes.block.name\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      return isPortableTextSpan(value) && value._type == schemaTypes.span.name\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      return isPortableTextListBlock(value) && value._type === schemaTypes.block.name\n    }\n    editor.isVoid = (element: Element): boolean => {\n      return (\n        schemaTypes.block.name !== element._type &&\n        (schemaTypes.blockObjects.map((obj) => obj.name).includes(element._type) ||\n          schemaTypes.inlineObjects.map((obj) => obj.name).includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      const inlineSchemaTypes = schemaTypes.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization to add `_type: 'span'` to texts if they are inserted without\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key = span._key || keyGenerator()\n        Transforms.setNodes(editor, {...span, _type: schemaTypes.span.name, _key: key}, {at: path})\n      }\n      normalizeNode(entry)\n    }\n    return editor\n  }\n}\n","import {Editor, Range, Text, Transforms} from 'slate'\n\nimport {type PortableTextMemberSchemaTypes, type PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withUtils')\n\ninterface Options {\n  schemaTypes: PortableTextMemberSchemaTypes\n  keyGenerator: () => string\n}\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({schemaTypes, keyGenerator}: Options) {\n  return function withUtils(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    // Expands the the selection to wrap around the word the focus is at\n    editor.pteExpandToWord = () => {\n      const {selection} = editor\n      if (selection && !Range.isExpanded(selection)) {\n        const [textNode] = Editor.node(editor, selection.focus, {depth: 2})\n        if (!textNode || !Text.isText(textNode) || textNode.text.length === 0) {\n          debug(`pteExpandToWord: Can't expand to word here`)\n          return\n        }\n        const {focus} = selection\n        const focusOffset = focus.offset\n        const charsBefore = textNode.text.slice(0, focusOffset)\n        const charsAfter = textNode.text.slice(focusOffset, -1)\n        const isEmpty = (str: string) => str.match(/\\s/g)\n        const whiteSpaceBeforeIndex = charsBefore\n          .split('')\n          .reverse()\n          .findIndex((str) => isEmpty(str))\n        const newStartOffset =\n          whiteSpaceBeforeIndex > -1 ? charsBefore.length - whiteSpaceBeforeIndex : 0\n        const whiteSpaceAfterIndex = charsAfter.split('').findIndex((obj) => isEmpty(obj))\n        const newEndOffset =\n          charsBefore.length +\n          (whiteSpaceAfterIndex > -1 ? whiteSpaceAfterIndex : charsAfter.length + 1)\n        if (!(newStartOffset === newEndOffset || isNaN(newStartOffset) || isNaN(newEndOffset))) {\n          debug('pteExpandToWord: Expanding to focused word')\n          Transforms.setSelection(editor, {\n            anchor: {...selection.anchor, offset: newStartOffset},\n            focus: {...selection.focus, offset: newEndOffset},\n          })\n          return\n        }\n        debug(`pteExpandToWord: Can't expand to word here`)\n      }\n    }\n    return editor\n  }\n}\n","/* eslint-disable max-statements */\n/* eslint-disable complexity */\nimport {isPortableTextSpan, isPortableTextTextBlock} from '@sanity/types'\nimport isHotkey from 'is-hotkey'\nimport {type KeyboardEvent} from 'react'\nimport {Editor, Node, Path, Range, Transforms} from 'slate'\nimport {type ReactEditor} from 'slate-react'\n\nimport {type PortableTextMemberSchemaTypes, type PortableTextSlateEditor} from '../../types/editor'\nimport {type HotkeyOptions} from '../../types/options'\nimport {type SlateTextBlock, type VoidElement} from '../../types/slate'\nimport {debugWithName} from '../../utils/debug'\nimport {toSlateValue} from '../../utils/values'\nimport {type PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\nconst DEFAULT_HOTKEYS: HotkeyOptions = {\n  marks: {\n    'mod+b': 'strong',\n    'mod+i': 'em',\n    'mod+u': 'underline',\n    \"mod+'\": 'code',\n  },\n  custom: {},\n}\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions || DEFAULT_HOTKEYS // TODO: Merge where possible? A union?\n  const createEmptyBlock = () =>\n    toSlateValue(\n      [\n        {\n          _type: types.block.name,\n          _key: keyGenerator(),\n          style: 'normal',\n          markDefs: [],\n          children: [\n            {\n              _type: 'span',\n              _key: keyGenerator(),\n              text: '',\n              marks: [],\n            },\n          ],\n        },\n      ],\n      portableTextEditor,\n    )[0]\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          // eslint-disable-next-line guard-for-in\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editor.pteToggleMark(mark)\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          // eslint-disable-next-line guard-for-in\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n\n      const isEnter = isHotkey('enter', event.nativeEvent)\n      const isTab = isHotkey('tab', event.nativeEvent)\n      const isShiftEnter = isHotkey('shift+enter', event.nativeEvent)\n      const isShiftTab = isHotkey('shift+tab', event.nativeEvent)\n      const isBackspace = isHotkey('backspace', event.nativeEvent)\n      const isDelete = isHotkey('delete', event.nativeEvent)\n\n      // Disallow deleting void blocks by backspace from another line.\n      // Otherwise it's so easy to delete the void block above when trying to delete text on\n      // the line below or above\n      if (\n        isBackspace &&\n        editor.selection &&\n        editor.selection.focus.path[0] > 0 &&\n        Range.isCollapsed(editor.selection)\n      ) {\n        const prevPath = Path.previous(editor.selection.focus.path.slice(0, 1))\n        const prevBlock = Node.descendant(editor, prevPath) as SlateTextBlock | VoidElement\n        const focusBlock = Node.descendant(editor, editor.selection.focus.path.slice(0, 1))\n        if (\n          prevBlock &&\n          focusBlock &&\n          Editor.isVoid(editor, prevBlock) &&\n          editor.selection.focus.offset === 0\n        ) {\n          debug('Preventing deleting void block above')\n          event.preventDefault()\n          event.stopPropagation()\n\n          const isTextBlock = isPortableTextTextBlock(focusBlock)\n          const isEmptyFocusBlock =\n            isTextBlock && focusBlock.children.length === 1 && focusBlock.children?.[0]?.text === ''\n\n          // If this is a not an text block or it is empty, simply remove it\n          if (!isTextBlock || isEmptyFocusBlock) {\n            Transforms.removeNodes(editor, {match: (n) => n === focusBlock})\n            Transforms.select(editor, prevPath)\n\n            editor.onChange()\n            return\n          }\n\n          // If the focused block is a text node but it isn't empty, focus on the previous block\n          if (isTextBlock && !isEmptyFocusBlock) {\n            Transforms.select(editor, prevPath)\n\n            editor.onChange()\n            return\n          }\n\n          return\n        }\n      }\n      if (\n        isDelete &&\n        editor.selection &&\n        editor.selection.focus.offset === 0 &&\n        Range.isCollapsed(editor.selection) &&\n        editor.children[editor.selection.focus.path[0] + 1]\n      ) {\n        const nextBlock = Node.descendant(\n          editor,\n          Path.next(editor.selection.focus.path.slice(0, 1)),\n        ) as SlateTextBlock | VoidElement\n        const focusBlockPath = editor.selection.focus.path.slice(0, 1)\n        const focusBlock = Node.descendant(editor, focusBlockPath) as SlateTextBlock | VoidElement\n\n        if (\n          nextBlock &&\n          focusBlock &&\n          !Editor.isVoid(editor, focusBlock) &&\n          Editor.isVoid(editor, nextBlock)\n        ) {\n          debug('Preventing deleting void block below')\n          event.preventDefault()\n          event.stopPropagation()\n          Transforms.removeNodes(editor, {match: (n) => n === focusBlock})\n          Transforms.select(editor, focusBlockPath)\n          editor.onChange()\n          return\n        }\n      }\n\n      // Tab for lists\n      // Only steal tab when we are on a plain text span or we are at the start of the line (fallback if the whole block is annotated or contains a single inline object)\n      // Otherwise tab is reserved for accessability for buttons etc.\n      if ((isTab || isShiftTab) && editor.selection) {\n        const [focusChild] = Editor.node(editor, editor.selection.focus, {depth: 2})\n        const [focusBlock] = isPortableTextSpan(focusChild)\n          ? Editor.node(editor, editor.selection.focus, {depth: 1})\n          : []\n        const hasAnnotationFocus =\n          focusChild &&\n          isPortableTextTextBlock(focusBlock) &&\n          isPortableTextSpan(focusChild) &&\n          (focusChild.marks || ([] as string[])).filter((m) =>\n            (focusBlock.markDefs || []).map((def) => def._key).includes(m),\n          ).length > 0\n        const [start] = Range.edges(editor.selection)\n        const atStartOfNode = Editor.isStart(editor, start, start.path)\n\n        if (\n          focusChild &&\n          isPortableTextSpan(focusChild) &&\n          (!hasAnnotationFocus || atStartOfNode) &&\n          editor.pteIncrementBlockLevels(isShiftTab)\n        ) {\n          event.preventDefault()\n        }\n      }\n\n      // Deal with enter key combos\n      if (isEnter && !isShiftEnter && editor.selection) {\n        const focusBlockPath = editor.selection.focus.path.slice(0, 1)\n        const focusBlock = Node.descendant(editor, focusBlockPath) as SlateTextBlock | VoidElement\n\n        // List item enter key\n        if (editor.isListBlock(focusBlock)) {\n          if (editor.pteEndList()) {\n            event.preventDefault()\n          }\n          return\n        }\n\n        // Enter from another style than the first (default one)\n        if (\n          editor.isTextBlock(focusBlock) &&\n          focusBlock.style &&\n          focusBlock.style !== types.styles[0].value\n        ) {\n          const [, end] = Range.edges(editor.selection)\n          const endAtEndOfNode = Editor.isEnd(editor, end, end.path)\n          if (endAtEndOfNode) {\n            Editor.insertNode(editor, createEmptyBlock())\n            event.preventDefault()\n            editor.onChange()\n            return\n          }\n        }\n        // Block object enter key\n        if (focusBlock && Editor.isVoid(editor, focusBlock)) {\n          Editor.insertNode(editor, createEmptyBlock())\n          event.preventDefault()\n          editor.onChange()\n          return\n        }\n        // Default enter key behavior\n        event.preventDefault()\n        editor.insertBreak()\n        editor.onChange()\n      }\n\n      // Soft line breaks\n      if (isShiftEnter) {\n        event.preventDefault()\n        editor.insertText('\\n')\n        return\n      }\n\n      // Undo/redo\n      if (isHotkey('mod+z', event.nativeEvent)) {\n        event.preventDefault()\n        editor.undo()\n        return\n      }\n      if (isHotkey('mod+y', event.nativeEvent) || isHotkey('mod+shift+z', event.nativeEvent)) {\n        event.preventDefault()\n        editor.redo()\n      }\n    }\n    return editor\n  }\n}\n","import {\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\n\nimport {insert, set, unset} from '../patch/PatchEvent'\nimport {type InvalidValueResolution, type PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [types.span.name, ...types.inlineObjects.map((t) => t.name)]\n  const validBlockTypes = [types.block.name, ...types.blockObjects.map((t) => t.name)]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description: 'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description: 'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description: 'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description: 'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description: 'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action: 'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (!blk._type && isPortableTextTextBlock({...blk, _type: types.block.name})) {\n          resolution = {\n            patches: [set({...blk, _type: types.block.name}, [{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description: 'inputs.portable-text.invalid-value.missing-block-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description: 'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description: 'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n      // Test that every child in text block is valid\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has (valid) children property\n        if (!textBlock.children || !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [unset([{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a missing or invalid required property 'children'.`,\n            action: 'Remove the block',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action: 'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that markDefs exists and is valid\n        if (!blk.markDefs || !Array.isArray(blk.markDefs)) {\n          resolution = {\n            patches: [set({...textBlock, markDefs: []}, [{_key: textBlock._key}])],\n            description: `Block has a missing or invalid required property 'markDefs'.`,\n            action: 'Add empty markDefs array',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-markdefs.description',\n              action: 'inputs.portable-text.invalid-value.missing-or-invalid-markdefs.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // NOTE: this is commented out as we want to allow the saved data to have optional .marks for spans (as specified by the schema)\n        // const spansWithUndefinedMarks = blk.children\n        //   .filter(cld => cld._type === types.span.name)\n        //   .filter(cld => typeof cld.marks === 'undefined')\n\n        // if (spansWithUndefinedMarks.length > 0) {\n        //   const first = spansWithUndefinedMarks[0]\n        //   resolution = {\n        //     patches: [\n        //       set({...first, marks: []}, [{_key: blk._key}, 'children', {_key: first._key}])\n        //     ],\n        //     description: `Span has no .marks array`,\n        //     action: 'Add empty marks array',\n        //     item: first\n        //   }\n        //   return true\n        // }\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n        // Note: this is commented out as it may be a bit too strict:\n        // // Test that all markDefs are in use\n        // if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n        //   const unusedMarkDefs: string[] = uniq(\n        //     blk.markDefs.map((def) => def._key).filter((key) => !allUsedMarks.includes(key))\n        //   )\n        //   if (unusedMarkDefs.length > 0) {\n        //     resolution = {\n        //       patches: unusedMarkDefs.map((key) =>\n        //         unset([{_key: blk._key}, 'markDefs', {_key: key}])\n        //       ),\n        //       description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n        //         ', '\n        //       )}.`,\n        //       action: 'Remove unused mark definition item',\n        //       item: blk,\n        //     }\n        //     return true\n        //   }\n        // }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.value).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter((mark) =>\n          textBlock.markDefs ? !textBlock.markDefs.find((def) => def._key === mark) : false,\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter((cMrk) => !orphanedMarks.includes(cMrk)),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description: 'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action: 'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {key: blk._key, orphanedMarks},\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that children is lengthy\n        if (textBlock.children && textBlock.children.length === 0) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n          }\n          resolution = {\n            patches: [insert([newSpan], 'after', [{_key: blk._key}, 'children', 0])],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description: 'inputs.portable-text.invalid-value.empty-children.description',\n              action: 'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description: 'inputs.portable-text.invalid-value.non-object-child.description',\n                  action: 'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                patches: [set(newChild, [{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description: 'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action: 'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', {_key: child._key}])],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description: 'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action: 'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', {_key: child._key}])],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action: 'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {key: blk._key, childKey: child._key, childType: child._type},\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (child._type === types.span.name && typeof child.text !== 'string') {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description: 'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action: 'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import {htmlToBlocks, normalizeBlock} from '@sanity/block-tools'\nimport {type PortableTextBlock, type PortableTextChild} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {type Descendant, Editor, type Node, Range, Transforms} from 'slate'\nimport {ReactEditor} from 'slate-react'\n\nimport {\n  type EditorChanges,\n  type PortableTextMemberSchemaTypes,\n  type PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {validateValue} from '../../utils/validateValue'\nimport {fromSlateValue, isEqualToEmptyEditor, toSlateValue} from '../../utils/values'\n\nconst debug = debugWithName('plugin:withInsertData')\n\n/**\n * This plugin handles copy/paste in the editor\n *\n */\nexport function createWithInsertData(\n  change$: EditorChanges,\n  schemaTypes: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n) {\n  return function withInsertData(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    const blockTypeName = schemaTypes.block.name\n    const spanTypeName = schemaTypes.span.name\n    const whitespaceOnPasteMode = schemaTypes.block.options.unstable_whitespaceOnPasteMode\n\n    const toPlainText = (blocks: PortableTextBlock[]) => {\n      return blocks\n        .map((block) => {\n          if (editor.isTextBlock(block)) {\n            return block.children\n              .map((child: PortableTextChild) => {\n                if (child._type === spanTypeName) {\n                  return child.text\n                }\n                return `[${\n                  schemaTypes.inlineObjects.find((t) => t.name === child._type)?.title || 'Object'\n                }]`\n              })\n              .join('')\n          }\n          return `[${\n            schemaTypes.blockObjects.find((t) => t.name === block._type)?.title || 'Object'\n          }]`\n        })\n        .join('\\n\\n')\n    }\n\n    editor.setFragmentData = (data: DataTransfer, originEvent) => {\n      const {selection} = editor\n\n      if (!selection) {\n        return\n      }\n\n      const [start, end] = Range.edges(selection)\n      const startVoid = Editor.void(editor, {at: start.path})\n      const endVoid = Editor.void(editor, {at: end.path})\n\n      if (Range.isCollapsed(selection) && !startVoid) {\n        return\n      }\n\n      // Create a fake selection so that we can add a Base64-encoded copy of the\n      // fragment to the HTML, to decode on future pastes.\n      const domRange = ReactEditor.toDOMRange(editor, selection)\n      let contents = domRange.cloneContents()\n      // COMPAT: If the end node is a void node, we need to move the end of the\n      // range from the void node's spacer span, to the end of the void node's\n      // content, since the spacer is before void's content in the DOM.\n      if (endVoid) {\n        const [voidNode] = endVoid\n        const r = domRange.cloneRange()\n        const domNode = ReactEditor.toDOMNode(editor, voidNode)\n        r.setEndAfter(domNode)\n        contents = r.cloneContents()\n      }\n      // Remove any zero-width space spans from the cloned DOM so that they don't\n      // show up elsewhere when pasted.\n      Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach((zw) => {\n        const isNewline = zw.getAttribute('data-slate-zero-width') === 'n'\n        zw.textContent = isNewline ? '\\n' : ''\n      })\n      // Clean up the clipboard HTML for editor spesific attributes\n      Array.from(contents.querySelectorAll('*')).forEach((elm) => {\n        elm.removeAttribute('contentEditable')\n        elm.removeAttribute('data-slate-inline')\n        elm.removeAttribute('data-slate-leaf')\n        elm.removeAttribute('data-slate-node')\n        elm.removeAttribute('data-slate-spacer')\n        elm.removeAttribute('data-slate-string')\n        elm.removeAttribute('data-slate-zero-width')\n        elm.removeAttribute('draggable')\n        for (const key in elm.attributes) {\n          if (elm.hasAttribute(key)) {\n            elm.removeAttribute(key)\n          }\n        }\n      })\n      const div = contents.ownerDocument.createElement('div')\n      div.appendChild(contents)\n      div.setAttribute('hidden', 'true')\n      contents.ownerDocument.body.appendChild(div)\n      const asHTML = div.innerHTML\n      contents.ownerDocument.body.removeChild(div)\n      const fragment = editor.getFragment()\n      const portableText = fromSlateValue(fragment, blockTypeName)\n\n      const asJSON = JSON.stringify(portableText)\n      const asPlainText = toPlainText(portableText)\n      data.clearData()\n      data.setData('text/plain', asPlainText)\n      data.setData('text/html', asHTML)\n      data.setData('application/json', asJSON)\n      data.setData('application/x-portable-text', asJSON)\n      debug('text', asPlainText)\n      data.setData('application/x-portable-text-event-origin', originEvent || 'external')\n      debug('Set fragment data', asJSON, asHTML)\n    }\n\n    editor.insertPortableTextData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const pText = data.getData('application/x-portable-text')\n      const origin = data.getData('application/x-portable-text-event-origin')\n      debug(`Inserting portable text from ${origin} event`, pText)\n      if (pText) {\n        const parsed = JSON.parse(pText) as PortableTextBlock[]\n        if (Array.isArray(parsed) && parsed.length > 0) {\n          const slateValue = _regenerateKeys(\n            editor,\n            toSlateValue(parsed, {schemaTypes}),\n            keyGenerator,\n            spanTypeName,\n          )\n          // Validate the result\n          const validation = validateValue(parsed, schemaTypes, keyGenerator)\n          // Bail out if it's not valid\n          if (!validation.valid) {\n            const errorDescription = `${validation.resolution?.description}`\n            change$.next({\n              type: 'error',\n              level: 'warning',\n              name: 'pasteError',\n              description: errorDescription,\n              data: validation,\n            })\n            debug('Invalid insert result', validation)\n            return false\n          }\n          _insertFragment(editor, slateValue, schemaTypes)\n          return true\n        }\n      }\n      return false\n    }\n\n    editor.insertTextOrHTMLData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        debug('No selection, not inserting')\n        return false\n      }\n      change$.next({type: 'loading', isLoading: true}) // This could potentially take some time\n      const html = data.getData('text/html')\n      const text = data.getData('text/plain')\n      if (html || text) {\n        debug('Inserting data', data)\n        let portableText: PortableTextBlock[]\n        let fragment: Node[]\n        let insertedType\n\n        if (html) {\n          portableText = htmlToBlocks(html, schemaTypes.portableText, {\n            unstable_whitespaceOnPasteMode: whitespaceOnPasteMode,\n          }).map((block) => normalizeBlock(block, {blockTypeName})) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {schemaTypes})\n          insertedType = 'HTML'\n        } else {\n          // plain text\n          const blocks = escapeHtml(text)\n            .split(/\\n{2,}/)\n            .map((line) =>\n              line ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>` : '<p></p>',\n            )\n            .join('')\n          const textToHtml = `<html><body>${blocks}</body></html>`\n          portableText = htmlToBlocks(textToHtml, schemaTypes.portableText).map((block) =>\n            normalizeBlock(block, {blockTypeName}),\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {\n            schemaTypes,\n          })\n          insertedType = 'text'\n        }\n\n        // Validate the result\n        const validation = validateValue(portableText, schemaTypes, keyGenerator)\n\n        // Bail out if it's not valid\n        if (!validation.valid) {\n          const errorDescription = `Could not validate the resulting portable text to insert.\\n${validation.resolution?.description}\\nTry to insert as plain text (shift-paste) instead.`\n          change$.next({\n            type: 'error',\n            level: 'warning',\n            name: 'pasteError',\n            description: errorDescription,\n            data: validation,\n          })\n          debug('Invalid insert result', validation)\n          return false\n        }\n        debug(`Inserting ${insertedType} fragment at ${JSON.stringify(editor.selection)}`)\n        _insertFragment(editor, fragment, schemaTypes)\n        change$.next({type: 'loading', isLoading: false})\n        return true\n      }\n      change$.next({type: 'loading', isLoading: false})\n      return false\n    }\n\n    editor.insertData = (data: DataTransfer) => {\n      if (!editor.insertPortableTextData(data)) {\n        editor.insertTextOrHTMLData(data)\n      }\n    }\n\n    editor.insertFragmentData = (data: DataTransfer): boolean => {\n      const fragment = data.getData('application/x-portable-text')\n      if (fragment) {\n        const parsed = JSON.parse(fragment)\n        editor.insertFragment(parsed)\n        return true\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n\n/**\n * Shared helper function to regenerate the keys on a fragment.\n *\n * @internal\n */\nfunction _regenerateKeys(\n  editor: PortableTextSlateEditor,\n  fragment: Descendant[],\n  keyGenerator: () => string,\n  spanTypeName: string,\n): Descendant[] {\n  return fragment.map((node) => {\n    const newNode: Descendant = {...node}\n    // Ensure the copy has new keys\n    if (editor.isTextBlock(newNode)) {\n      newNode.markDefs = (newNode.markDefs || []).map((def) => {\n        const oldKey = def._key\n        const newKey = keyGenerator()\n        newNode.children = newNode.children.map((child) =>\n          child._type === spanTypeName && editor.isTextSpan(child)\n            ? {\n                ...child,\n                marks:\n                  child.marks && child.marks.includes(oldKey)\n                    ? // eslint-disable-next-line max-nested-callbacks\n                      [...child.marks].filter((mark) => mark !== oldKey).concat(newKey)\n                    : child.marks,\n              }\n            : child,\n        )\n        return {...def, _key: newKey}\n      })\n    }\n    const nodeWithNewKeys = {...newNode, _key: keyGenerator()}\n    if (editor.isTextBlock(nodeWithNewKeys)) {\n      nodeWithNewKeys.children = nodeWithNewKeys.children.map((child) => ({\n        ...child,\n        _key: keyGenerator(),\n      }))\n    }\n    return nodeWithNewKeys as Descendant\n  })\n}\n\n/**\n * Shared helper function to insert the final fragment into the editor\n *\n * @internal\n */\nfunction _insertFragment(\n  editor: PortableTextSlateEditor,\n  fragment: Descendant[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  if (!editor.selection) {\n    return\n  }\n\n  // Ensure that markDefs for any annotations inside this fragment are copied over to the focused text block.\n  const [focusBlock, focusPath] = Editor.node(editor, editor.selection, {depth: 1})\n  if (editor.isTextBlock(focusBlock) && editor.isTextBlock(fragment[0])) {\n    const {markDefs} = focusBlock\n    debug('Mixing markDefs of focusBlock and fragments[0] block', markDefs, fragment[0].markDefs)\n    if (!isEqual(markDefs, fragment[0].markDefs)) {\n      Transforms.setNodes(\n        editor,\n        {\n          markDefs: uniq([...(fragment[0].markDefs || []), ...(markDefs || [])]),\n        },\n        {at: focusPath, mode: 'lowest', voids: false},\n      )\n    }\n  }\n\n  const isPasteToEmptyEditor = isEqualToEmptyEditor(editor.children, schemaTypes)\n\n  if (isPasteToEmptyEditor) {\n    // Special case for pasting directly into an empty editor (a placeholder block).\n    // When pasting content starting with multiple empty blocks,\n    // `editor.insertFragment` can potentially duplicate the keys of\n    // the placeholder block because of operations that happen\n    // inside `editor.insertFragment` (involves an `insert_node` operation).\n    // However by splitting the placeholder block first in this situation we are good.\n    Transforms.splitNodes(editor, {at: [0, 0]})\n    editor.insertFragment(fragment)\n    Transforms.removeNodes(editor, {at: [0]})\n  } else {\n    // All other inserts\n    editor.insertFragment(fragment)\n  }\n  editor.onChange()\n}\n","import {noop} from 'lodash'\nimport {type BaseOperation, type Editor, type Node, type NodeEntry} from 'slate'\n\nimport {type PortableTextSlateEditor} from '../../types/editor'\nimport {type createEditorOptions} from '../../types/options'\nimport {createOperationToPatches} from '../../utils/operationToPatches'\nimport {createWithEditableAPI} from './createWithEditableAPI'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nimport {createWithPortableTextLists} from './createWithPortableTextLists'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\n\nexport {createWithEditableAPI} from './createWithEditableAPI'\nexport {createWithHotkeys} from './createWithHotKeys'\nexport {createWithInsertData} from './createWithInsertData'\nexport {createWithMaxBlocks} from './createWithMaxBlocks'\nexport {createWithObjectKeys} from './createWithObjectKeys'\nexport {createWithPatches} from './createWithPatches'\nexport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nexport {createWithPortableTextLists} from './createWithPortableTextLists'\nexport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nexport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nexport {createWithSchemaTypes} from './createWithSchemaTypes'\nexport {createWithUndoRedo} from './createWithUndoRedo'\nexport {createWithUtils} from './createWithUtils'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\nconst originalFnMap = new WeakMap<PortableTextSlateEditor, OriginalEditorFunctions>()\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: createEditorOptions,\n): {editor: PortableTextSlateEditor; subscribe: () => () => void} => {\n  const e = editor as T & PortableTextSlateEditor\n  const {keyGenerator, portableTextEditor, patches$, readOnly, maxBlocks} = options\n  const {schemaTypes, change$} = portableTextEditor\n  e.subscriptions = []\n  if (e.destroy) {\n    e.destroy()\n  } else {\n    // Save a copy of the original editor functions here before they were changed by plugins.\n    // We will put them back when .destroy is called (see below).\n    originalFnMap.set(e, {\n      apply: e.apply,\n      onChange: e.onChange,\n      normalizeNode: e.normalizeNode,\n    })\n  }\n  const operationToPatches = createOperationToPatches(schemaTypes)\n  const withObjectKeys = createWithObjectKeys(schemaTypes, keyGenerator)\n  const withSchemaTypes = createWithSchemaTypes({schemaTypes, keyGenerator})\n  const withEditableAPI = createWithEditableAPI(portableTextEditor, schemaTypes, keyGenerator)\n  const withPatches = createWithPatches({\n    change$,\n    keyGenerator,\n    patches$,\n    patchFunctions: operationToPatches,\n    readOnly,\n    schemaTypes,\n  })\n  const withMaxBlocks = createWithMaxBlocks(maxBlocks || -1)\n  const withPortableTextLists = createWithPortableTextLists(schemaTypes)\n  const withUndoRedo = createWithUndoRedo({\n    readOnly,\n    patches$,\n    blockSchemaType: schemaTypes.block,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(schemaTypes, change$)\n  const withPortableTextBlockStyle = createWithPortableTextBlockStyle(schemaTypes)\n\n  const withPlaceholderBlock = createWithPlaceholderBlock({\n    keyGenerator,\n    schemaTypes,\n  })\n\n  const withUtils = createWithUtils({keyGenerator, schemaTypes})\n  const withPortableTextSelections = createWithPortableTextSelections(change$, schemaTypes)\n\n  e.destroy = () => {\n    const originalFunctions = originalFnMap.get(e)\n    if (!originalFunctions) {\n      throw new Error('Could not find pristine versions of editor functions')\n    }\n    e.apply = originalFunctions.apply\n    e.history = {undos: [], redos: []}\n    e.normalizeNode = originalFunctions.normalizeNode\n    e.onChange = originalFunctions.onChange\n  }\n  if (readOnly) {\n    return {\n      editor: withSchemaTypes(\n        withObjectKeys(\n          withPortableTextMarkModel(\n            withPortableTextBlockStyle(\n              withUtils(\n                withPlaceholderBlock(\n                  withPortableTextLists(withPortableTextSelections(withEditableAPI(e))),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n      subscribe: () => noop,\n    }\n  }\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return {\n    editor: withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPortableTextBlockStyle(\n            withPortableTextLists(\n              withPlaceholderBlock(\n                withUtils(\n                  withMaxBlocks(\n                    withUndoRedo(withPatches(withPortableTextSelections(withEditableAPI(e)))),\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n    subscribe: () => {\n      const unsubscribes: (() => void)[] = []\n      editor.subscriptions.forEach((subscribeFn) => {\n        unsubscribes.push(subscribeFn())\n      })\n      return () => {\n        unsubscribes.forEach((unsubscribeFn) => {\n          unsubscribeFn()\n        })\n      }\n    },\n  }\n}\n","import {type PropsWithChildren, useEffect, useMemo} from 'react'\nimport {createEditor} from 'slate'\nimport {Slate, withReact} from 'slate-react'\n\nimport {type PatchObservable} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {KEY_TO_SLATE_ELEMENT, KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport {withPlugins} from '../plugins'\nimport {type PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('component:PortableTextEditor:SlateContainer')\n\n/**\n * @internal\n */\nexport interface SlateContainerProps extends PropsWithChildren {\n  keyGenerator: () => string\n  maxBlocks: number | undefined\n  patches$?: PatchObservable\n  portableTextEditor: PortableTextEditor\n  readOnly: boolean\n}\n\n/**\n * Sets up and encapsulates the Slate instance\n * @internal\n */\nexport function SlateContainer(props: SlateContainerProps) {\n  const {patches$, portableTextEditor, readOnly, maxBlocks, keyGenerator} = props\n\n  // Create the slate instance\n  const [slateEditor, subscribe] = useMemo(() => {\n    debug('Creating new Slate editor instance')\n    const {editor, subscribe: _sub} = withPlugins(withReact(createEditor()), {\n      keyGenerator,\n      maxBlocks,\n      patches$,\n      portableTextEditor,\n      readOnly,\n    })\n    KEY_TO_VALUE_ELEMENT.set(editor, {})\n    KEY_TO_SLATE_ELEMENT.set(editor, {})\n    return [editor, _sub]\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []) // Only initial - empty deps here\n\n  useEffect(() => {\n    const unsubscribe = subscribe()\n    return () => {\n      unsubscribe()\n    }\n  }, [subscribe])\n\n  // Update the slate instance when plugin dependent props change.\n  useEffect(() => {\n    debug('Re-initializing plugin chain')\n    withPlugins(slateEditor, {\n      keyGenerator,\n      maxBlocks,\n      patches$,\n      portableTextEditor,\n      readOnly,\n    })\n  }, [keyGenerator, portableTextEditor, maxBlocks, readOnly, patches$, slateEditor])\n\n  const initialValue = useMemo(() => {\n    return [slateEditor.createPlaceholderBlock()]\n  }, [slateEditor])\n\n  useEffect(() => {\n    return () => {\n      debug('Destroying Slate editor')\n      slateEditor.destroy()\n    }\n  }, [slateEditor])\n\n  return (\n    <Slate editor={slateEditor} initialValue={initialValue}>\n      {props.children}\n    </Slate>\n  )\n}\n","import {createContext, useContext} from 'react'\n\nimport {type EditorSelection} from '../../types/editor'\n\n/**\n * A React context for sharing the editor selection.\n */\nexport const PortableTextEditorSelectionContext = createContext<EditorSelection | null>(null)\n\n/**\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return selection\n}\n","import {type PortableTextBlock} from '@sanity/types'\nimport {createContext, useContext} from 'react'\n\n/**\n * A React context for sharing the editor value.\n */\nexport const PortableTextEditorValueContext = createContext<PortableTextBlock[] | undefined>(\n  undefined,\n)\n\n/**\n * Get the current editor value from the React context.\n */\nexport const usePortableTextEditorValue = () => {\n  return useContext(PortableTextEditorValueContext)\n}\n","import {createContext, useContext} from 'react'\n\n/**\n * A React context for sharing the editor's readOnly status.\n */\nexport const PortableTextEditorReadOnlyContext = createContext<boolean>(false)\n\n/**\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorReadOnlyStatus = (): boolean => {\n  const readOnly = useContext(PortableTextEditorReadOnlyContext)\n\n  if (readOnly === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorReadOnly\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return readOnly\n}\n","/* eslint-disable max-nested-callbacks */\nimport {type PortableTextBlock} from '@sanity/types'\nimport {debounce, isEqual} from 'lodash'\nimport {useCallback, useMemo, useRef} from 'react'\nimport {type Descendant, Editor, type Node, Text, Transforms} from 'slate'\nimport {useSlate} from 'slate-react'\n\nimport {type EditorChange, type PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {validateValue} from '../../utils/validateValue'\nimport {toSlateValue, VOID_CHILD_KEY} from '../../utils/values'\nimport {isChangingLocally, isChangingRemotely, withRemoteChanges} from '../../utils/withChanges'\nimport {withoutPatching} from '../../utils/withoutPatching'\nimport {withPreserveKeys} from '../../utils/withPreserveKeys'\nimport {withoutSaving} from '../plugins/createWithUndoRedo'\nimport {type PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('hook:useSyncValue')\n\n/**\n * @internal\n */\nexport interface UseSyncValueProps {\n  keyGenerator: () => string\n  onChange: (change: EditorChange) => void\n  portableTextEditor: PortableTextEditor\n  readOnly: boolean\n}\n\nconst CURRENT_VALUE = new WeakMap<PortableTextEditor, PortableTextBlock[] | undefined>()\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport function useSyncValue(\n  props: UseSyncValueProps,\n): (value: PortableTextBlock[] | undefined, userCallbackFn?: () => void) => void {\n  const {portableTextEditor, readOnly, keyGenerator} = props\n  const {change$, schemaTypes} = portableTextEditor\n  const previousValue = useRef<PortableTextBlock[] | undefined>()\n  const slateEditor = useSlate()\n  const updateValueFunctionRef = useRef<(value: PortableTextBlock[] | undefined) => void>()\n\n  const updateFromCurrentValue = useCallback(() => {\n    const currentValue = CURRENT_VALUE.get(portableTextEditor)\n    if (previousValue.current === currentValue) {\n      debug('Value is the same object as previous, not need to sync')\n      return\n    }\n    if (updateValueFunctionRef.current && currentValue) {\n      debug('Updating the value debounced')\n      updateValueFunctionRef.current(currentValue)\n    }\n  }, [portableTextEditor])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const updateValueDebounced = useCallback(\n    debounce(updateFromCurrentValue, 1000, {trailing: true, leading: false}),\n    [updateFromCurrentValue],\n  )\n\n  return useMemo(() => {\n    const updateFunction = (value: PortableTextBlock[] | undefined) => {\n      CURRENT_VALUE.set(portableTextEditor, value)\n      const isProcessingLocalChanges = isChangingLocally(slateEditor)\n      const isProcessingRemoteChanges = isChangingRemotely(slateEditor)\n      if (!readOnly) {\n        if (isProcessingLocalChanges) {\n          debug('Has local changes, not syncing value right now')\n          updateValueDebounced()\n          return\n        }\n        if (isProcessingRemoteChanges) {\n          debug('Has remote changes, not syncing value right now')\n          updateValueDebounced()\n          return\n        }\n      }\n\n      let isChanged = false\n      let isValid = true\n\n      const hadSelection = !!slateEditor.selection\n\n      // If empty value, remove everything in the editor and insert a placeholder block\n      if (!value || value.length === 0) {\n        debug('Value is empty')\n        Editor.withoutNormalizing(slateEditor, () => {\n          withoutSaving(slateEditor, () => {\n            withoutPatching(slateEditor, () => {\n              if (hadSelection) {\n                Transforms.deselect(slateEditor)\n              }\n              const childrenLength = slateEditor.children.length\n              slateEditor.children.forEach((_, index) => {\n                Transforms.removeNodes(slateEditor, {\n                  at: [childrenLength - 1 - index],\n                })\n              })\n              Transforms.insertNodes(slateEditor, slateEditor.createPlaceholderBlock(), {at: [0]})\n              // Add a new selection in the top of the document\n              if (hadSelection) {\n                Transforms.select(slateEditor, [0, 0])\n              }\n            })\n          })\n        })\n        isChanged = true\n      }\n      // Remove, replace or add nodes according to what is changed.\n      if (value && value.length > 0) {\n        const slateValueFromProps = toSlateValue(value, {\n          schemaTypes,\n        })\n        Editor.withoutNormalizing(slateEditor, () => {\n          withRemoteChanges(slateEditor, () => {\n            withoutSaving(slateEditor, () => {\n              withoutPatching(slateEditor, () => {\n                const childrenLength = slateEditor.children.length\n                // Remove blocks that have become superfluous\n                if (slateValueFromProps.length < childrenLength) {\n                  for (let i = childrenLength - 1; i > slateValueFromProps.length - 1; i--) {\n                    Transforms.removeNodes(slateEditor, {\n                      at: [i],\n                    })\n                  }\n                  isChanged = true\n                }\n                // Go through all of the blocks and see if they need to be updated\n                slateValueFromProps.forEach((currentBlock, currentBlockIndex) => {\n                  const oldBlock = slateEditor.children[currentBlockIndex]\n                  const hasChanges = oldBlock && !isEqual(currentBlock, oldBlock)\n                  if (hasChanges && isValid) {\n                    const validationValue = [value[currentBlockIndex]]\n                    const validation = validateValue(validationValue, schemaTypes, keyGenerator)\n                    if (validation.valid) {\n                      if (oldBlock._key === currentBlock._key) {\n                        if (debug.enabled) debug('Updating block', oldBlock, currentBlock)\n                        _updateBlock(slateEditor, currentBlock, oldBlock, currentBlockIndex)\n                      } else {\n                        if (debug.enabled) debug('Replacing block', oldBlock, currentBlock)\n                        _replaceBlock(slateEditor, currentBlock, currentBlockIndex)\n                      }\n                      isChanged = true\n                    } else {\n                      change$.next({\n                        type: 'invalidValue',\n                        resolution: validation.resolution,\n                        value,\n                      })\n                      isValid = false\n                    }\n                  }\n                  if (!oldBlock && isValid) {\n                    const validationValue = [value[currentBlockIndex]]\n                    const validation = validateValue(validationValue, schemaTypes, keyGenerator)\n                    if (debug.enabled)\n                      debug(\n                        'Validating and inserting new block in the end of the value',\n                        currentBlock,\n                      )\n                    if (validation.valid) {\n                      withPreserveKeys(slateEditor, () => {\n                        Transforms.insertNodes(slateEditor, currentBlock, {\n                          at: [currentBlockIndex],\n                        })\n                      })\n                    } else {\n                      debug('Invalid', validation)\n                      change$.next({\n                        type: 'invalidValue',\n                        resolution: validation.resolution,\n                        value,\n                      })\n                      isValid = false\n                    }\n                  }\n                })\n              })\n            })\n          })\n        })\n      }\n\n      if (!isValid) {\n        debug('Invalid value, returning')\n        return\n      }\n      if (isChanged) {\n        debug('Server value changed, syncing editor')\n        try {\n          slateEditor.onChange()\n        } catch (err) {\n          console.error(err)\n          change$.next({\n            type: 'invalidValue',\n            resolution: null,\n            value,\n          })\n          return\n        }\n        if (hadSelection && !slateEditor.selection) {\n          Transforms.select(slateEditor, {\n            anchor: {path: [0, 0], offset: 0},\n            focus: {path: [0, 0], offset: 0},\n          })\n          slateEditor.onChange()\n        }\n        change$.next({type: 'value', value})\n      } else {\n        debug('Server value and editor value is equal, no need to sync.')\n      }\n      previousValue.current = value\n    }\n    updateValueFunctionRef.current = updateFunction\n    return updateFunction\n  }, [\n    change$,\n    keyGenerator,\n    portableTextEditor,\n    readOnly,\n    schemaTypes,\n    slateEditor,\n    updateValueDebounced,\n  ])\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  withPreserveKeys(slateEditor, () => {\n    Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  })\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (slateEditor.isTextBlock(currentBlock) && slateEditor.isTextBlock(oldBlock)) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(Array(oldBlockChildrenLength - currentBlock.children.length)).forEach(\n        (_, index) => {\n          const childIndex = oldBlockChildrenLength - 1 - index\n          if (childIndex > 0) {\n            debug('Removing child')\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, childIndex],\n            })\n          }\n        },\n      )\n    }\n    currentBlock.children.forEach((currentBlockChild, currentBlockChildIndex) => {\n      const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n      const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n      const isTextChanged = !isEqual(currentBlockChild.text, oldBlockChild?.text)\n      const path = [currentBlockIndex, currentBlockChildIndex]\n      if (isChildChanged) {\n        // Update if this is the same child\n        if (currentBlockChild._key === oldBlockChild?._key) {\n          debug('Updating changed child', currentBlockChild, oldBlockChild)\n          Transforms.setNodes(slateEditor, currentBlockChild as Partial<Node>, {\n            at: path,\n          })\n          const isSpanNode =\n            Text.isText(currentBlockChild) &&\n            currentBlockChild._type === 'span' &&\n            Text.isText(oldBlockChild) &&\n            oldBlockChild._type === 'span'\n          if (isSpanNode && isTextChanged) {\n            Transforms.delete(slateEditor, {\n              at: {focus: {path, offset: 0}, anchor: {path, offset: oldBlockChild.text.length}},\n            })\n            Transforms.insertText(slateEditor, currentBlockChild.text, {\n              at: path,\n            })\n            slateEditor.onChange()\n          } else if (!isSpanNode) {\n            // If it's a inline block, also update the void text node key\n            debug('Updating changed inline object child', currentBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              {_key: VOID_CHILD_KEY},\n              {\n                at: [...path, 0],\n                voids: true,\n              },\n            )\n          }\n          // Replace the child if _key's are different\n        } else if (oldBlockChild) {\n          debug('Replacing child', currentBlockChild)\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, currentBlockChildIndex],\n          })\n          withPreserveKeys(slateEditor, () => {\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n          })\n          slateEditor.onChange()\n          // Insert it if it didn't exist before\n        } else if (!oldBlockChild) {\n          debug('Inserting new child', currentBlockChild)\n          withPreserveKeys(slateEditor, () => {\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          })\n        }\n      }\n    })\n  }\n}\n","import {type PortableTextBlock} from '@sanity/types'\nimport {throttle} from 'lodash'\nimport {\n  type PropsWithChildren,\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {Editor} from 'slate'\nimport {useSlate} from 'slate-react'\n\nimport {type EditorChange, type EditorChanges, type EditorSelection} from '../../types/editor'\nimport {type Patch} from '../../types/patch'\nimport {debugWithName} from '../../utils/debug'\nimport {IS_PROCESSING_LOCAL_CHANGES} from '../../utils/weakMaps'\nimport {PortableTextEditorContext} from '../hooks/usePortableTextEditor'\nimport {PortableTextEditorKeyGeneratorContext} from '../hooks/usePortableTextEditorKeyGenerator'\nimport {PortableTextEditorSelectionContext} from '../hooks/usePortableTextEditorSelection'\nimport {PortableTextEditorValueContext} from '../hooks/usePortableTextEditorValue'\nimport {PortableTextEditorReadOnlyContext} from '../hooks/usePortableTextReadOnly'\nimport {useSyncValue} from '../hooks/useSyncValue'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('component:PortableTextEditor:Synchronizer')\nconst debugVerbose = debug.enabled && false\n\n// The editor will commit changes in a throttled fashion in order\n// not to overload the network and degrade performance while typing.\nconst FLUSH_PATCHES_THROTTLED_MS = process.env.NODE_ENV === 'test' ? 500 : 1000\n\n/**\n * @internal\n */\nexport interface SynchronizerProps extends PropsWithChildren {\n  change$: EditorChanges\n  portableTextEditor: PortableTextEditor\n  keyGenerator: () => string\n  onChange: (change: EditorChange) => void\n  readOnly: boolean\n  value: PortableTextBlock[] | undefined\n}\n\n/**\n * Synchronizes the server value with the editor, and provides various contexts for the editor state.\n * @internal\n */\nexport function Synchronizer(props: SynchronizerProps) {\n  const {change$, portableTextEditor, onChange, keyGenerator, readOnly, value} = props\n  const [selection, setSelection] = useState<EditorSelection>(null)\n  const pendingPatches = useRef<Patch[]>([])\n\n  const syncValue = useSyncValue({\n    keyGenerator,\n    onChange,\n    portableTextEditor,\n    readOnly,\n  })\n\n  const slateEditor = useSlate()\n\n  useEffect(() => {\n    IS_PROCESSING_LOCAL_CHANGES.set(slateEditor, false)\n  }, [slateEditor])\n\n  const onFlushPendingPatches = useCallback(() => {\n    if (pendingPatches.current.length > 0) {\n      debug('Flushing pending patches')\n      if (debugVerbose) {\n        debug(`Patches:\\n${JSON.stringify(pendingPatches.current, null, 2)}`)\n      }\n      const snapshot = PortableTextEditor.getValue(portableTextEditor)\n      change$.next({type: 'mutation', patches: pendingPatches.current, snapshot})\n      pendingPatches.current = []\n    }\n    IS_PROCESSING_LOCAL_CHANGES.set(slateEditor, false)\n  }, [slateEditor, portableTextEditor, change$])\n\n  const onFlushPendingPatchesThrottled = useMemo(() => {\n    return throttle(\n      () => {\n        // If the editor is normalizing (each operation) it means that it's not in the middle of a bigger transform,\n        // and we can flush these changes immediately.\n        if (Editor.isNormalizing(slateEditor)) {\n          onFlushPendingPatches()\n          return\n        }\n        // If it's in the middle of something, try again.\n        onFlushPendingPatchesThrottled()\n      },\n      FLUSH_PATCHES_THROTTLED_MS,\n      {\n        leading: false,\n        trailing: true,\n      },\n    )\n  }, [onFlushPendingPatches, slateEditor])\n\n  // Flush pending patches immediately on unmount\n  useEffect(() => {\n    return () => {\n      onFlushPendingPatches()\n    }\n  }, [onFlushPendingPatches])\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to editor changes$')\n    const sub = change$.subscribe((next: EditorChange): void => {\n      switch (next.type) {\n        case 'patch':\n          IS_PROCESSING_LOCAL_CHANGES.set(slateEditor, true)\n          pendingPatches.current.push(next.patch)\n          onFlushPendingPatchesThrottled()\n          onChange(next)\n          break\n        case 'selection':\n          // Set the selection state in a transition, we don't need the state immediately.\n          startTransition(() => {\n            if (debugVerbose) debug('Setting selection')\n            setSelection(next.selection)\n          })\n          onChange(next) // Keep this out of the startTransition!\n          break\n        default:\n          onChange(next)\n      }\n    })\n    return () => {\n      debug('Unsubscribing to changes$')\n      sub.unsubscribe()\n    }\n  }, [change$, onChange, onFlushPendingPatchesThrottled, slateEditor])\n\n  // Sync the value when going online\n  const handleOnline = useCallback(() => {\n    debug('Editor is online, syncing from props.value')\n    change$.next({type: 'connection', value: 'online'})\n    syncValue(value)\n  }, [change$, syncValue, value])\n\n  const handleOffline = useCallback(() => {\n    debug('Editor is offline')\n    change$.next({type: 'connection', value: 'offline'})\n  }, [change$])\n\n  // Notify about window online and offline status changes\n  useEffect(() => {\n    if (portableTextEditor.props.patches$) {\n      window.addEventListener('online', handleOnline)\n      window.addEventListener('offline', handleOffline)\n    }\n    return () => {\n      if (portableTextEditor.props.patches$) {\n        window.removeEventListener('online', handleOnline)\n        window.removeEventListener('offline', handleOffline)\n      }\n    }\n  })\n\n  // This hook must be set up after setting up the subscription above, or it will not pick up validation errors from the useSyncValue hook.\n  // This will cause the editor to not be able to signal a validation error and offer invalid value resolution of the initial value.\n  const isInitialValueFromProps = useRef(true)\n  useEffect(() => {\n    debug('Value from props changed, syncing new value')\n    syncValue(value)\n    // Signal that we have our first value, and are ready to roll.\n    if (isInitialValueFromProps.current) {\n      change$.next({type: 'loading', isLoading: false})\n      change$.next({type: 'ready'})\n      isInitialValueFromProps.current = false\n    }\n  }, [change$, syncValue, value])\n\n  return (\n    <PortableTextEditorKeyGeneratorContext.Provider value={keyGenerator}>\n      <PortableTextEditorContext.Provider value={portableTextEditor}>\n        <PortableTextEditorValueContext.Provider value={value}>\n          <PortableTextEditorReadOnlyContext.Provider value={readOnly}>\n            <PortableTextEditorSelectionContext.Provider value={selection}>\n              {props.children}\n            </PortableTextEditorSelectionContext.Provider>\n          </PortableTextEditorReadOnlyContext.Provider>\n        </PortableTextEditorValueContext.Provider>\n      </PortableTextEditorContext.Provider>\n    </PortableTextEditorKeyGeneratorContext.Provider>\n  )\n}\n","import {\n  type ArrayDefinition,\n  type ArraySchemaType,\n  type BlockSchemaType,\n  type ObjectSchemaType,\n  type Path,\n  type PortableTextBlock,\n  type PortableTextChild,\n  type PortableTextObject,\n  type SpanSchemaType,\n} from '@sanity/types'\nimport {Component, type MutableRefObject, type PropsWithChildren} from 'react'\nimport {Subject} from 'rxjs'\n\nimport {\n  type EditableAPI,\n  type EditableAPIDeleteOptions,\n  type EditorChange,\n  type EditorChanges,\n  type EditorSelection,\n  type PatchObservable,\n  type PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {debugWithName} from '../utils/debug'\nimport {getPortableTextMemberSchemaTypes} from '../utils/getPortableTextMemberSchemaTypes'\nimport {compileType} from '../utils/schema'\nimport {SlateContainer} from './components/SlateContainer'\nimport {Synchronizer} from './components/Synchronizer'\nimport {defaultKeyGenerator} from './hooks/usePortableTextEditorKeyGenerator'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n */\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n */\nexport type PortableTextEditorProps = PropsWithChildren<{\n  /**\n   * Function that gets called when the editor changes the value\n   */\n  onChange: (change: EditorChange) => void\n\n  /**\n   * Schema type for the portable text field\n   */\n  schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n  /**\n   * Maximum number of blocks to allow within the editor\n   */\n  maxBlocks?: number | string\n\n  /**\n   * Whether or not the editor should be in read-only mode\n   */\n  readOnly?: boolean\n\n  /**\n   * The current value of the portable text field\n   */\n  value?: PortableTextBlock[]\n\n  /**\n   * Function used to generate keys for array items (`_key`)\n   */\n  keyGenerator?: () => string\n\n  /**\n   * Observable of local and remote patches for the edited value.\n   */\n  patches$?: PatchObservable\n\n  /**\n   * Backward compatibility (renamed to patches$).\n   */\n  incomingPatches$?: PatchObservable\n\n  /**\n   * A ref to the editor instance\n   */\n  editorRef?: MutableRefObject<PortableTextEditor | null>\n}>\n\n/**\n * The main Portable Text Editor component.\n * @public\n */\nexport class PortableTextEditor extends Component<PortableTextEditorProps> {\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor API (currently implemented with Slate).\n   */\n  private editable?: EditableAPI\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (!props.schemaType) {\n      throw new Error('PortableTextEditor: missing \"type\" property')\n    }\n\n    if (props.incomingPatches$) {\n      console.warn(`The prop 'incomingPatches$' is deprecated and renamed to 'patches$'`)\n    }\n\n    this.change$.next({type: 'loading', isLoading: true})\n\n    this.schemaTypes = getPortableTextMemberSchemaTypes(\n      props.schemaType.hasOwnProperty('jsonType')\n        ? props.schemaType\n        : compileType(props.schemaType),\n    )\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (this.props.schemaType !== prevProps.schemaType) {\n      this.schemaTypes = getPortableTextMemberSchemaTypes(\n        this.props.schemaType.hasOwnProperty('jsonType')\n          ? this.props.schemaType\n          : compileType(this.props.schemaType),\n      )\n    }\n    if (this.props.editorRef !== prevProps.editorRef && this.props.editorRef) {\n      this.props.editorRef.current = this\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editable = {...this.editable, ...editable}\n  }\n\n  render() {\n    const {onChange, value, children, patches$, incomingPatches$} = this.props\n    const {change$} = this\n    const _patches$ = incomingPatches$ || patches$ // Backward compatibility\n\n    const maxBlocks =\n      typeof this.props.maxBlocks === 'undefined'\n        ? undefined\n        : parseInt(this.props.maxBlocks.toString(), 10) || undefined\n\n    const readOnly = Boolean(this.props.readOnly)\n    const keyGenerator = this.props.keyGenerator || defaultKeyGenerator\n    return (\n      <SlateContainer\n        keyGenerator={keyGenerator}\n        maxBlocks={maxBlocks}\n        patches$={_patches$}\n        portableTextEditor={this}\n        readOnly={readOnly}\n      >\n        <Synchronizer\n          change$={change$}\n          keyGenerator={keyGenerator}\n          onChange={onChange}\n          portableTextEditor={this}\n          readOnly={readOnly}\n          value={value}\n        >\n          {children}\n        </Synchronizer>\n      </SlateContainer>\n    )\n  }\n\n  // Static API methods\n  static activeAnnotations = (editor: PortableTextEditor): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n  static addAnnotation = (\n    editor: PortableTextEditor,\n    type: ObjectSchemaType,\n    value?: {[prop: string]: unknown},\n  ): {spanPath: Path; markDefPath: Path} | undefined => editor.editable?.addAnnotation(type, value)\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    // eslint-disable-next-line react/no-find-dom-node\n    return editor.editable?.findDOMNode(element)\n  }\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n  static focusChild = (editor: PortableTextEditor): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n  static insertChild = (\n    editor: PortableTextEditor,\n    type: SpanSchemaType | ObjectSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n  static insertBlock = (\n    editor: PortableTextEditor,\n    type: BlockSchemaType | ObjectSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n  static isVoid = (editor: PortableTextEditor, element: PortableTextBlock | PortableTextChild) => {\n    return editor.editable?.isVoid(element)\n  }\n  static isObjectPath = (editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n  static select = (editor: PortableTextEditor, selection: EditorSelection | null) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n  static removeAnnotation = (editor: PortableTextEditor, type: ObjectSchemaType) =>\n    editor.editable?.removeAnnotation(type)\n  static toggleBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n  static getFragment = (editor: PortableTextEditor): PortableTextBlock[] | undefined => {\n    debug(`Host getting fragment`)\n    return editor.editable?.getFragment()\n  }\n}\n","import {type Path, type PortableTextObject, type PortableTextTextBlock} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  type ReactElement,\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {Text} from 'slate'\nimport {type RenderLeafProps, useSelected} from 'slate-react'\n\nimport {\n  type BlockAnnotationRenderProps,\n  type BlockChildRenderProps,\n  type BlockDecoratorRenderProps,\n  type PortableTextMemberSchemaTypes,\n  type RenderAnnotationFunction,\n  type RenderChildFunction,\n  type RenderDecoratorFunction,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {DefaultAnnotation} from '../nodes/DefaultAnnotation'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('components:Leaf')\n\nconst EMPTY_MARKS: string[] = []\n\n/**\n * @internal\n */\nexport interface LeafProps extends RenderLeafProps {\n  children: ReactElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\n/**\n * Renders Portable Text span nodes in Slate\n * @internal\n */\nexport const Leaf = (props: LeafProps) => {\n  const {attributes, children, leaf, schemaTypes, renderChild, renderDecorator, renderAnnotation} =\n    props\n  const spanRef = useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n  const block = children.props.parent as PortableTextTextBlock | undefined\n  const path: Path = useMemo(\n    () => (block ? [{_key: block?._key}, 'children', {_key: leaf._key}] : []),\n    [block, leaf._key],\n  )\n  const decoratorValues = useMemo(\n    () => schemaTypes.decorators.map((dec) => dec.value),\n    [schemaTypes.decorators],\n  )\n  const marks: string[] = useMemo(\n    () => uniq((leaf.marks || EMPTY_MARKS).filter((mark) => decoratorValues.includes(mark))),\n    [decoratorValues, leaf.marks],\n  )\n  const annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS\n  const annotations = useMemo(\n    () =>\n      annotationMarks\n        .map(\n          (mark) =>\n            !decoratorValues.includes(mark) && block?.markDefs?.find((def) => def._key === mark),\n        )\n        .filter(Boolean) as PortableTextObject[],\n    [annotationMarks, block, decoratorValues],\n  )\n\n  const shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n    debug('Setting selection and focus from range')\n    const winSelection = window.getSelection()\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n    const sub = portableTextEditor.change$.subscribe((next) => {\n      if (next.type === 'blur') {\n        setFocused(false)\n        setSelected(false)\n        return\n      }\n      if (next.type === 'focus') {\n        const sel = PortableTextEditor.getSelection(portableTextEditor)\n        if (\n          sel &&\n          isEqual(sel.focus.path, path) &&\n          PortableTextEditor.isCollapsedSelection(portableTextEditor)\n        ) {\n          setFocused(true)\n        }\n        setSelectedFromRange()\n        return\n      }\n      if (next.type === 'selection') {\n        if (\n          next.selection &&\n          isEqual(next.selection.focus.path, path) &&\n          PortableTextEditor.isCollapsedSelection(portableTextEditor)\n        ) {\n          setFocused(true)\n        } else {\n          setFocused(false)\n        }\n        setSelectedFromRange()\n      }\n    })\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [path, portableTextEditor, setSelectedFromRange, shouldTrackSelectionAndFocus])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  const content = useMemo(() => {\n    let returnedChildren = children\n    // Render text nodes\n    if (Text.isText(leaf) && leaf._type === schemaTypes.span.name) {\n      marks.forEach((mark) => {\n        const schemaType = schemaTypes.decorators.find((dec) => dec.value === mark)\n        if (schemaType && renderDecorator) {\n          const _props: Omit<BlockDecoratorRenderProps, 'type'> = Object.defineProperty(\n            {\n              children: returnedChildren,\n              editorElementRef: spanRef,\n              focused,\n              path,\n              selected,\n              schemaType,\n              value: mark,\n            },\n            'type',\n            {\n              enumerable: false,\n              get() {\n                console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\")\n                return schemaType\n              },\n            },\n          )\n          returnedChildren = renderDecorator(_props as BlockDecoratorRenderProps)\n        }\n      })\n\n      if (block && annotations.length > 0) {\n        annotations.forEach((annotation) => {\n          const schemaType = schemaTypes.annotations.find((t) => t.name === annotation._type)\n          if (schemaType) {\n            if (renderAnnotation) {\n              const _props: Omit<BlockAnnotationRenderProps, 'type'> = Object.defineProperty(\n                {\n                  block,\n                  children: returnedChildren,\n                  editorElementRef: spanRef,\n                  focused,\n                  path,\n                  selected,\n                  schemaType,\n                  value: annotation,\n                },\n                'type',\n                {\n                  enumerable: false,\n                  get() {\n                    console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\")\n                    return schemaType\n                  },\n                },\n              )\n\n              returnedChildren = (\n                <span ref={spanRef}>{renderAnnotation(_props as BlockAnnotationRenderProps)}</span>\n              )\n            } else {\n              returnedChildren = (\n                <DefaultAnnotation annotation={annotation}>\n                  <span ref={spanRef}>{returnedChildren}</span>\n                </DefaultAnnotation>\n              )\n            }\n          }\n        })\n      }\n      if (block && renderChild) {\n        const child = block.children.find((_child) => _child._key === leaf._key) // Ensure object equality\n        if (child) {\n          const defaultRendered = <>{returnedChildren}</>\n          const _props: Omit<BlockChildRenderProps, 'type'> = Object.defineProperty(\n            {\n              annotations,\n              children: defaultRendered,\n              editorElementRef: spanRef,\n              focused,\n              path,\n              schemaType: schemaTypes.span,\n              selected,\n              value: child,\n            },\n            'type',\n            {\n              enumerable: false,\n              get() {\n                console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\")\n                return schemaTypes.span\n              },\n            },\n          )\n          returnedChildren = renderChild(_props as BlockChildRenderProps)\n        }\n      }\n    }\n    return returnedChildren\n  }, [\n    annotations,\n    block,\n    children,\n    focused,\n    leaf,\n    marks,\n    path,\n    renderAnnotation,\n    renderChild,\n    renderDecorator,\n    schemaTypes.annotations,\n    schemaTypes.decorators,\n    schemaTypes.span,\n    selected,\n  ])\n  return useMemo(\n    () => (\n      <span key={leaf._key} {...attributes} ref={spanRef}>\n        {content}\n      </span>\n    ),\n    [leaf, attributes, content],\n  )\n}\n","import {type ForwardedRef, type MutableRefObject, useEffect, useLayoutEffect, useRef} from 'react'\n\nconst useIsomorphicEffect = typeof window === 'undefined' ? useEffect : useLayoutEffect\n\nexport function useForwardedRef<T>(ref: ForwardedRef<T>): MutableRefObject<T | null> {\n  const innerRef = useRef<T | null>(null)\n\n  useIsomorphicEffect(() => {\n    if (!ref) return\n\n    if (typeof ref === 'function') {\n      ref(innerRef.current)\n    } else {\n      ref.current = innerRef.current\n    }\n  })\n\n  return innerRef\n}\n","import {type PortableTextBlock} from '@sanity/types'\nimport {noop} from 'lodash'\nimport {\n  type ClipboardEvent,\n  type CSSProperties,\n  type FocusEventHandler,\n  type ForwardedRef,\n  forwardRef,\n  type HTMLProps,\n  type KeyboardEvent,\n  type ReactNode,\n  type TextareaHTMLAttributes,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport {type BaseRange, Editor, type Text, Transforms} from 'slate'\nimport {\n  Editable as SlateEditable,\n  ReactEditor,\n  type RenderElementProps,\n  type RenderLeafProps,\n  useSlate,\n} from 'slate-react'\n\nimport {\n  type EditorChange,\n  type EditorSelection,\n  type OnCopyFn,\n  type OnPasteFn,\n  type OnPasteResult,\n  type RenderAnnotationFunction,\n  type RenderBlockFunction,\n  type RenderChildFunction,\n  type RenderDecoratorFunction,\n  type RenderListItemFunction,\n  type RenderStyleFunction,\n  type ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport {type HotkeyOptions} from '../types/options'\nimport {debugWithName} from '../utils/debug'\nimport {toPortableTextRange, toSlateRange} from '../utils/ranges'\nimport {normalizeSelection} from '../utils/selection'\nimport {fromSlateValue, isEqualToEmptyEditor, toSlateValue} from '../utils/values'\nimport {Element} from './components/Element'\nimport {Leaf} from './components/Leaf'\nimport {useForwardedRef} from './hooks/useForwardedRef'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {usePortableTextEditorKeyGenerator} from './hooks/usePortableTextEditorKeyGenerator'\nimport {usePortableTextEditorReadOnlyStatus} from './hooks/usePortableTextReadOnly'\nimport {createWithHotkeys, createWithInsertData} from './plugins'\nimport {PortableTextEditor} from './PortableTextEditor'\n\nconst debug = debugWithName('component:Editable')\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\nconst EMPTY_DECORATORS: BaseRange[] = []\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: () => ReactNode\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n */\nexport const PortableTextEditable = forwardRef(function PortableTextEditable(\n  props: PortableTextEditableProps &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'onPaste' | 'onBeforeInput'>,\n  forwardedRef: ForwardedRef<HTMLDivElement>,\n) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const readOnly = usePortableTextEditorReadOnlyStatus()\n  const keyGenerator = usePortableTextEditorKeyGenerator()\n  const ref = useForwardedRef(forwardedRef)\n  const [editableElement, setEditableElement] = useState<HTMLDivElement | null>(null)\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n\n  const {change$, schemaTypes} = portableTextEditor\n  const slateEditor = useSlate()\n\n  const blockTypeName = schemaTypes.block.name\n\n  // React/UI-specific plugins\n  const withInsertData = useMemo(\n    () => createWithInsertData(change$, schemaTypes, keyGenerator),\n    [change$, keyGenerator, schemaTypes],\n  )\n  const withHotKeys = useMemo(\n    () => createWithHotkeys(schemaTypes, keyGenerator, portableTextEditor, hotkeys),\n    [hotkeys, keyGenerator, portableTextEditor, schemaTypes],\n  )\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    if (readOnly) {\n      debug('Editable is in read only mode')\n      return withInsertData(slateEditor)\n    }\n    debug('Editable is in edit mode')\n    return withInsertData(withHotKeys(slateEditor))\n  }, [readOnly, slateEditor, withHotKeys, withInsertData])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <Element\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        schemaTypes={schemaTypes}\n        spellCheck={spellCheck}\n      />\n    ),\n    [schemaTypes, spellCheck, readOnly, renderBlock, renderChild, renderListItem, renderStyle],\n  )\n\n  const renderLeaf = useCallback(\n    (lProps: RenderLeafProps & {leaf: Text & {placeholder?: boolean}}) => {\n      const rendered = (\n        <Leaf\n          {...lProps}\n          schemaTypes={schemaTypes}\n          renderAnnotation={renderAnnotation}\n          renderChild={renderChild}\n          renderDecorator={renderDecorator}\n          readOnly={readOnly}\n        />\n      )\n      if (renderPlaceholder && lProps.leaf.placeholder && lProps.text.text === '') {\n        return (\n          <>\n            <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n              {renderPlaceholder()}\n            </span>\n            {rendered}\n          </>\n        )\n      }\n      return rendered\n    },\n    [readOnly, renderAnnotation, renderChild, renderDecorator, renderPlaceholder, schemaTypes],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(slateEditor.children, blockTypeName),\n      )\n      if (normalizedSelection !== null) {\n        debug(`Normalized selection from props ${JSON.stringify(normalizedSelection)}`)\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            change$.next({type: 'selection', selection: normalizedSelection})\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [propsSelection, slateEditor, blockTypeName, change$])\n\n  // Subscribe to change$ and restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    debug('Subscribing to editor changes$')\n    const sub = change$.subscribe((next: EditorChange): void => {\n      switch (next.type) {\n        case 'ready':\n          restoreSelectionFromProps()\n          break\n        case 'invalidValue':\n          setHasInvalidValue(true)\n          break\n        case 'value':\n          setHasInvalidValue(false)\n          break\n        default:\n      }\n    })\n    return () => {\n      debug('Unsubscribing to changes$')\n      sub.unsubscribe()\n    }\n  }, [change$, restoreSelectionFromProps])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      }\n    },\n    [onCopy],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      event.preventDefault()\n      if (!slateEditor.selection) {\n        return\n      }\n      if (!onPaste) {\n        debug('Pasting normally')\n        slateEditor.insertData(event.clipboardData)\n        return\n      }\n      // Resolve it as promise (can be either async promise or sync return value)\n      new Promise<OnPasteResult>((resolve) => {\n        const value = PortableTextEditor.getValue(portableTextEditor)\n        const ptRange = toPortableTextRange(value, slateEditor.selection, schemaTypes)\n        const path = ptRange?.focus.path || []\n        resolve(\n          onPaste({\n            event,\n            value,\n            path,\n            schemaTypes,\n          }),\n        )\n      })\n        .then((result) => {\n          debug('Custom paste function from client resolved', result)\n          change$.next({type: 'loading', isLoading: true})\n          if (!result || !result.insert) {\n            debug('No result from custom paste handler, pasting normally')\n            slateEditor.insertData(event.clipboardData)\n            return\n          }\n          if (result && result.insert) {\n            slateEditor.insertFragment(\n              toSlateValue(result.insert as PortableTextBlock[], {schemaTypes}),\n            )\n            change$.next({type: 'loading', isLoading: false})\n            return\n          }\n          console.warn('Your onPaste function returned something unexpected:', result)\n        })\n        .catch((error) => {\n          change$.next({type: 'loading', isLoading: false})\n          console.error(error) // eslint-disable-line no-console\n          return error\n        })\n    },\n    [change$, onPaste, portableTextEditor, schemaTypes, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        const selection = PortableTextEditor.getSelection(portableTextEditor)\n        // Create an editor selection if it does'nt exist\n        if (selection === null) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n        change$.next({type: 'focus', event})\n        const newSelection = PortableTextEditor.getSelection(portableTextEditor)\n        // If the selection is the same, emit it explicitly here as there is no actual onChange event triggered.\n        if (selection === newSelection) {\n          change$.next({\n            type: 'selection',\n            selection,\n          })\n        }\n      }\n    },\n    [onFocus, portableTextEditor, change$, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        change$.next({type: 'blur', event})\n      }\n    },\n    [change$, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  // This function will handle unexpected DOM changes inside the Editable rendering,\n  // and make sure that we can maintain a stable slateEditor.selection when that happens.\n  //\n  // For example, if this Editable is rendered inside something that might re-render\n  // this component (hidden contexts) while the user is still actively changing the\n  // contentEditable, this could interfere with the intermediate DOM selection,\n  // which again could be picked up by ReactEditor's event listeners.\n  // If that range is invalid at that point, the slate.editorSelection could be\n  // set either wrong, or invalid, to which slateEditor will throw exceptions\n  // that are impossible to recover properly from or result in a wrong selection.\n  //\n  // Also the other way around, when the ReactEditor will try to create a DOM Range\n  // from the current slateEditor.selection, it may throw unrecoverable errors\n  // if the current editor.selection is invalid according to the DOM.\n  // If this is the case, default to selecting the top of the document, if the\n  // user already had a selection.\n  const validateSelection = useCallback(() => {\n    if (!slateEditor.selection) {\n      return\n    }\n    const root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n    const {activeElement} = root\n    // Return if the editor isn't the active element\n    if (ref.current !== activeElement) {\n      return\n    }\n    const window = ReactEditor.getWindow(slateEditor)\n    const domSelection = window.getSelection()\n    if (!domSelection || domSelection.rangeCount === 0) {\n      return\n    }\n    const existingDOMRange = domSelection.getRangeAt(0)\n    try {\n      const newDOMRange = ReactEditor.toDOMRange(slateEditor, slateEditor.selection)\n      if (\n        newDOMRange.startOffset !== existingDOMRange.startOffset ||\n        newDOMRange.endOffset !== existingDOMRange.endOffset\n      ) {\n        debug('DOM range out of sync, validating selection')\n        // Remove all ranges temporary\n        domSelection?.removeAllRanges()\n        // Set the correct range\n        domSelection.addRange(newDOMRange)\n      }\n    } catch (error) {\n      debug(`Could not resolve selection, selecting top document`)\n      // Deselect the editor\n      Transforms.deselect(slateEditor)\n      // Select top document if there is a top block to select\n      if (slateEditor.children.length > 0) {\n        Transforms.select(slateEditor, [0, 0])\n      }\n      slateEditor.onChange()\n    }\n  }, [ref, slateEditor])\n\n  // Observe mutations (child list and subtree) to this component's DOM,\n  // and make sure the editor selection is valid when that happens.\n  useEffect(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection)\n      mutationObserver.observe(editableElement, {\n        attributeOldValue: false,\n        attributes: false,\n        characterData: false,\n        childList: true,\n        subtree: true,\n      })\n      return () => {\n        mutationObserver.disconnect()\n      }\n    }\n    return undefined\n  }, [validateSelection, editableElement])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n    },\n    [props, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  const decorate = useCallback(() => {\n    if (isEqualToEmptyEditor(slateEditor.children, schemaTypes)) {\n      return [\n        {\n          anchor: {\n            path: [0, 0],\n            offset: 0,\n          },\n          focus: {\n            path: [0, 0],\n            offset: 0,\n          },\n          placeholder: true,\n        },\n      ]\n    }\n    return EMPTY_DECORATORS\n  }, [schemaTypes, slateEditor])\n\n  // Set the forwarded ref to be the Slate editable DOM element\n  // Also set the editable element in a state so that the MutationObserver\n  // is setup when this element is ready.\n  useEffect(() => {\n    ref.current = ReactEditor.toDOMNode(slateEditor, slateEditor) as HTMLDivElement | null\n    setEditableElement(ref.current)\n  }, [slateEditor, ref])\n\n  if (!portableTextEditor) {\n    return null\n  }\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n","import {isEqual} from 'lodash'\n\nimport {type Patch} from '../types/patch'\n\n/**\n * Try to compact a set of patches\n *\n */\nexport function compactPatches(patches: Patch[]) {\n  // If the last patch is unsetting everything, just do that\n  const lastPatch = patches.slice(-1)[0]\n  if (lastPatch && lastPatch.type === 'unset' && lastPatch.path.length === 0) {\n    return [lastPatch]\n  }\n  let finalPatches = patches\n  // Run through the patches and remove any redundant ones.\n  finalPatches = finalPatches.filter((patch, index) => {\n    if (!patch) {\n      return false\n    }\n    const nextPatch = finalPatches[index + 1]\n    if (\n      nextPatch &&\n      nextPatch.type === 'set' &&\n      patch.type === 'set' &&\n      isEqual(patch.path, nextPatch.path)\n    ) {\n      return false\n    }\n    return true\n  })\n  if (finalPatches.length !== patches.length) {\n    return finalPatches\n  }\n  return patches\n}\n"],"names":["rootName","debug","debugWithName","name","namespace","concat","enabled","createKeyedPath","point","value","types","blockPath","path","block","keyedBlockPath","_key","_type","keyedChildPath","childPath","slice","child","Array","isArray","children","createArrayedPath","editor","from","Editor","nodes","at","match","n","isKeySegment","Element","isElement","isVoid","childIndex","findIndex","isEqual","toPortableTextRange","range","anchor","focus","anchorPath","offset","focusPath","backward","Boolean","Range","isRange","isBackward","toSlateRange","selection","normalizePoint","newPath","newOffset","blockKey","childKey","find","blk","push","length","cld","text","normalizeSelection","newAnchor","newFocus","defaultKeyGenerator","randomKey","PortableTextEditorKeyGeneratorContext","createContext","usePortableTextEditorKeyGenerator","keyGenerator","useContext","Error","EMPTY_MARKDEFS","EMPTY_MARKS","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","toSlateValue","_ref","schemaTypes","arguments","undefined","map","rest","voidChildren","marks","isPortableText","textBlock","hasInlines","hasMissingStyle","style","hasMissingMarkDefs","markDefs","hasMissingChildren","span","cType","cKey","cRest","__inline","styles","fromSlateValue","textBlockType","_cType","v","k","t","_i","_c","blockValue","isEqualToEmptyEditor","_a","Text","isText","join","IS_PROCESSING_REMOTE_CHANGES","WeakMap","IS_PROCESSING_LOCAL_CHANGES","IS_DRAGGING","IS_DRAGGING_BLOCK_ELEMENT","IS_DRAGGING_ELEMENT_TARGET","IS_DRAGGING_BLOCK_TARGET_POSITION","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","DefaultObject","props","jsx","JSON","stringify","_b","_d","DefaultBlockObject","styled","div","__template","selected","DefaultListItem","getLeftPositionForListLevel","listLevel","getContentForListLevelAndStyle","listStyle","getCounterIncrementForListLevel","getCounterResetForListLevel","getCounterContentForListLevel","DefaultListItemInner","level","Number","bullets","normalizedLevel","DraggableBlock","_ref2","element","readOnly","blockRef","useSlateStatic","dragGhostRef","useRef","isDragOver","setIsDragOver","useState","useMemo","isInline","blockElement","setBlockElement","useEffect","current","ReactEditor","toDOMNode","handleDragOver","useCallback","event","isMyDragOver","get","preventDefault","dataTransfer","dropEffect","set","elementRect","getBoundingClientRect","top","height","Y","pageY","loc","Math","abs","position","handleDragLeave","handleDragEnd","targetBlock","stopPropagation","delete","document","body","removeChild","dragPosition","targetPath","findPath","myPath","isBefore","Path","originalPath","next","previous","equals","Transforms","moveNodes","to","onChange","handleDrop","handleDrag","target","HTMLElement","opacity","handleDragStart","setData","effectAllowed","dragGhost","cloneNode","customGhost","querySelector","setAttribute","left","boxSizing","appendChild","rect","x","clientX","y","clientY","width","setDragImage","isDraggingOverFirstBlock","isDraggingOverLastBlock","isDraggingOverTop","isDraggingOverBottom","dropIndicator","className","borderBottom","zIndex","jsxs","draggable","onDragStart","onDrag","onDragOver","onDragLeave","onDragEnd","onDrop","EMPTY_ANNOTATIONS","inlineBlockStyle","display","_ref3","attributes","renderBlock","renderChild","renderListItem","renderStyle","spellCheck","useSelected","inlineBlockObjectRef","focused","isCollapsed","renderedBlock","node","depth","schemaType","inlineObjects","SlateElement","elmPath","ref","contentEditable","annotations","ObjectNode","editorElementRef","type","isListItem","blockStyleType","item","listItem","isListBlock","listType","lists","renderProps","Object","defineProperty","enumerable","console","warn","propsOrDefaultRendered","blockObjects","renderedBlockFromProps","_props","PortableTextEditorContext","usePortableTextEditor","DefaultAnnotation","handleClick","alert","annotation","color","onClick","getPortableTextMemberSchemaTypes","portableTextType","blockType","of","findBlockType","childrenField","fields","field","ofType","spanType","memberType","inlineObjectTypes","filter","blockObjectTypes","resolveEnabledStyles","decorators","resolveEnabledDecorators","resolveEnabledListItems","portableText","styleField","btField","textStyles","options","list","listField","listItems","compileType","rawType","Schema","compile","isHighSurrogate","char","charCode","charCodeAt","isLowSurrogate","cloneDiff","diff","patch","getCommonOverlap","textA","textB","text1","text2","text1Length","text2Length","substring","textLength","min","best","found","pattern","indexOf","getCommonPrefix","pointerMin","pointerMax","pointerMid","pointerStart","floor","getCommonSuffix","pointerEnd","cleanupSemantic","rawDiffs","diffs","hasChanges","equalities","equalitiesLength","lastEquality","pointer","lengthInsertions1","lengthDeletions1","lengthInsertions2","lengthDeletions2","DIFF_EQUAL","DIFF_INSERT","max","splice","DIFF_DELETE","cleanupMerge","cleanupSemanticLossless","deletion","insertion","overlapLength1","overlapLength2","nonAlphaNumericRegex","whitespaceRegex","linebreakRegex","blanklineEndRegex","blanklineStartRegex","diffCleanupSemanticScore","one","two","char1","charAt","char2","nonAlphaNumeric1","nonAlphaNumeric2","whitespace1","whitespace2","lineBreak1","lineBreak2","blankLine1","blankLine2","equality1","edit","equality2","commonOffset","commonString","bestEquality1","bestEdit","bestEquality2","bestScore","score","countDelete","countInsert","textDelete","textInsert","commonlength","pop","trueCount","_len","args","reduce","bool","cleanupEfficiency","editCost","preIns","preDel","postIns","postDel","bisect","deadline","maxD","ceil","vOffset","vLength","v1","v2","delta","front","k1start","k1end","k2start","k2end","d","Date","now","k1","k1Offset","x1","y1","k2Offset","x2","bisectSplit","k2","y2","text1a","text2a","text1b","text2b","doDiff","checkLines","diffsb","findHalfMatch","timeout","longText","shortText","halfMatch1","halfMatchI","halfMatch2","halfMatch","text1A","text1B","text2A","text2B","midCommon","i","seed","j","bestCommon","bestLongTextA","bestLongTextB","bestShortTextA","bestShortTextB","prefixLength","suffixLength","charsToLines","lineArray","chars","linesToChars","lineHash","diffLinesToMunge","lineStart","lineEnd","lineArrayLength","line","hasOwnProperty","String","fromCharCode","maxLines","chars1","chars2","doLineModeDiff","opts","a","linearray","aa","computeDiff","longtext","shorttext","diffsA","diffsB","createInternalOpts","adjustDiffForSurrogatePairs","commonprefix","commonsuffix","unshift","createDeadLine","MAX_VALUE","combineChar","data","dir","splitChar","hasSharedChar","deisolateChar","inv","insertIdx","deleteIdx","op","insertText","insertChar","deleteText","diffType","diffText","firstChar","lastChar","DEFAULT_OPTIONS","threshold","distance","applyDefaults","MAX_BITS$1","bitap","s","getAlphabetFromPattern","getBitapScore","e","accuracy","proximity","scoreThreshold","bestLoc","lastIndexOf","matchmask","binMin","binMid","binMax","lastRd","start","finish","rd","charMatch","searchLocation","createPatchObject","start1","start2","utf8Start1","utf8Start2","length1","length2","utf8Length1","utf8Length2","diffText1","diffText2","countUtf8Bytes","str","bytes","codePoint","codePointAt","utf8len","adjustIndiciesToUcs2","patches","base","byteOffset","idx","advanceTo","allowExceedingIndices","adjusted","MAX_BITS","DEFAULT_MARGIN","DEFAULT_OPTS","margin","getDefaultOpts","make","b","_make","patchDiffLength","charCount1","charCount2","utf8Count1","utf8Count2","prepatchText","postpatchText","currentDiff","diffTextLength","diffByteLength","addContext","padding","prefixStart","prefix","prefixUtf8Length","suffixEnd","suffix","suffixUtf8Length","levenshtein","leven","insertions","deletions","xIndex","lastChars1","lastChars2","addPadding","paddingLength","nullPadding","p","firstDiffLength","extraLength","splitMax","patchSize","bigpatch","preContext","empty","precontextByteCount","diffTextByteCount","shift","postContext","postContextByteCount","apply","apply$4","originalText","parsed","deleteThreshold","results","expectedLoc","startLoc","endLoc","index1","index2","mod","stringifyPatch","coords1","coords2","encodeURI","replace","patchHeader","parse","textline","lines","split","textPointer","m","toInt","currentLine","sign","decodeURI","ex","utf8Diff","num","parseInt","setIfMissing","diffMatchPatch","diffMatchPatch$1","currentValue","nextValue","makePatches","stringifyPatches","insert","insert$1","items","unset","createOperationToPatches","textBlockName","insertTextPatch","operation","beforeValue","isTextBlock","textChild","isTextSpan","prevBlock","prevChild","prevText","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","newProperties","isUndefined","keys","forEach","keyName","val","insertNodePatch","targetKey","splitNodePatch","splitBlock","oldBlock","targetValue","spansToUnset","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","newBlock","mergedSpan","targetSpan","moveNodePatch","targetChild","childToInsert","createWithPortableTextMarkModel","change$","withPortableTextMarkModel","normalizeNode","forceNewSelection","select","ptRange","nodeEntry","operations","some","includes","mergeSpans","isSpan","setNodes","properties","oldDefs","newMarkDefs","uniq","isNormalized","voids","isElementProps","normalizeMarkDefs","mark","mode","splitNodes","marksWithoutAnnotationMarks","addMark","isExpanded","splitTextNodes","shouldRemoveMark","flatten","removeMark","withoutNormalizing","_ref4","eMark","hanging","normalize","existingMarks","_ref5","pteIsMarkActive","pteToggleMark","isActive","reverse","parent","nextPath","nextNode","mergeNodes","blocks","def","createWithEditableAPI","portableTextEditor","withEditableAPI","setEditable","blur","toggleMark","toggleList","pteToggleListItem","toggleBlockStyle","blockStyle","pteToggleBlockStyle","isMarkActive","err","undo","redo","slateSelection","deselect","focusBlock","Node","descendant","focusChild","ptBlock","insertChild","focusChildPath","isSpanNode","focusNode","move","unit","insertNodes","insertBlock","isEmptyTextBlock","removeNodes","insertNode","hasBlockStyle","pteHasBlockStyle","hasListStyle","pteHasListStyle","findByPath","slatePath","ptChild","findDOMNode","activeAnnotations","spans","addAnnotation","annotationKey","pteExpandToWord","textNode","newSelection","end","spanPath","markDefPath","hasRange","createPlaceholderBlock","removeAnnotation","nodePath","_ref6","marksToRemove","getSelection","existing","getValue","isCollapsedSelection","isExpandedSelection","insertBreak","getFragment","createWithMaxBlocks","maxBlocks","withMaxBlocks","rows","PRESERVE_KEYS","withPreserveKeys","fn","prev","isPreservingKeys","createWithObjectKeys","withKeys","withNewKey","isEditor","entry","BEFORE","AFTER","array","index","_len2","_key2","len","normalizedIdx","copy","_len3","values","_key3","hasOwn","prototype","call","bind","arr","findTargetIndex","pathSegment","apply$3","head","tail","applyPatch","apply$2","clone","isObject","omit","OPERATIONS","_currentValue","_nextValue","inc","dec","SUPPORTED_PATCH_TYPES","apply$1","result","applyPatches","parsePatch","func","applyAll","_apply","applyArrayPatch","isString","applyStringPatch","applyObjectPatch","applyPrimitivePatch","res","debugVerbose","createApplyPatch","previousPatch","changed","insertPatch","unsetPatch","setPatch","error","findBlockAndChildFromPath","isSpanTextDiffMatchPatch","newValue","diffMatchPatchApplyPatches","makeDiff","debugState","targetBlockPath","targetChildPath","blocksToInsert","targetBlockIndex","childrenToInsert","targetChildIndex","childInsertPath","newText","oldText","nextRest","prevChildren","prevRest","c","cIndex","newVal","previousSelection","blockIndex","isKeyedSegment","segment","stateName","findBlockFromPath","isMatch","withRemoteChanges","isChangingRemotely","isChangingLocally","PATCHING","withoutPatching","isPatching","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","state","getRemotePatches","createWithUndoRedo","patches$","blockSchemaType","previousSnapshot","remotePatches","subscriptions","sub","subscribe","_ref7","snapshot","reset","origin","history","undos","redos","time","unsubscribe","step","lastOp","overwrite","shouldOverwrite","save","merge","shouldMerge","newStep","createSelectOperation","timestamp","shouldClear","otherPatches","transformedOperations","transformOperation","withoutSaving","Operation","inverse","transformedOperation","insertBlockIndex","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","diffPatches","diffPatch","adjustOffsetBy","changedOffset","every","_ref8","dType","currentFocus","currentAnchor","points","createWithPatches","_ref9","patchFunctions","previousChildren","withPatches","bufferedPatches","handleBufferedRemotePatches","handlePatches","_ref10","editorWasEmpty","editorIsEmpty","previousValue","createWithPlaceholderBlock","_ref11","withPlaceholderBlock","createWithPortableTextBlockStyle","defaultStyle","withPortableTextBlockStyle","SlateText","selectedBlocks","_ref12","MAX_LIST_LEVEL","createWithPortableTextLists","withPortableTextLists","listItemStyle","pteUnsetListItem","pteSetListItem","_ref13","newNode","_ref14","pteEndList","_ref15","pteIncrementBlockLevels","_ref16","createWithPortableTextSelections","prevSelection","withPortableTextSelections","emitPortableTextSelection","createWithSchemaTypes","_ref17","withSchemaTypes","isPortableTextTextBlock","isPortableTextSpan","isPortableTextListBlock","obj","inlineSchemaTypes","key","createWithUtils","_ref18","withUtils","focusOffset","charsBefore","charsAfter","isEmpty","whiteSpaceBeforeIndex","newStartOffset","whiteSpaceAfterIndex","newEndOffset","isNaN","setSelection","DEFAULT_HOTKEYS","custom","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","createEmptyBlock","withHotKeys","pteWithHotKeys","cat","hotkey","isHotkey","nativeEvent","possibleMark","possibleCommand","command","isEnter","isTab","isShiftEnter","isShiftTab","isBackspace","isDelete","prevPath","isEmptyFocusBlock","nextBlock","focusBlockPath","hasAnnotationFocus","edges","atStartOfNode","isStart","endAtEndOfNode","isEnd","validateValue","resolution","valid","validChildTypes","validBlockTypes","description","action","i18n","isPlainObject","currentBlockTypeName","expectedTypeName","typeName","allUsedMarks","annotationMarks","orphanedMarks","spanChildren","orphaned","cMrk","newSpan","newChild","childType","createWithInsertData","withInsertData","blockTypeName","spanTypeName","whitespaceOnPasteMode","unstable_whitespaceOnPasteMode","toPlainText","title","setFragmentData","originEvent","startVoid","void","endVoid","domRange","toDOMRange","contents","cloneContents","voidNode","r","cloneRange","domNode","setEndAfter","querySelectorAll","zw","isNewline","getAttribute","textContent","elm","removeAttribute","hasAttribute","ownerDocument","createElement","asHTML","innerHTML","fragment","asJSON","asPlainText","clearData","insertPortableTextData","pText","getData","slateValue","_regenerateKeys","validation","errorDescription","_insertFragment","insertTextOrHTMLData","isLoading","html","insertedType","htmlToBlocks","normalizeBlock","escapeHtml","textToHtml","insertData","insertFragmentData","insertFragment","entityMap","oldKey","newKey","nodeWithNewKeys","isPasteToEmptyEditor","originalFnMap","withPlugins","destroy","operationToPatches","withObjectKeys","withUndoRedo","originalFunctions","noop","unsubscribes","subscribeFn","unsubscribeFn","SlateContainer","slateEditor","_sub","withReact","createEditor","initialValue","Slate","PortableTextEditorSelectionContext","usePortableTextEditorSelection","PortableTextEditorValueContext","PortableTextEditorReadOnlyContext","usePortableTextEditorReadOnlyStatus","CURRENT_VALUE","useSyncValue","useSlate","updateValueFunctionRef","updateFromCurrentValue","updateValueDebounced","debounce","trailing","leading","updateFunction","isProcessingLocalChanges","isProcessingRemoteChanges","isChanged","isValid","hadSelection","childrenLength","_","slateValueFromProps","currentBlock","currentBlockIndex","validationValue","_updateBlock","_replaceBlock","currentSelection","selectionFocusOnBlock","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","FLUSH_PATCHES_THROTTLED_MS","process","env","NODE_ENV","Synchronizer","pendingPatches","syncValue","onFlushPendingPatches","PortableTextEditor","onFlushPendingPatchesThrottled","throttle","isNormalizing","startTransition","handleOnline","handleOffline","window","addEventListener","removeEventListener","isInitialValueFromProps","Provider","Component","constructor","Subject","editable","incomingPatches$","componentDidUpdate","prevProps","editorRef","render","_patches$","toString","isObjectPath","isChildObjectEditPath","isBlockObjectEditPath","Leaf","leaf","renderDecorator","renderAnnotation","spanRef","blockSelected","setFocused","setSelected","decoratorValues","shouldTrackSelectionAndFocus","sel","setSelectedFromRange","winSelection","rangeCount","getRangeAt","intersectsNode","content","returnedChildren","_child","defaultRendered","useIsomorphicEffect","useLayoutEffect","useForwardedRef","innerRef","PLACEHOLDER_STYLE","userSelect","pointerEvents","right","EMPTY_DECORATORS","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBlur","onFocus","onBeforeInput","onPaste","onCopy","renderPlaceholder","propsSelection","scrollSelectionIntoView","restProps","editableElement","setEditableElement","hasInvalidValue","setHasInvalidValue","renderElement","eProps","renderLeaf","lProps","rendered","placeholder","Fragment","restoreSelectionFromProps","normalizedSelection","slateRange","o","handleCopy","handlePaste","clipboardData","Promise","resolve","then","catch","handleOnFocus","isDefaultPrevented","handleOnBlur","isPropagationStopped","handleOnBeforeInput","validateSelection","root","findDocumentOrShadowRoot","activeElement","getWindow","domSelection","existingDOMRange","newDOMRange","startOffset","endOffset","removeAllRanges","addRange","mutationObserver","MutationObserver","observe","attributeOldValue","characterData","childList","subtree","disconnect","handleKeyDown","onKeyDown","scrollSelectionIntoViewToSlate","decorate","SlateEditable","autoFocus","onDOMBeforeInput","compactPatches","lastPatch","finalPatches","nextPatch"],"mappings":"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","x_google_ignoreList":[15]}