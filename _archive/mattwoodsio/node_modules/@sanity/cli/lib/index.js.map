{"version":3,"file":"index.js","sources":["../src/cliClient.ts","../src/config.ts"],"sourcesContent":["import {createClient, type SanityClient} from '@sanity/client'\n\nimport {getCliConfigSync} from './util/getCliConfig'\nimport {resolveRootDir} from './util/resolveRootDir'\n\nexport interface CliClientOptions {\n  cwd?: string\n\n  projectId?: string\n  dataset?: string\n  useCdn?: boolean\n  token?: string\n  apiVersion?: string\n}\n\nexport function getCliClient(options: CliClientOptions = {}): SanityClient {\n  if (typeof process !== 'object') {\n    throw new Error('getCliClient() should only be called from node.js scripts')\n  }\n\n  const {\n    // eslint-disable-next-line no-process-env\n    cwd = process.env.SANITY_BASE_PATH || process.cwd(),\n    useCdn = false,\n    apiVersion = '2022-06-06',\n    projectId,\n    dataset,\n    token = getCliClient.__internal__getToken(),\n  } = options\n\n  if (projectId && dataset) {\n    return createClient({projectId, dataset, apiVersion, useCdn, token})\n  }\n\n  const rootDir = resolveRootDir(cwd)\n  const {config} = getCliConfigSync(rootDir) || {}\n  if (!config) {\n    throw new Error('Unable to resolve CLI configuration')\n  }\n\n  const apiConfig = config?.api || {}\n  if (!apiConfig.projectId || !apiConfig.dataset) {\n    throw new Error('Unable to resolve project ID/dataset from CLI configuration')\n  }\n\n  return createClient({\n    projectId: apiConfig.projectId,\n    dataset: apiConfig.dataset,\n    apiVersion,\n    useCdn,\n    token,\n  })\n}\n\n/* eslint-disable camelcase */\n/**\n * @internal\n * @deprecated This is only for INTERNAL use, and should not be relied upon outside of official Sanity modules\n * @returns A token to use when constructing a client without a `token` explicitly defined, or undefined\n */\ngetCliClient.__internal__getToken = (): string | undefined => undefined\n/* eslint-enable camelcase */\n","import {type CliConfig} from './types'\n\n/** @beta */\nexport function defineCliConfig(config: CliConfig): CliConfig {\n  return config\n}\n\n/**\n * @deprecated Use `defineCliConfig` instead\n * @beta\n */\nexport function createCliConfig(config: CliConfig): CliConfig {\n  return config\n}\n"],"names":["getCliClient","options","arguments","length","undefined","process","Error","cwd","env","SANITY_BASE_PATH","useCdn","apiVersion","projectId","dataset","token","__internal__getToken","createClient","rootDir","resolveRootDir","config","getCliConfigSync","apiConfig","api","defineCliConfig","createCliConfig"],"mappings":";;;;;;;AAegB,SAAAA,YAAAA,CAAA,EAA2D;EAAA,IAA9CC,OAA4B,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAA,EAAkB;EACrE,IAAA,OAAOG,YAAY,QAAU,EAAA;IACzB,MAAA,IAAIC,MAAM,2DAA2D,CAAA;EAC7E;EAEM,MAAA;IAAA;IAEJC,GAAM,GAAAF,OAAA,CAAQG,GAAI,CAAAC,gBAAA,IAAoBJ,QAAQE,GAAI,CAAA,CAAA;IAClDG,MAAS,GAAA,KAAA;IACTC,UAAa,GAAA,YAAA;IACbC,SAAA;IACAC,OAAA;IACAC,KAAA,GAAQd,aAAae,oBAAqB,CAAA;EACxC,CAAA,GAAAd,OAAA;EAEJ,IAAIW,aAAaC,OAAS,EAAA;IACxB,OAAOG,OAAAA,CAAAA,aAAa;MAACJ,SAAA;MAAWC;MAASF,UAAY;MAAAD,MAAA;MAAQI;KAAM,CAAA;EACrE;EAEM,MAAAG,OAAA,GAAUC,uBAAeX,GAAG,CAAA;EAClC,MAAM;IAACY;EAAM,CAAA,GAAIC,YAAiB,CAAAA,gBAAA,CAAAH,OAAO,KAAK,CAAA,CAAC;EAC/C,IAAI,CAACE,MAAQ,EAAA;IACL,MAAA,IAAIb,MAAM,qCAAqC,CAAA;EACvD;EAEM,MAAAe,SAAA,GAAY,CAAAF,MAAQ,aAARA,MAAQ,uBAARA,MAAQ,CAAAG,GAAA,KAAO,EAAC;EAClC,IAAI,CAACD,SAAA,CAAUT,SAAa,IAAA,CAACS,UAAUR,OAAS,EAAA;IACxC,MAAA,IAAIP,MAAM,6DAA6D,CAAA;EAC/E;EAEA,OAAOU,oBAAa,CAAA;IAClBJ,WAAWS,SAAU,CAAAT,SAAA;IACrBC,SAASQ,SAAU,CAAAR,OAAA;IACnBF,UAAA;IACAD,MAAA;IACAI;EAAA,CACD,CAAA;AACH;AAQAd,YAAA,CAAae,uBAAuB,MAA0B,KAAA,CAAA;ACzDvD,SAASQ,gBAAgBJ,MAA8B,EAAA;EACrD,OAAAA,MAAA;AACT;AAMO,SAASK,gBAAgBL,MAA8B,EAAA;EACrD,OAAAA,MAAA;AACT;;;;"}