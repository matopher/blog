'use strict';

var require$$0 = require('fs');
var path = require('path');
var worker_threads = require('worker_threads');
var pkgDir = require('pkg-dir');
function _interopDefaultCompat(e) {
  return e && typeof e === 'object' && 'default' in e ? e : {
    default: e
  };
}
var require$$0__default = /*#__PURE__*/_interopDefaultCompat(require$$0);
var path__default = /*#__PURE__*/_interopDefaultCompat(path);
var pkgDir__default = /*#__PURE__*/_interopDefaultCompat(pkgDir);
async function getCliWorkerPath(workerPath) {
  const cliDir = await pkgDir__default.default(__dirname);
  if (!cliDir) {
    throw new Error("Failed to find root @sanity/cli module directory");
  }
  const resolvedPath = path__default.default.resolve(cliDir, "lib", "workers", workerPath);
  try {
    return require.resolve(resolvedPath);
  } catch (err) {
    throw new Error("Unable to resolve path for worker: ".concat(workerPath));
  }
}
const requireFunc = typeof __webpack_require__ === "function" ? __non_webpack_require__ : require;
function dynamicRequire(request) {
  const mod = requireFunc(request);
  return mod.__esModule && mod.default ? mod.default : mod;
}
dynamicRequire.resolve = requireFunc.resolve;
async function getCliConfig(cwd) {
  let {
    forked
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (forked) {
    try {
      return await getCliConfigForked(cwd);
    } catch (err) {}
  }
  const {
    unregister
  } = require("esbuild-register/dist/node").register();
  try {
    const v3Config = getSanityCliConfig(cwd);
    if (v3Config) {
      return v3Config;
    }
    return getSanityJsonConfig(cwd);
  } catch (err) {
    throw err;
  } finally {
    unregister();
  }
}
function getCliConfigSync(cwd) {
  const v3Config = getSanityCliConfig(cwd);
  return v3Config ? v3Config : getSanityJsonConfig(cwd);
}
async function getCliConfigForked(cwd) {
  const workerPath = await getCliWorkerPath("getCliConfig");
  return new Promise((resolve, reject) => {
    const worker = new worker_threads.Worker(workerPath, {
      workerData: cwd,
      // eslint-disable-next-line no-process-env
      env: process.env
    });
    worker.on("message", message => {
      if (message.type === "config") {
        resolve(message.config);
      } else {
        const error = new Error(message.error);
        error.type = message.errorType;
        reject(new Error(message.error));
      }
    });
    worker.on("error", reject);
    worker.on("exit", code => {
      if (code !== 0) {
        reject(new Error("Worker stopped with exit code ".concat(code)));
      }
    });
  });
}
function getSanityJsonConfig(cwd) {
  const configPath = path__default.default.join(cwd, "sanity.json");
  if (!require$$0__default.default.existsSync(configPath)) {
    return null;
  }
  return {
    config: loadJsonConfig(configPath),
    path: configPath,
    version: 2
  };
}
function getSanityCliConfig(cwd) {
  const jsConfigPath = path__default.default.join(cwd, "sanity.cli.js");
  const tsConfigPath = path__default.default.join(cwd, "sanity.cli.ts");
  const [js, ts] = [require$$0__default.default.existsSync(jsConfigPath), require$$0__default.default.existsSync(tsConfigPath)];
  if (!js && !ts) {
    return null;
  }
  if (!js && ts) {
    return {
      config: importConfig(tsConfigPath),
      path: tsConfigPath,
      version: 3
    };
  }
  if (js && ts) {
    warn("Found both `sanity.cli.js` and `sanity.cli.ts` - using sanity.cli.js");
  }
  return {
    config: importConfig(jsConfigPath),
    path: jsConfigPath,
    version: 3
  };
}
function loadJsonConfig(filePath) {
  try {
    const content = require$$0__default.default.readFileSync(filePath, "utf8");
    return JSON.parse(content);
  } catch (err) {
    console.error("Error reading \"".concat(filePath, "\": ").concat(err.message));
    return null;
  }
}
function importConfig(filePath) {
  try {
    const config = dynamicRequire(filePath);
    if (config === null || typeof config !== "object") {
      throw new Error("Module export is not a configuration object");
    }
    return "default" in config ? config.default : config;
  } catch (err) {
    if (err.code === "MODULE_NOT_FOUND" && err.message.includes("sanity/cli")) {
      return null;
    }
    console.error("Error reading \"".concat(filePath, "\": ").concat(err.message));
    return null;
  }
}
function warn(warning) {
  if (typeof process.send === "function") {
    process.send({
      type: "warning",
      warning
    });
  } else {
    console.warn(warning);
  }
}
exports.dynamicRequire = dynamicRequire;
exports.getCliConfig = getCliConfig;
exports.getCliConfigSync = getCliConfigSync;
//# sourceMappingURL=getCliConfig-DoiVfP79.js.map
