'use strict';

require('get-it');
require('get-it/middleware');
var s = {
    0: 8203,
    1: 8204,
    2: 8205,
    3: 8290,
    4: 8291,
    5: 8288,
    6: 65279,
    7: 8289,
    8: 119155,
    9: 119156,
    a: 119157,
    b: 119158,
    c: 119159,
    d: 119160,
    e: 119161,
    f: 119162
  },
  c = {
    0: 8203,
    1: 8204,
    2: 8205,
    3: 65279
  },
  d = new Array(4).fill(String.fromCodePoint(c[0])).join("");
function E(t) {
  let e = JSON.stringify(t);
  return "".concat(d).concat(Array.from(e).map(r => {
    let n = r.charCodeAt(0);
    if (n > 255) throw new Error("Only ASCII edit info can be encoded. Error attempting to encode ".concat(e, " on character ").concat(r, " (").concat(n, ")"));
    return Array.from(n.toString(4).padStart(4, "0")).map(o => String.fromCodePoint(c[o])).join("");
  }).join(""));
}
function I(t) {
  return Number.isNaN(Number(t)) ? !!Date.parse(t) : !1;
}
function x(t) {
  try {
    new URL(t, t.startsWith("/") ? "https://acme.com" : void 0);
  } catch {
    return !1;
  }
  return !0;
}
function b(t, e) {
  let r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "auto";
  return r === !0 || r === "auto" && (I(t) || x(t)) ? t : "".concat(t).concat(E(e));
}
Object.fromEntries(Object.entries(c).map(t => t.reverse()));
Object.fromEntries(Object.entries(s).map(t => t.reverse()));
"".concat(Object.values(s).map(t => "\\u{".concat(t.toString(16), "}")).join(""));
const reKeySegment = /_key\s*==\s*['"](.*)['"]/;
function isKeySegment(segment) {
  return typeof segment == "string" ? reKeySegment.test(segment.trim()) : typeof segment == "object" && "_key" in segment;
}
function toString(path) {
  if (!Array.isArray(path)) throw new Error("Path is not an array");
  return path.reduce((target, segment, i) => {
    const segmentType = typeof segment;
    if (segmentType === "number") return "".concat(target, "[").concat(segment, "]");
    if (segmentType === "string") return "".concat(target).concat(i === 0 ? "" : ".").concat(segment);
    if (isKeySegment(segment) && segment._key) return "".concat(target, "[_key==\"").concat(segment._key, "\"]");
    if (Array.isArray(segment)) {
      const [from, to] = segment;
      return "".concat(target, "[").concat(from, ":").concat(to, "]");
    }
    throw new Error("Unsupported path segment `".concat(JSON.stringify(segment), "`"));
  }, "");
}
const ESCAPE = {
    "\f": "\\f",
    "\n": "\\n",
    "\r": "\\r",
    "	": "\\t",
    "'": "\\'",
    "\\": "\\\\"
  },
  UNESCAPE = {
    "\\f": "\f",
    "\\n": "\n",
    "\\r": "\r",
    "\\t": "	",
    "\\'": "'",
    "\\\\": "\\"
  };
function jsonPath(path) {
  return "$".concat(path.map(segment => typeof segment == "string" ? "['".concat(segment.replace(/[\f\n\r\t'\\]/g, match => ESCAPE[match]), "']") : typeof segment == "number" ? "[".concat(segment, "]") : segment._key !== "" ? "[?(@._key=='".concat(segment._key.replace(/['\\]/g, match => ESCAPE[match]), "')]") : "[".concat(segment._index, "]")).join(""));
}
function parseJsonPath(path) {
  const parsed = [],
    parseRe = /\['(.*?)'\]|\[(\d+)\]|\[\?\(@\._key=='(.*?)'\)\]/g;
  let match;
  for (; (match = parseRe.exec(path)) !== null;) {
    if (match[1] !== void 0) {
      const key = match[1].replace(/\\(\\|f|n|r|t|')/g, m => UNESCAPE[m]);
      parsed.push(key);
      continue;
    }
    if (match[2] !== void 0) {
      parsed.push(parseInt(match[2], 10));
      continue;
    }
    if (match[3] !== void 0) {
      const _key = match[3].replace(/\\(\\')/g, m => UNESCAPE[m]);
      parsed.push({
        _key,
        _index: -1
      });
      continue;
    }
  }
  return parsed;
}
function jsonPathToStudioPath(path) {
  return path.map(segment => {
    if (typeof segment == "string" || typeof segment == "number") return segment;
    if (segment._key !== "") return {
      _key: segment._key
    };
    if (segment._index !== -1) return segment._index;
    throw new Error("invalid segment:".concat(JSON.stringify(segment)));
  });
}
function jsonPathToMappingPath(path) {
  return path.map(segment => {
    if (typeof segment == "string" || typeof segment == "number") return segment;
    if (segment._index !== -1) return segment._index;
    throw new Error("invalid segment:".concat(JSON.stringify(segment)));
  });
}
function resolveMapping(resultPath, csm) {
  if (!(csm != null && csm.mappings)) return;
  const resultMappingPath = jsonPath(jsonPathToMappingPath(resultPath));
  if (csm.mappings[resultMappingPath] !== void 0) return {
    mapping: csm.mappings[resultMappingPath],
    matchedPath: resultMappingPath,
    pathSuffix: ""
  };
  const mappings = Object.entries(csm.mappings).filter(_ref => {
    let [key] = _ref;
    return resultMappingPath.startsWith(key);
  }).sort((_ref2, _ref3) => {
    let [key1] = _ref2;
    let [key2] = _ref3;
    return key2.length - key1.length;
  });
  if (mappings.length == 0) return;
  const [matchedPath, mapping] = mappings[0],
    pathSuffix = resultMappingPath.substring(matchedPath.length);
  return {
    mapping,
    matchedPath,
    pathSuffix
  };
}
function isArray(value) {
  return value !== null && Array.isArray(value);
}
function isRecord(value) {
  return typeof value == "object" && value !== null;
}
function walkMap(value, mappingFn) {
  let path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  return isArray(value) ? value.map((v, idx) => {
    if (isRecord(v)) {
      const _key = v._key;
      if (typeof _key == "string") return walkMap(v, mappingFn, path.concat({
        _key,
        _index: idx
      }));
    }
    return walkMap(v, mappingFn, path.concat(idx));
  }) : isRecord(value) ? Object.fromEntries(Object.entries(value).map(_ref4 => {
    let [k, v] = _ref4;
    return [k, walkMap(v, mappingFn, path.concat(k))];
  })) : mappingFn(value, path);
}
function encodeIntoResult(result, csm, encoder) {
  return walkMap(result, (value, path) => {
    if (typeof value != "string") return value;
    const resolveMappingResult = resolveMapping(path, csm);
    if (!resolveMappingResult) return value;
    const {
      mapping,
      matchedPath
    } = resolveMappingResult;
    if (mapping.type !== "value" || mapping.source.type !== "documentValue") return value;
    const sourceDocument = csm.documents[mapping.source.document],
      sourcePath = csm.paths[mapping.source.path],
      matchPathSegments = parseJsonPath(matchedPath),
      fullSourceSegments = parseJsonPath(sourcePath).concat(path.slice(matchPathSegments.length));
    return encoder({
      sourcePath: fullSourceSegments,
      sourceDocument,
      resultPath: path,
      value
    });
  });
}
const DRAFTS_PREFIX = "drafts.";
function getPublishedId(id) {
  return id.startsWith(DRAFTS_PREFIX) ? id.slice(DRAFTS_PREFIX.length) : id;
}
function createEditUrl(options) {
  const {
    baseUrl,
    workspace: _workspace = "default",
    tool: _tool = "default",
    id: _id,
    type,
    path,
    projectId,
    dataset
  } = options;
  if (!baseUrl) throw new Error("baseUrl is required");
  if (!path) throw new Error("path is required");
  if (!_id) throw new Error("id is required");
  if (baseUrl !== "/" && baseUrl.endsWith("/")) throw new Error("baseUrl must not end with a slash");
  const workspace = _workspace === "default" ? void 0 : _workspace,
    tool = _tool === "default" ? void 0 : _tool,
    id = getPublishedId(_id),
    stringifiedPath = Array.isArray(path) ? toString(jsonPathToStudioPath(path)) : path,
    searchParams = new URLSearchParams({
      baseUrl,
      id,
      type,
      path: stringifiedPath
    });
  workspace && searchParams.set("workspace", workspace), tool && searchParams.set("tool", tool), projectId && searchParams.set("projectId", projectId), dataset && searchParams.set("dataset", dataset), _id.startsWith(DRAFTS_PREFIX) && searchParams.set("isDraft", "");
  const segments = [baseUrl === "/" ? "" : baseUrl];
  workspace && segments.push(workspace);
  const routerParams = ["mode=presentation", "id=".concat(id), "type=".concat(type), "path=".concat(encodeURIComponent(stringifiedPath))];
  return tool && routerParams.push("tool=".concat(tool)), segments.push("intent", "edit", "".concat(routerParams.join(";"), "?").concat(searchParams)), segments.join("/");
}
function resolveStudioBaseRoute(studioUrl) {
  let baseUrl = typeof studioUrl == "string" ? studioUrl : studioUrl.baseUrl;
  return baseUrl !== "/" && (baseUrl = baseUrl.replace(/\/$/, "")), typeof studioUrl == "string" ? {
    baseUrl
  } : {
    ...studioUrl,
    baseUrl
  };
}
const filterDefault = _ref5 => {
    let {
      sourcePath,
      value
    } = _ref5;
    if (isValidDate(value) || isValidURL(value)) return !1;
    const endPath = sourcePath.at(-1);
    return !(sourcePath.at(-2) === "slug" && endPath === "current" || typeof endPath == "string" && endPath.startsWith("_") || typeof endPath == "number" && sourcePath.at(-2) === "marks" || endPath === "href" && typeof sourcePath.at(-2) == "number" && sourcePath.at(-3) === "markDefs" || endPath === "style" || endPath === "listItem" || sourcePath.some(path => path === "meta" || path === "metadata" || path === "openGraph" || path === "seo") || typeof endPath == "string" && denylist.has(endPath));
  },
  denylist = /* @__PURE__ */new Set(["color", "colour", "currency", "email", "format", "gid", "hex", "href", "hsl", "hsla", "icon", "id", "index", "key", "language", "layout", "link", "linkAction", "locale", "lqip", "page", "path", "ref", "rgb", "rgba", "route", "secret", "slug", "status", "tag", "template", "theme", "type", "unit", "url", "username", "variant", "website"]);
function isValidDate(dateString) {
  return /^\d{4}-\d{2}-\d{2}/.test(dateString) ? !!Date.parse(dateString) : !1;
}
function isValidURL(url) {
  try {
    new URL(url, url.startsWith("/") ? "https://acme.com" : void 0);
  } catch {
    return !1;
  }
  return !0;
}
const TRUNCATE_LENGTH = 20;
function stegaEncodeSourceMap(result, resultSourceMap, config) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i;
  const {
    filter,
    logger,
    enabled
  } = config;
  if (!enabled) {
    const msg = "config.enabled must be true, don't call this function otherwise";
    throw (_a = logger == null ? void 0 : logger.error) == null || _a.call(logger, "[@sanity/client]: ".concat(msg), {
      result,
      resultSourceMap,
      config
    }), new TypeError(msg);
  }
  if (!resultSourceMap) return (_b = logger == null ? void 0 : logger.error) == null || _b.call(logger, "[@sanity/client]: Missing Content Source Map from response body", {
    result,
    resultSourceMap,
    config
  }), result;
  if (!config.studioUrl) {
    const msg = "config.studioUrl must be defined";
    throw (_c = logger == null ? void 0 : logger.error) == null || _c.call(logger, "[@sanity/client]: ".concat(msg), {
      result,
      resultSourceMap,
      config
    }), new TypeError(msg);
  }
  const report = {
      encoded: [],
      skipped: []
    },
    resultWithStega = encodeIntoResult(result, resultSourceMap, _ref6 => {
      let {
        sourcePath,
        sourceDocument,
        resultPath,
        value
      } = _ref6;
      if ((typeof filter == "function" ? filter({
        sourcePath,
        resultPath,
        filterDefault,
        sourceDocument,
        value
      }) : filterDefault({
        sourcePath,
        resultPath,
        filterDefault,
        sourceDocument,
        value
      })) === !1) return logger && report.skipped.push({
        path: prettyPathForLogging(sourcePath),
        value: "".concat(value.slice(0, TRUNCATE_LENGTH)).concat(value.length > TRUNCATE_LENGTH ? "..." : ""),
        length: value.length
      }), value;
      logger && report.encoded.push({
        path: prettyPathForLogging(sourcePath),
        value: "".concat(value.slice(0, TRUNCATE_LENGTH)).concat(value.length > TRUNCATE_LENGTH ? "..." : ""),
        length: value.length
      });
      const {
        baseUrl,
        workspace,
        tool
      } = resolveStudioBaseRoute(typeof config.studioUrl == "function" ? config.studioUrl(sourceDocument) : config.studioUrl);
      if (!baseUrl) return value;
      const {
        _id: id,
        _type: type,
        _projectId: projectId,
        _dataset: dataset
      } = sourceDocument;
      return b(value, {
        origin: "sanity.io",
        href: createEditUrl({
          baseUrl,
          workspace,
          tool,
          id,
          type,
          path: sourcePath,
          ...(!config.omitCrossDatasetReferenceData && {
            dataset,
            projectId
          })
        })
      },
      // We use custom logic to determine if we should skip encoding
      !1);
    });
  if (logger) {
    const isSkipping = report.skipped.length,
      isEncoding = report.encoded.length;
    if ((isSkipping || isEncoding) && ((_d = (logger == null ? void 0 : logger.groupCollapsed) || logger.log) == null || _d("[@sanity/client]: Encoding source map into result"), (_e = logger.log) == null || _e.call(logger, "[@sanity/client]: Paths encoded: ".concat(report.encoded.length, ", skipped: ").concat(report.skipped.length))), report.encoded.length > 0 && ((_f = logger == null ? void 0 : logger.log) == null || _f.call(logger, "[@sanity/client]: Table of encoded paths"), (_g = (logger == null ? void 0 : logger.table) || logger.log) == null || _g(report.encoded)), report.skipped.length > 0) {
      const skipped = /* @__PURE__ */new Set();
      for (const {
        path
      } of report.skipped) skipped.add(path.replace(reKeySegment, "0").replace(/\[\d+\]/g, "[]"));
      (_h = logger == null ? void 0 : logger.log) == null || _h.call(logger, "[@sanity/client]: List of skipped paths", [...skipped.values()]);
    }
    (isSkipping || isEncoding) && ((_i = logger == null ? void 0 : logger.groupEnd) == null || _i.call(logger));
  }
  return resultWithStega;
}
function prettyPathForLogging(path) {
  return toString(jsonPathToStudioPath(path));
}
var stegaEncodeSourceMap$1 = /* @__PURE__ */Object.freeze({
  __proto__: null,
  stegaEncodeSourceMap
});
exports.a = stegaEncodeSourceMap$1;
exports.e = encodeIntoResult;
exports.s = stegaEncodeSourceMap;
//# sourceMappingURL=stegaEncodeSourceMap-__Tf172r.js.map
