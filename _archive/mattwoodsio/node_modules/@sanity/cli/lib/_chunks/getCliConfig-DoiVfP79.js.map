{"version":3,"file":"getCliConfig-DoiVfP79.js","sources":["../../src/util/cliWorker.ts","../../src/util/dynamicRequire.ts","../../src/util/getCliConfig.ts"],"sourcesContent":["import path from 'path'\nimport pkgDir from 'pkg-dir'\n\n/**\n * Because we're bundling the CLI into a single file, the classic approach of\n * checking `isMainThread()` and spawning a thread on `__dirname` does not work,\n * as it leads to the entire CLI being re-executed in the worker thread.\n *\n * To make things worse, the built CLI makes it difficult to resolve paths to\n * built source files (that contains the unpackaged worker).\n *\n * This function takes a path relative to the `src/workers` folder, resolves\n * the location of that within the installed location (eg global Sanity CLI)\n * and ensures we can resolve the actual module before trying to spawn the\n * worker thread.\n *\n * @param workerPath - _RELATIVE_ path (relative to `src/workers`) to the worker\n * @returns Full, absolute path to the worker\n * @internal\n */\nexport async function getCliWorkerPath(workerPath: string): Promise<string> {\n  const cliDir = await pkgDir(__dirname)\n  if (!cliDir) {\n    throw new Error('Failed to find root @sanity/cli module directory')\n  }\n\n  const resolvedPath = path.resolve(cliDir, 'lib', 'workers', workerPath)\n  try {\n    return require.resolve(resolvedPath)\n  } catch (err) {\n    throw new Error(`Unable to resolve path for worker: ${workerPath}`)\n  }\n}\n","// Prevent webpack from bundling in webpack context,\n// use regular node require for unbundled context\n\n/* eslint-disable camelcase, no-undef */\ndeclare const __webpack_require__: boolean\ndeclare const __non_webpack_require__: typeof require\n\nconst requireFunc: typeof require =\n  typeof __webpack_require__ === 'function' ? __non_webpack_require__ : require\n/* eslint-enable camelcase, no-undef */\n\nexport function dynamicRequire<T = any>(request: string): T {\n  const mod = requireFunc(request)\n  return mod.__esModule && mod.default ? mod.default : mod\n}\n\ndynamicRequire.resolve = requireFunc.resolve\n","/* eslint-disable no-sync */\n\n/**\n * Reads the Sanity CLI config from one of the following files (in preferred order):\n *   - sanity.cli.js\n *   - sanity.cli.ts\n *\n * Note: There are two ways of using this:\n * a) `getCliConfig(cwd)`\n * b) `getCliConfig(cwd, {forked: true})`\n *\n * Approach a is generally a bit faster as it avoids the forking startup time, while\n * approach b could be considered \"safer\" since any side-effects of running the config\n * file will not bleed into the current CLI process directly.\n */\nimport fs from 'fs'\nimport path from 'path'\nimport {Worker} from 'worker_threads'\n\nimport {type CliConfig, type SanityJson} from '../types'\nimport {getCliWorkerPath} from './cliWorker'\nimport {dynamicRequire} from './dynamicRequire'\n\nexport type CliMajorVersion = 2 | 3\n\nexport type CliConfigResult =\n  | {config: SanityJson; path: string; version: 2}\n  | {config: CliConfig; path: string; version: 3}\n  | {config: null; path: string; version: CliMajorVersion}\n\nexport async function getCliConfig(\n  cwd: string,\n  {forked}: {forked?: boolean} = {},\n): Promise<CliConfigResult | null> {\n  if (forked) {\n    try {\n      return await getCliConfigForked(cwd)\n    } catch (err) {\n      // Intentional noop - try unforked variant\n    }\n  }\n\n  const {unregister} = __DEV__\n    ? {unregister: () => undefined}\n    : require('esbuild-register/dist/node').register()\n\n  try {\n    const v3Config = getSanityCliConfig(cwd)\n    if (v3Config) {\n      return v3Config\n    }\n\n    return getSanityJsonConfig(cwd)\n  } catch (err) {\n    throw err\n  } finally {\n    unregister()\n  }\n}\n\nexport function getCliConfigSync(cwd: string): CliConfigResult | null {\n  const v3Config = getSanityCliConfig(cwd)\n  return v3Config ? v3Config : getSanityJsonConfig(cwd)\n}\n\nasync function getCliConfigForked(cwd: string): Promise<CliConfigResult | null> {\n  const workerPath = await getCliWorkerPath('getCliConfig')\n  return new Promise((resolve, reject) => {\n    const worker = new Worker(workerPath, {\n      workerData: cwd,\n      // eslint-disable-next-line no-process-env\n      env: process.env,\n    })\n    worker.on('message', (message) => {\n      if (message.type === 'config') {\n        resolve(message.config)\n      } else {\n        const error = new Error(message.error)\n        ;(error as any).type = message.errorType\n        reject(new Error(message.error))\n      }\n    })\n    worker.on('error', reject)\n    worker.on('exit', (code) => {\n      if (code !== 0) {\n        reject(new Error(`Worker stopped with exit code ${code}`))\n      }\n    })\n  })\n}\n\nfunction getSanityJsonConfig(cwd: string): CliConfigResult | null {\n  const configPath = path.join(cwd, 'sanity.json')\n\n  if (!fs.existsSync(configPath)) {\n    return null\n  }\n\n  return {\n    config: loadJsonConfig(configPath),\n    path: configPath,\n    version: 2,\n  }\n}\n\nfunction getSanityCliConfig(cwd: string): CliConfigResult | null {\n  const jsConfigPath = path.join(cwd, 'sanity.cli.js')\n  const tsConfigPath = path.join(cwd, 'sanity.cli.ts')\n\n  const [js, ts] = [fs.existsSync(jsConfigPath), fs.existsSync(tsConfigPath)]\n\n  if (!js && !ts) {\n    return null\n  }\n\n  if (!js && ts) {\n    return {\n      config: importConfig(tsConfigPath),\n      path: tsConfigPath,\n      version: 3,\n    }\n  }\n\n  if (js && ts) {\n    warn('Found both `sanity.cli.js` and `sanity.cli.ts` - using sanity.cli.js')\n  }\n\n  return {\n    config: importConfig(jsConfigPath),\n    path: jsConfigPath,\n    version: 3,\n  }\n}\n\nfunction loadJsonConfig(filePath: string): SanityJson | null {\n  try {\n    const content = fs.readFileSync(filePath, 'utf8')\n    return JSON.parse(content)\n  } catch (err) {\n    console.error(`Error reading \"${filePath}\": ${err.message}`)\n    return null\n  }\n}\n\nfunction importConfig(filePath: string): CliConfig | null {\n  try {\n    const config = dynamicRequire<CliConfig | {default: CliConfig} | null>(filePath)\n    if (config === null || typeof config !== 'object') {\n      throw new Error('Module export is not a configuration object')\n    }\n\n    return 'default' in config ? config.default : config\n  } catch (err) {\n    // If attempting to import `defineCliConfig` or similar from `sanity/cli`,\n    // accept the fact that it might not be installed. Instead, let the CLI\n    // give a warning about the `sanity` module not being installed\n    if (err.code === 'MODULE_NOT_FOUND' && err.message.includes('sanity/cli')) {\n      return null\n    }\n\n    console.error(`Error reading \"${filePath}\": ${err.message}`)\n    return null\n  }\n}\n\nfunction warn(warning: string) {\n  if (typeof process.send === 'function') {\n    process.send({type: 'warning', warning})\n  } else {\n    console.warn(warning)\n  }\n}\n"],"names":["getCliWorkerPath","workerPath","cliDir","pkgDir","__dirname","Error","resolvedPath","path","resolve","require","err","concat","requireFunc","__webpack_require__","__non_webpack_require__","dynamicRequire","request","mod","__esModule","default","getCliConfig","cwd","forked","arguments","length","undefined","getCliConfigForked","unregister","register","v3Config","getSanityCliConfig","getSanityJsonConfig","getCliConfigSync","Promise","reject","worker","Worker","workerData","env","process","on","message","type","config","error","errorType","code","configPath","join","fs","existsSync","loadJsonConfig","version","jsConfigPath","tsConfigPath","js","ts","importConfig","warn","filePath","content","readFileSync","JSON","parse","console","includes","warning","send"],"mappings":"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"}