export declare interface AccessAttributeNode extends BaseNode {
  type: 'AccessAttribute'
  base?: ExprNode
  name: string
}

export declare interface AccessElementNode extends BaseNode {
  type: 'AccessElement'
  base: ExprNode
  index: number
}

export declare interface AndNode extends BaseNode {
  type: 'And'
  left: ExprNode
  right: ExprNode
}

export declare type AnyStaticValue =
  | StringValue
  | NumberValue
  | NullValue
  | BooleanValue
  | DateTimeValue
  | ObjectValue
  | ArrayValue
  | PathValue

export declare interface ArrayCoerceNode extends BaseNode {
  type: 'ArrayCoerce'
  base: ExprNode
}

export declare interface ArrayElementNode extends BaseNode {
  type: 'ArrayElement'
  value: ExprNode
  isSplat: boolean
}

export declare interface ArrayNode extends BaseNode {
  type: 'Array'
  elements: ArrayElementNode[]
}

export declare type ArrayValue = StaticValue<unknown[], 'array'>

export declare interface AscNode extends BaseNode {
  type: 'Asc'
  base: ExprNode
}

/** The base interface for SyntaxNode. */
export declare interface BaseNode {
  type: string
}

export declare type BooleanValue = StaticValue<boolean, 'boolean'>

export declare interface Context {
  timestamp: Date
  identity: string
  before: Value | null
  after: Value | null
  sanity?: {
    projectId: string
    dataset: string
  }
  dereference?: DereferenceFunction
}

export declare interface ContextNode extends BaseNode {
  type: 'Context'
  key: string
}

export declare class DateTime {
  date: Date
  constructor(date: Date)
  static parseToValue(str: string): Value
  equals(other: DateTime): boolean
  add(secs: number): DateTime
  difference(other: DateTime): number
  compareTo(other: DateTime): number
  toString(): string
  toJSON(): string
}

export declare type DateTimeValue = StaticValue<DateTime, 'datetime'>

export declare type DereferenceFunction = (obj: {
  _ref: string
}) => PromiseLike<Document_2 | null | undefined>

export declare interface DerefNode extends BaseNode {
  type: 'Deref'
  base: ExprNode
}

export declare interface DescNode extends BaseNode {
  type: 'Desc'
  base: ExprNode
}

declare type Document_2 = {
  _id?: string
  _type?: string
  [T: string]: unknown
}
export {Document_2 as Document}

/**
 * Evaluates a query.
 */
export declare function evaluate(
  tree: ExprNode,
  options?: EvaluateOptions,
): Value | PromiseLike<Value>

export declare interface EvaluateOptions {
  root?: any
  dataset?: any
  params?: Record<string, unknown>
  timestamp?: Date
  identity?: string
  before?: any
  after?: any
  sanity?: {
    projectId: string
    dataset: string
  }
  dereference?: DereferenceFunction
}

export declare interface EverythingNode extends BaseNode {
  type: 'Everything'
}

export declare type Executor<N = ExprNode> = (node: N, scope: Scope) => Value | PromiseLike<Value>

/** A node which can be evaluated into a value. */
export declare type ExprNode =
  | AccessAttributeNode
  | AccessElementNode
  | AndNode
  | ArrayNode
  | ArrayCoerceNode
  | AscNode
  | ContextNode
  | DerefNode
  | DescNode
  | EverythingNode
  | FilterNode
  | FlatMapNode
  | FuncCallNode
  | GroupNode
  | InRangeNode
  | MapNode
  | NegNode
  | NotNode
  | ObjectNode
  | OpCallNode
  | OrNode
  | ParameterNode
  | ParentNode_2
  | PipeFuncCallNode
  | PosNode
  | ProjectionNode
  | SelectNode
  | SelectorNode
  | SliceNode
  | ThisNode
  | TupleNode
  | ValueNode

export declare interface FilterNode extends BaseNode {
  type: 'Filter'
  base: ExprNode
  expr: ExprNode
}

export declare interface FlatMapNode extends BaseNode {
  type: 'FlatMap'
  base: ExprNode
  expr: ExprNode
}

export declare interface FuncCallNode extends BaseNode {
  type: 'FuncCall'
  func: GroqFunction
  namespace: string
  name: string
  args: ExprNode[]
}

export declare type GroqFunction = (
  args: GroqFunctionArg[],
  scope: Scope,
  execute: Executor,
) => PromiseLike<Value>

export declare type GroqFunctionArg = ExprNode

export declare type GroqPipeFunction = (
  base: Value,
  args: ExprNode[],
  scope: Scope,
  execute: Executor,
) => PromiseLike<Value>

/**
 * A type of a value in GROQ.
 */
export declare type GroqType =
  | 'null'
  | 'boolean'
  | 'number'
  | 'string'
  | 'array'
  | 'object'
  | 'path'
  | 'datetime'

export declare interface GroupNode extends BaseNode {
  type: 'Group'
  base: ExprNode
}

export declare interface InRangeNode extends BaseNode {
  type: 'InRange'
  base: ExprNode
  left: ExprNode
  right: ExprNode
  isInclusive: boolean
}

export declare interface MapNode extends BaseNode {
  type: 'Map'
  base: ExprNode
  expr: ExprNode
}

export declare interface NegNode extends BaseNode {
  type: 'Neg'
  base: ExprNode
}

export declare interface NotNode extends BaseNode {
  type: 'Not'
  base: ExprNode
}

export declare type NullValue = StaticValue<null, 'null'>

export declare type NumberValue = StaticValue<number, 'number'>

export declare type ObjectAttributeNode =
  | ObjectAttributeValueNode
  | ObjectConditionalSplatNode
  | ObjectSplatNode

export declare interface ObjectAttributeValueNode extends BaseNode {
  type: 'ObjectAttributeValue'
  name: string
  value: ExprNode
}

export declare interface ObjectConditionalSplatNode extends BaseNode {
  type: 'ObjectConditionalSplat'
  condition: ExprNode
  value: ExprNode
}

export declare interface ObjectNode extends BaseNode {
  type: 'Object'
  attributes: ObjectAttributeNode[]
}

export declare interface ObjectSplatNode extends BaseNode {
  type: 'ObjectSplat'
  value: ExprNode
}

export declare type ObjectValue = StaticValue<Record<string, unknown>, 'object'>

export declare type OpCall =
  | '=='
  | '!='
  | '>'
  | '>='
  | '<'
  | '<='
  | '+'
  | '-'
  | '*'
  | '/'
  | '%'
  | '**'
  | 'in'
  | 'match'

export declare interface OpCallNode extends BaseNode {
  type: 'OpCall'
  op: OpCall
  left: ExprNode
  right: ExprNode
}

export declare interface OrNode extends BaseNode {
  type: 'Or'
  left: ExprNode
  right: ExprNode
}

export declare interface ParameterNode extends BaseNode {
  type: 'Parameter'
  name: string
}

declare interface ParentNode_2 extends BaseNode {
  type: 'Parent'
  n: number
}
export {ParentNode_2 as ParentNode}

/**
 * Parses a GROQ query and returns a tree structure.
 */
export declare function parse(input: string, options?: ParseOptions): ExprNode

export declare interface ParseOptions {
  params?: Record<string, unknown>
  mode?: 'normal' | 'delta'
}

export declare class Path {
  private pattern
  private patternRe
  constructor(pattern: string)
  matches(str: string): boolean
  toJSON(): string
}

export declare type PathValue = StaticValue<Path, 'path'>

export declare interface PipeFuncCallNode extends BaseNode {
  type: 'PipeFuncCall'
  func: GroqPipeFunction
  base: ExprNode
  name: string
  args: ExprNode[]
}

export declare interface PosNode extends BaseNode {
  type: 'Pos'
  base: ExprNode
}

export declare interface ProjectionNode extends BaseNode {
  type: 'Projection'
  base: ExprNode
  expr: ExprNode
}

export declare class Scope {
  params: Record<string, unknown>
  source: Value
  value: Value
  parent: Scope | null
  context: Context
  isHidden: boolean
  constructor(
    params: Record<string, unknown>,
    source: Value,
    value: Value,
    context: Context,
    parent: Scope | null,
  )
  createNested(value: Value): Scope
  createHidden(value: Value): Scope
}

export declare interface SelectAlternativeNode extends BaseNode {
  type: 'SelectAlternative'
  condition: ExprNode
  value: ExprNode
}

export declare interface SelectNode extends BaseNode {
  type: 'Select'
  alternatives: SelectAlternativeNode[]
  fallback?: ExprNode
}

export declare interface SelectorNode extends BaseNode {
  type: 'Selector'
}

export declare interface SliceNode extends BaseNode {
  type: 'Slice'
  base: ExprNode
  left: number
  right: number
  isInclusive: boolean
}

export declare class StaticValue<P, T extends GroqType> {
  data: P
  type: T
  constructor(data: P, type: T)
  isArray(): boolean
  get(): Promise<any>
  [Symbol.asyncIterator](): Generator<Value, void, unknown>
}

export declare class StreamValue {
  type: 'stream'
  private generator
  private ticker
  private isDone
  private data
  constructor(generator: () => AsyncGenerator<Value, void, unknown>)
  isArray(): boolean
  get(): Promise<any>
  [Symbol.asyncIterator](): AsyncGenerator<Value, void, unknown>
  _nextTick(): Promise<void>
}

export declare type StringValue = StaticValue<string, 'string'>

/** Any sort of node which appears as syntax */
export declare type SyntaxNode =
  | ExprNode
  | ArrayElementNode
  | ObjectAttributeNode
  | SelectAlternativeNode

export declare interface ThisNode extends BaseNode {
  type: 'This'
}

export declare interface TupleNode extends BaseNode {
  type: 'Tuple'
  members: Array<ExprNode>
}

/**
 * The result of an expression.
 */
export declare type Value = AnyStaticValue | StreamValue

export declare interface ValueNode<P = any> {
  type: 'Value'
  value: P
}

export {}
