var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { BehaviorSubject, Observable } from 'rxjs';
import { useObservable } from '../useObservable';
import { createElement, Fragment, StrictMode, useEffect } from 'react';
import { act, render } from '@testing-library/react';
import { useAsObservable } from '../useAsObservable';
const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));
// NOTE: Jest runs NODE_ENV=test by default, which enables development flags for React
test('Strict mode should trigger double mount effects and re-renders', () => __awaiter(void 0, void 0, void 0, function* () {
    const subject = new BehaviorSubject(0);
    const observable = subject.asObservable();
    const returnedValues = [];
    let mountCount = 0;
    function ObservableComponent() {
        useEffect(() => {
            mountCount++;
        }, []);
        const observedValue = useObservable(observable);
        returnedValues.push(observedValue);
        return createElement(Fragment, null, observedValue);
    }
    const { rerender } = render(createElement(StrictMode, null, createElement(ObservableComponent)));
    expect(mountCount).toEqual(2);
    expect(returnedValues).toEqual([0, 0]);
    yield wait(10);
    act(() => subject.next(1));
    expect(returnedValues).toEqual([0, 0, 1, 1]);
    act(() => subject.next(2));
    expect(returnedValues).toEqual([0, 0, 1, 1, 2, 2]);
    expect(mountCount).toEqual(2);
}));
test('Strict mode should unsubscribe the source observable on unmount', () => {
    let subscribed = false;
    const observable = new Observable(() => {
        subscribed = true;
        return () => {
            subscribed = false;
        };
    });
    function ObservableComponent() {
        useObservable(observable);
        return createElement(Fragment, null);
    }
    const { rerender } = render(createElement(StrictMode, null, createElement(ObservableComponent)));
    expect(subscribed).toBe(true);
    rerender(createElement(StrictMode, null, createElement('div')));
    expect(subscribed).toBe(false);
});
test('useAsObservable should work in strict mode', () => __awaiter(void 0, void 0, void 0, function* () {
    const returnedValues = [];
    function ObservableComponent(props) {
        const count$ = useAsObservable(props.count);
        const count = useObservable(count$);
        returnedValues.push(count);
        return createElement(Fragment, null, 'ok');
    }
    const { rerender } = render(createElement(StrictMode, null, createElement(ObservableComponent, { count: 0 })));
    expect(returnedValues).toEqual([0, 0]);
    rerender(createElement(StrictMode, null, createElement(ObservableComponent, { count: 1 })));
    expect(returnedValues).toEqual([0, 0, 0, 0, 1, 1]);
}));
