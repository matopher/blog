import { useAsObservable } from './useAsObservable';
import { observableCallback } from 'observable-callback';
import { startWith } from 'rxjs/operators';
import { useContext, useRef, useState } from 'react';
var createState = function (initialState) { return observableCallback(startWith(initialState)); };
export function observeState(initial) {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    var _a = useState(initial), value = _a[0], update = _a[1];
    // eslint-disable-next-line react-hooks/rules-of-hooks
    return [useAsObservable(value), update];
}
export function observeCallback(operator) {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    var ref = useRef();
    if (!ref.current) {
        ref.current = operator ? observableCallback(operator) : observableCallback();
    }
    return ref.current;
}
export function observeContext(context) {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    return useAsObservable(useContext(context));
}
export function observeElement() {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    var ref = useRef();
    if (!ref.current) {
        ref.current = createState(null);
    }
    return ref.current;
}
